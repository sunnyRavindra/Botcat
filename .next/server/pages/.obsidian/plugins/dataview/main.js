"use strict";
(() => {
var exports = {};
exports.id = 6418;
exports.ids = [6418,2888,660];
exports.modules = {

/***/ 8912:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   config: () => (/* binding */ config),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   getServerSideProps: () => (/* binding */ getServerSideProps),
/* harmony export */   getStaticPaths: () => (/* binding */ getStaticPaths),
/* harmony export */   getStaticProps: () => (/* binding */ getStaticProps),
/* harmony export */   reportWebVitals: () => (/* binding */ reportWebVitals),
/* harmony export */   routeModule: () => (/* binding */ routeModule),
/* harmony export */   unstable_getServerProps: () => (/* binding */ unstable_getServerProps),
/* harmony export */   unstable_getServerSideProps: () => (/* binding */ unstable_getServerSideProps),
/* harmony export */   unstable_getStaticParams: () => (/* binding */ unstable_getStaticParams),
/* harmony export */   unstable_getStaticPaths: () => (/* binding */ unstable_getStaticPaths),
/* harmony export */   unstable_getStaticProps: () => (/* binding */ unstable_getStaticProps)
/* harmony export */ });
/* harmony import */ var next_dist_server_future_route_modules_pages_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3185);
/* harmony import */ var next_dist_server_future_route_modules_pages_module__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_module__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var next_dist_build_webpack_loaders_next_route_loader_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7182);
/* harmony import */ var next_dist_pages_document__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2940);
/* harmony import */ var next_dist_pages_document__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_pages_document__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var next_dist_pages_app__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5035);
/* harmony import */ var next_dist_pages_app__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_pages_app__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var private_next_pages_obsidian_plugins_dataview_main_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9830);
/* harmony import */ var private_next_pages_obsidian_plugins_dataview_main_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(private_next_pages_obsidian_plugins_dataview_main_js__WEBPACK_IMPORTED_MODULE_4__);

        // Next.js Route Loader
        
        

        // Import the app and document modules.
        
        

        // Import the userland code.
        

        // Re-export the component (should be the default export).
        /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_webpack_loaders_next_route_loader_helpers__WEBPACK_IMPORTED_MODULE_1__/* .hoist */ .l)(private_next_pages_obsidian_plugins_dataview_main_js__WEBPACK_IMPORTED_MODULE_4__, "default"));

        // Re-export methods.
        const getStaticProps = (0,next_dist_build_webpack_loaders_next_route_loader_helpers__WEBPACK_IMPORTED_MODULE_1__/* .hoist */ .l)(private_next_pages_obsidian_plugins_dataview_main_js__WEBPACK_IMPORTED_MODULE_4__, "getStaticProps")
        const getStaticPaths = (0,next_dist_build_webpack_loaders_next_route_loader_helpers__WEBPACK_IMPORTED_MODULE_1__/* .hoist */ .l)(private_next_pages_obsidian_plugins_dataview_main_js__WEBPACK_IMPORTED_MODULE_4__, "getStaticPaths")
        const getServerSideProps = (0,next_dist_build_webpack_loaders_next_route_loader_helpers__WEBPACK_IMPORTED_MODULE_1__/* .hoist */ .l)(private_next_pages_obsidian_plugins_dataview_main_js__WEBPACK_IMPORTED_MODULE_4__, "getServerSideProps")
        const config = (0,next_dist_build_webpack_loaders_next_route_loader_helpers__WEBPACK_IMPORTED_MODULE_1__/* .hoist */ .l)(private_next_pages_obsidian_plugins_dataview_main_js__WEBPACK_IMPORTED_MODULE_4__, "config")
        const reportWebVitals = (0,next_dist_build_webpack_loaders_next_route_loader_helpers__WEBPACK_IMPORTED_MODULE_1__/* .hoist */ .l)(private_next_pages_obsidian_plugins_dataview_main_js__WEBPACK_IMPORTED_MODULE_4__, "reportWebVitals")
        

        // Re-export legacy methods.
        const unstable_getStaticProps = (0,next_dist_build_webpack_loaders_next_route_loader_helpers__WEBPACK_IMPORTED_MODULE_1__/* .hoist */ .l)(private_next_pages_obsidian_plugins_dataview_main_js__WEBPACK_IMPORTED_MODULE_4__, "unstable_getStaticProps")
        const unstable_getStaticPaths = (0,next_dist_build_webpack_loaders_next_route_loader_helpers__WEBPACK_IMPORTED_MODULE_1__/* .hoist */ .l)(private_next_pages_obsidian_plugins_dataview_main_js__WEBPACK_IMPORTED_MODULE_4__, "unstable_getStaticPaths")
        const unstable_getStaticParams = (0,next_dist_build_webpack_loaders_next_route_loader_helpers__WEBPACK_IMPORTED_MODULE_1__/* .hoist */ .l)(private_next_pages_obsidian_plugins_dataview_main_js__WEBPACK_IMPORTED_MODULE_4__, "unstable_getStaticParams")
        const unstable_getServerProps = (0,next_dist_build_webpack_loaders_next_route_loader_helpers__WEBPACK_IMPORTED_MODULE_1__/* .hoist */ .l)(private_next_pages_obsidian_plugins_dataview_main_js__WEBPACK_IMPORTED_MODULE_4__, "unstable_getServerProps")
        const unstable_getServerSideProps = (0,next_dist_build_webpack_loaders_next_route_loader_helpers__WEBPACK_IMPORTED_MODULE_1__/* .hoist */ .l)(private_next_pages_obsidian_plugins_dataview_main_js__WEBPACK_IMPORTED_MODULE_4__, "unstable_getServerSideProps")

        // Create and export the route module that will be consumed.
        const options = {"definition":{"kind":"PAGES","page":"/.obsidian/plugins/dataview/main","pathname":"/.obsidian/plugins/dataview/main","bundlePath":"","filename":""}}
        const routeModule = new (next_dist_server_future_route_modules_pages_module__WEBPACK_IMPORTED_MODULE_0___default())({
          ...options,
          components: {
            App: (next_dist_pages_app__WEBPACK_IMPORTED_MODULE_3___default()),
            Document: (next_dist_pages_document__WEBPACK_IMPORTED_MODULE_2___default()),
          },
          userland: private_next_pages_obsidian_plugins_dataview_main_js__WEBPACK_IMPORTED_MODULE_4__,
        })
        
        
    

/***/ }),

/***/ 9830:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var obsidian = __webpack_require__(Object(function webpackMissingModule() { var e = new Error("Cannot find module 'obsidian'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
var view = __webpack_require__(Object(function webpackMissingModule() { var e = new Error("Cannot find module '@codemirror/view'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
var language = __webpack_require__(Object(function webpackMissingModule() { var e = new Error("Cannot find module '@codemirror/language'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
// these aren't really private, but nor are they really useful to document
/**
 * @private
 */ class LuxonError extends Error {
}
/**
 * @private
 */ class InvalidDateTimeError extends LuxonError {
    constructor(reason1){
        super(`Invalid DateTime: ${reason1.toMessage()}`);
    }
}
/**
 * @private
 */ class InvalidIntervalError extends LuxonError {
    constructor(reason1){
        super(`Invalid Interval: ${reason1.toMessage()}`);
    }
}
/**
 * @private
 */ class InvalidDurationError extends LuxonError {
    constructor(reason1){
        super(`Invalid Duration: ${reason1.toMessage()}`);
    }
}
/**
 * @private
 */ class ConflictingSpecificationError extends LuxonError {
}
/**
 * @private
 */ class InvalidUnitError extends LuxonError {
    constructor(unit1){
        super(`Invalid unit ${unit1}`);
    }
}
/**
 * @private
 */ class InvalidArgumentError extends LuxonError {
}
/**
 * @private
 */ class ZoneIsAbstractError extends LuxonError {
    constructor(){
        super("Zone is an abstract class");
    }
}
/**
 * @private
 */ const n$1 = "numeric", s$2 = "short", l$2 = "long";
const DATE_SHORT = {
    year: n$1,
    month: n$1,
    day: n$1
};
const DATE_MED = {
    year: n$1,
    month: s$2,
    day: n$1
};
const DATE_MED_WITH_WEEKDAY = {
    year: n$1,
    month: s$2,
    day: n$1,
    weekday: s$2
};
const DATE_FULL = {
    year: n$1,
    month: l$2,
    day: n$1
};
const DATE_HUGE = {
    year: n$1,
    month: l$2,
    day: n$1,
    weekday: l$2
};
const TIME_SIMPLE = {
    hour: n$1,
    minute: n$1
};
const TIME_WITH_SECONDS = {
    hour: n$1,
    minute: n$1,
    second: n$1
};
const TIME_WITH_SHORT_OFFSET = {
    hour: n$1,
    minute: n$1,
    second: n$1,
    timeZoneName: s$2
};
const TIME_WITH_LONG_OFFSET = {
    hour: n$1,
    minute: n$1,
    second: n$1,
    timeZoneName: l$2
};
const TIME_24_SIMPLE = {
    hour: n$1,
    minute: n$1,
    hourCycle: "h23"
};
const TIME_24_WITH_SECONDS = {
    hour: n$1,
    minute: n$1,
    second: n$1,
    hourCycle: "h23"
};
const TIME_24_WITH_SHORT_OFFSET = {
    hour: n$1,
    minute: n$1,
    second: n$1,
    hourCycle: "h23",
    timeZoneName: s$2
};
const TIME_24_WITH_LONG_OFFSET = {
    hour: n$1,
    minute: n$1,
    second: n$1,
    hourCycle: "h23",
    timeZoneName: l$2
};
const DATETIME_SHORT = {
    year: n$1,
    month: n$1,
    day: n$1,
    hour: n$1,
    minute: n$1
};
const DATETIME_SHORT_WITH_SECONDS = {
    year: n$1,
    month: n$1,
    day: n$1,
    hour: n$1,
    minute: n$1,
    second: n$1
};
const DATETIME_MED = {
    year: n$1,
    month: s$2,
    day: n$1,
    hour: n$1,
    minute: n$1
};
const DATETIME_MED_WITH_SECONDS = {
    year: n$1,
    month: s$2,
    day: n$1,
    hour: n$1,
    minute: n$1,
    second: n$1
};
const DATETIME_MED_WITH_WEEKDAY = {
    year: n$1,
    month: s$2,
    day: n$1,
    weekday: s$2,
    hour: n$1,
    minute: n$1
};
const DATETIME_FULL = {
    year: n$1,
    month: l$2,
    day: n$1,
    hour: n$1,
    minute: n$1,
    timeZoneName: s$2
};
const DATETIME_FULL_WITH_SECONDS = {
    year: n$1,
    month: l$2,
    day: n$1,
    hour: n$1,
    minute: n$1,
    second: n$1,
    timeZoneName: s$2
};
const DATETIME_HUGE = {
    year: n$1,
    month: l$2,
    day: n$1,
    weekday: l$2,
    hour: n$1,
    minute: n$1,
    timeZoneName: l$2
};
const DATETIME_HUGE_WITH_SECONDS = {
    year: n$1,
    month: l$2,
    day: n$1,
    weekday: l$2,
    hour: n$1,
    minute: n$1,
    second: n$1,
    timeZoneName: l$2
};
/**
 * @interface
 */ class Zone {
    /**
   * The type of zone
   * @abstract
   * @type {string}
   */ get type() {
        throw new ZoneIsAbstractError();
    }
    /**
   * The name of this zone.
   * @abstract
   * @type {string}
   */ get name() {
        throw new ZoneIsAbstractError();
    }
    get ianaName() {
        return this.name;
    }
    /**
   * Returns whether the offset is known to be fixed for the whole year.
   * @abstract
   * @type {boolean}
   */ get isUniversal() {
        throw new ZoneIsAbstractError();
    }
    /**
   * Returns the offset's common name (such as EST) at the specified timestamp
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the name
   * @param {Object} opts - Options to affect the format
   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
   * @param {string} opts.locale - What locale to return the offset name in.
   * @return {string}
   */ offsetName(ts1, opts1) {
        throw new ZoneIsAbstractError();
    }
    /**
   * Returns the offset's value as a string
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the offset
   * @param {string} format - What style of offset to return.
   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
   * @return {string}
   */ formatOffset(ts1, format1) {
        throw new ZoneIsAbstractError();
    }
    /**
   * Return the offset in minutes for this zone at the specified timestamp.
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to compute the offset
   * @return {number}
   */ offset(ts1) {
        throw new ZoneIsAbstractError();
    }
    /**
   * Return whether this Zone is equal to another zone
   * @abstract
   * @param {Zone} otherZone - the zone to compare
   * @return {boolean}
   */ equals(otherZone1) {
        throw new ZoneIsAbstractError();
    }
    /**
   * Return whether this Zone is valid.
   * @abstract
   * @type {boolean}
   */ get isValid() {
        throw new ZoneIsAbstractError();
    }
}
let singleton$1 = null;
/**
 * Represents the local zone for this JavaScript environment.
 * @implements {Zone}
 */ class SystemZone extends Zone {
    /**
   * Get a singleton instance of the local zone
   * @return {SystemZone}
   */ static get instance() {
        if (singleton$1 === null) {
            singleton$1 = new SystemZone();
        }
        return singleton$1;
    }
    /** @override **/ get type() {
        return "system";
    }
    /** @override **/ get name() {
        return new Intl.DateTimeFormat().resolvedOptions().timeZone;
    }
    /** @override **/ get isUniversal() {
        return false;
    }
    /** @override **/ offsetName(ts1, { format: format1, locale: locale1 }) {
        return parseZoneInfo(ts1, format1, locale1);
    }
    /** @override **/ formatOffset(ts1, format1) {
        return formatOffset(this.offset(ts1), format1);
    }
    /** @override **/ offset(ts1) {
        return -new Date(ts1).getTimezoneOffset();
    }
    /** @override **/ equals(otherZone1) {
        return otherZone1.type === "system";
    }
    /** @override **/ get isValid() {
        return true;
    }
}
let dtfCache = {};
function makeDTF(zone1) {
    if (!dtfCache[zone1]) {
        dtfCache[zone1] = new Intl.DateTimeFormat("en-US", {
            hour12: false,
            timeZone: zone1,
            year: "numeric",
            month: "2-digit",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit",
            second: "2-digit",
            era: "short"
        });
    }
    return dtfCache[zone1];
}
const typeToPos = {
    year: 0,
    month: 1,
    day: 2,
    era: 3,
    hour: 4,
    minute: 5,
    second: 6
};
function hackyOffset(dtf1, date1) {
    const formatted1 = dtf1.format(date1).replace(/\u200E/g, ""), parsed1 = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted1), [, fMonth1, fDay1, fYear1, fadOrBc1, fHour1, fMinute1, fSecond1] = parsed1;
    return [
        fYear1,
        fMonth1,
        fDay1,
        fadOrBc1,
        fHour1,
        fMinute1,
        fSecond1
    ];
}
function partsOffset(dtf1, date1) {
    const formatted1 = dtf1.formatToParts(date1);
    const filled1 = [];
    for(let i1 = 0; i1 < formatted1.length; i1++){
        const { type: type1, value: value1 } = formatted1[i1];
        const pos1 = typeToPos[type1];
        if (type1 === "era") {
            filled1[pos1] = value1;
        } else if (!isUndefined(pos1)) {
            filled1[pos1] = parseInt(value1, 10);
        }
    }
    return filled1;
}
let ianaZoneCache = {};
/**
 * A zone identified by an IANA identifier, like America/New_York
 * @implements {Zone}
 */ class IANAZone extends Zone {
    /**
   * @param {string} name - Zone name
   * @return {IANAZone}
   */ static create(name1) {
        if (!ianaZoneCache[name1]) {
            ianaZoneCache[name1] = new IANAZone(name1);
        }
        return ianaZoneCache[name1];
    }
    /**
   * Reset local caches. Should only be necessary in testing scenarios.
   * @return {void}
   */ static resetCache() {
        ianaZoneCache = {};
        dtfCache = {};
    }
    /**
   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
   * @param {string} s - The string to check validity on
   * @example IANAZone.isValidSpecifier("America/New_York") //=> true
   * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
   * @deprecated This method returns false for some valid IANA names. Use isValidZone instead.
   * @return {boolean}
   */ static isValidSpecifier(s1) {
        return this.isValidZone(s1);
    }
    /**
   * Returns whether the provided string identifies a real zone
   * @param {string} zone - The string to check
   * @example IANAZone.isValidZone("America/New_York") //=> true
   * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
   * @example IANAZone.isValidZone("Sport~~blorp") //=> false
   * @return {boolean}
   */ static isValidZone(zone1) {
        if (!zone1) {
            return false;
        }
        try {
            new Intl.DateTimeFormat("en-US", {
                timeZone: zone1
            }).format();
            return true;
        } catch (e1) {
            return false;
        }
    }
    constructor(name1){
        super();
        /** @private **/ this.zoneName = name1;
        /** @private **/ this.valid = IANAZone.isValidZone(name1);
    }
    /** @override **/ get type() {
        return "iana";
    }
    /** @override **/ get name() {
        return this.zoneName;
    }
    /** @override **/ get isUniversal() {
        return false;
    }
    /** @override **/ offsetName(ts1, { format: format1, locale: locale1 }) {
        return parseZoneInfo(ts1, format1, locale1, this.name);
    }
    /** @override **/ formatOffset(ts1, format1) {
        return formatOffset(this.offset(ts1), format1);
    }
    /** @override **/ offset(ts1) {
        const date1 = new Date(ts1);
        if (isNaN(date1)) return NaN;
        const dtf1 = makeDTF(this.name);
        let [year1, month1, day1, adOrBc1, hour1, minute1, second1] = dtf1.formatToParts ? partsOffset(dtf1, date1) : hackyOffset(dtf1, date1);
        if (adOrBc1 === "BC") {
            year1 = -Math.abs(year1) + 1;
        }
        // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat
        const adjustedHour1 = hour1 === 24 ? 0 : hour1;
        const asUTC1 = objToLocalTS({
            year: year1,
            month: month1,
            day: day1,
            hour: adjustedHour1,
            minute: minute1,
            second: second1,
            millisecond: 0
        });
        let asTS1 = +date1;
        const over1 = asTS1 % 1000;
        asTS1 -= over1 >= 0 ? over1 : 1000 + over1;
        return (asUTC1 - asTS1) / (60 * 1000);
    }
    /** @override **/ equals(otherZone1) {
        return otherZone1.type === "iana" && otherZone1.name === this.name;
    }
    /** @override **/ get isValid() {
        return this.valid;
    }
}
// todo - remap caching
let intlLFCache = {};
function getCachedLF(locString1, opts1 = {}) {
    const key1 = JSON.stringify([
        locString1,
        opts1
    ]);
    let dtf1 = intlLFCache[key1];
    if (!dtf1) {
        dtf1 = new Intl.ListFormat(locString1, opts1);
        intlLFCache[key1] = dtf1;
    }
    return dtf1;
}
let intlDTCache = {};
function getCachedDTF(locString1, opts1 = {}) {
    const key1 = JSON.stringify([
        locString1,
        opts1
    ]);
    let dtf1 = intlDTCache[key1];
    if (!dtf1) {
        dtf1 = new Intl.DateTimeFormat(locString1, opts1);
        intlDTCache[key1] = dtf1;
    }
    return dtf1;
}
let intlNumCache = {};
function getCachedINF(locString1, opts1 = {}) {
    const key1 = JSON.stringify([
        locString1,
        opts1
    ]);
    let inf1 = intlNumCache[key1];
    if (!inf1) {
        inf1 = new Intl.NumberFormat(locString1, opts1);
        intlNumCache[key1] = inf1;
    }
    return inf1;
}
let intlRelCache = {};
function getCachedRTF(locString1, opts1 = {}) {
    const { base: base1, ...cacheKeyOpts1 } = opts1; // exclude `base` from the options
    const key1 = JSON.stringify([
        locString1,
        cacheKeyOpts1
    ]);
    let inf1 = intlRelCache[key1];
    if (!inf1) {
        inf1 = new Intl.RelativeTimeFormat(locString1, opts1);
        intlRelCache[key1] = inf1;
    }
    return inf1;
}
let sysLocaleCache = null;
function systemLocale() {
    if (sysLocaleCache) {
        return sysLocaleCache;
    } else {
        sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
        return sysLocaleCache;
    }
}
function parseLocaleString(localeStr1) {
    // I really want to avoid writing a BCP 47 parser
    // see, e.g. https://github.com/wooorm/bcp-47
    // Instead, we'll do this:
    // a) if the string has no -u extensions, just leave it alone
    // b) if it does, use Intl to resolve everything
    // c) if Intl fails, try again without the -u
    // private subtags and unicode subtags have ordering requirements,
    // and we're not properly parsing this, so just strip out the
    // private ones if they exist.
    const xIndex1 = localeStr1.indexOf("-x-");
    if (xIndex1 !== -1) {
        localeStr1 = localeStr1.substring(0, xIndex1);
    }
    const uIndex1 = localeStr1.indexOf("-u-");
    if (uIndex1 === -1) {
        return [
            localeStr1
        ];
    } else {
        let options1;
        let selectedStr1;
        try {
            options1 = getCachedDTF(localeStr1).resolvedOptions();
            selectedStr1 = localeStr1;
        } catch (e1) {
            const smaller1 = localeStr1.substring(0, uIndex1);
            options1 = getCachedDTF(smaller1).resolvedOptions();
            selectedStr1 = smaller1;
        }
        const { numberingSystem: numberingSystem1, calendar: calendar1 } = options1;
        return [
            selectedStr1,
            numberingSystem1,
            calendar1
        ];
    }
}
function intlConfigString(localeStr1, numberingSystem1, outputCalendar1) {
    if (outputCalendar1 || numberingSystem1) {
        if (!localeStr1.includes("-u-")) {
            localeStr1 += "-u";
        }
        if (outputCalendar1) {
            localeStr1 += `-ca-${outputCalendar1}`;
        }
        if (numberingSystem1) {
            localeStr1 += `-nu-${numberingSystem1}`;
        }
        return localeStr1;
    } else {
        return localeStr1;
    }
}
function mapMonths(f3) {
    const ms1 = [];
    for(let i1 = 1; i1 <= 12; i1++){
        const dt1 = DateTime.utc(2016, i1, 1);
        ms1.push(f3(dt1));
    }
    return ms1;
}
function mapWeekdays(f3) {
    const ms1 = [];
    for(let i1 = 1; i1 <= 7; i1++){
        const dt1 = DateTime.utc(2016, 11, 13 + i1);
        ms1.push(f3(dt1));
    }
    return ms1;
}
function listStuff(loc1, length1, defaultOK1, englishFn1, intlFn1) {
    const mode1 = loc1.listingMode(defaultOK1);
    if (mode1 === "error") {
        return null;
    } else if (mode1 === "en") {
        return englishFn1(length1);
    } else {
        return intlFn1(length1);
    }
}
function supportsFastNumbers(loc1) {
    if (loc1.numberingSystem && loc1.numberingSystem !== "latn") {
        return false;
    } else {
        return loc1.numberingSystem === "latn" || !loc1.locale || loc1.locale.startsWith("en") || new Intl.DateTimeFormat(loc1.intl).resolvedOptions().numberingSystem === "latn";
    }
}
/**
 * @private
 */ class PolyNumberFormatter {
    constructor(intl1, forceSimple1, opts1){
        this.padTo = opts1.padTo || 0;
        this.floor = opts1.floor || false;
        const { padTo: padTo1, floor: floor1, ...otherOpts1 } = opts1;
        if (!forceSimple1 || Object.keys(otherOpts1).length > 0) {
            const intlOpts1 = {
                useGrouping: false,
                ...opts1
            };
            if (opts1.padTo > 0) intlOpts1.minimumIntegerDigits = opts1.padTo;
            this.inf = getCachedINF(intl1, intlOpts1);
        }
    }
    format(i1) {
        if (this.inf) {
            const fixed1 = this.floor ? Math.floor(i1) : i1;
            return this.inf.format(fixed1);
        } else {
            // to match the browser's numberformatter defaults
            const fixed1 = this.floor ? Math.floor(i1) : roundTo(i1, 3);
            return padStart(fixed1, this.padTo);
        }
    }
}
/**
 * @private
 */ class PolyDateFormatter {
    constructor(dt1, intl1, opts1){
        this.opts = opts1;
        let z1 = undefined;
        if (dt1.zone.isUniversal) {
            // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.
            // That is why fixed-offset TZ is set to that unless it is:
            // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.
            // 2. Unsupported by the browser:
            //    - some do not support Etc/
            //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata
            const gmtOffset1 = -1 * (dt1.offset / 60);
            const offsetZ1 = gmtOffset1 >= 0 ? `Etc/GMT+${gmtOffset1}` : `Etc/GMT${gmtOffset1}`;
            if (dt1.offset !== 0 && IANAZone.create(offsetZ1).valid) {
                z1 = offsetZ1;
                this.dt = dt1;
            } else {
                // Not all fixed-offset zones like Etc/+4:30 are present in tzdata.
                // So we have to make do. Two cases:
                // 1. The format options tell us to show the zone. We can't do that, so the best
                // we can do is format the date in UTC.
                // 2. The format options don't tell us to show the zone. Then we can adjust them
                // the time and tell the formatter to show it to us in UTC, so that the time is right
                // and the bad zone doesn't show up.
                z1 = "UTC";
                if (opts1.timeZoneName) {
                    this.dt = dt1;
                } else {
                    this.dt = dt1.offset === 0 ? dt1 : DateTime.fromMillis(dt1.ts + dt1.offset * 60 * 1000);
                }
            }
        } else if (dt1.zone.type === "system") {
            this.dt = dt1;
        } else {
            this.dt = dt1;
            z1 = dt1.zone.name;
        }
        const intlOpts1 = {
            ...this.opts
        };
        intlOpts1.timeZone = intlOpts1.timeZone || z1;
        this.dtf = getCachedDTF(intl1, intlOpts1);
    }
    format() {
        return this.dtf.format(this.dt.toJSDate());
    }
    formatToParts() {
        return this.dtf.formatToParts(this.dt.toJSDate());
    }
    resolvedOptions() {
        return this.dtf.resolvedOptions();
    }
}
/**
 * @private
 */ class PolyRelFormatter {
    constructor(intl1, isEnglish1, opts1){
        this.opts = {
            style: "long",
            ...opts1
        };
        if (!isEnglish1 && hasRelative()) {
            this.rtf = getCachedRTF(intl1, opts1);
        }
    }
    format(count1, unit1) {
        if (this.rtf) {
            return this.rtf.format(count1, unit1);
        } else {
            return formatRelativeTime(unit1, count1, this.opts.numeric, this.opts.style !== "long");
        }
    }
    formatToParts(count1, unit1) {
        if (this.rtf) {
            return this.rtf.formatToParts(count1, unit1);
        } else {
            return [];
        }
    }
}
/**
 * @private
 */ class Locale {
    static fromOpts(opts1) {
        return Locale.create(opts1.locale, opts1.numberingSystem, opts1.outputCalendar, opts1.defaultToEN);
    }
    static create(locale1, numberingSystem1, outputCalendar1, defaultToEN1 = false) {
        const specifiedLocale1 = locale1 || Settings.defaultLocale;
        // the system locale is useful for human readable strings but annoying for parsing/formatting known formats
        const localeR1 = specifiedLocale1 || (defaultToEN1 ? "en-US" : systemLocale());
        const numberingSystemR1 = numberingSystem1 || Settings.defaultNumberingSystem;
        const outputCalendarR1 = outputCalendar1 || Settings.defaultOutputCalendar;
        return new Locale(localeR1, numberingSystemR1, outputCalendarR1, specifiedLocale1);
    }
    static resetCache() {
        sysLocaleCache = null;
        intlDTCache = {};
        intlNumCache = {};
        intlRelCache = {};
    }
    static fromObject({ locale: locale1, numberingSystem: numberingSystem1, outputCalendar: outputCalendar1 } = {}) {
        return Locale.create(locale1, numberingSystem1, outputCalendar1);
    }
    constructor(locale1, numbering1, outputCalendar1, specifiedLocale1){
        const [parsedLocale1, parsedNumberingSystem1, parsedOutputCalendar1] = parseLocaleString(locale1);
        this.locale = parsedLocale1;
        this.numberingSystem = numbering1 || parsedNumberingSystem1 || null;
        this.outputCalendar = outputCalendar1 || parsedOutputCalendar1 || null;
        this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
        this.weekdaysCache = {
            format: {},
            standalone: {}
        };
        this.monthsCache = {
            format: {},
            standalone: {}
        };
        this.meridiemCache = null;
        this.eraCache = {};
        this.specifiedLocale = specifiedLocale1;
        this.fastNumbersCached = null;
    }
    get fastNumbers() {
        if (this.fastNumbersCached == null) {
            this.fastNumbersCached = supportsFastNumbers(this);
        }
        return this.fastNumbersCached;
    }
    listingMode() {
        const isActuallyEn1 = this.isEnglish();
        const hasNoWeirdness1 = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");
        return isActuallyEn1 && hasNoWeirdness1 ? "en" : "intl";
    }
    clone(alts1) {
        if (!alts1 || Object.getOwnPropertyNames(alts1).length === 0) {
            return this;
        } else {
            return Locale.create(alts1.locale || this.specifiedLocale, alts1.numberingSystem || this.numberingSystem, alts1.outputCalendar || this.outputCalendar, alts1.defaultToEN || false);
        }
    }
    redefaultToEN(alts1 = {}) {
        return this.clone({
            ...alts1,
            defaultToEN: true
        });
    }
    redefaultToSystem(alts1 = {}) {
        return this.clone({
            ...alts1,
            defaultToEN: false
        });
    }
    months(length1, format1 = false, defaultOK1 = true) {
        return listStuff(this, length1, defaultOK1, months, ()=>{
            const intl1 = format1 ? {
                month: length1,
                day: "numeric"
            } : {
                month: length1
            }, formatStr1 = format1 ? "format" : "standalone";
            if (!this.monthsCache[formatStr1][length1]) {
                this.monthsCache[formatStr1][length1] = mapMonths((dt1)=>this.extract(dt1, intl1, "month"));
            }
            return this.monthsCache[formatStr1][length1];
        });
    }
    weekdays(length1, format1 = false, defaultOK1 = true) {
        return listStuff(this, length1, defaultOK1, weekdays, ()=>{
            const intl1 = format1 ? {
                weekday: length1,
                year: "numeric",
                month: "long",
                day: "numeric"
            } : {
                weekday: length1
            }, formatStr1 = format1 ? "format" : "standalone";
            if (!this.weekdaysCache[formatStr1][length1]) {
                this.weekdaysCache[formatStr1][length1] = mapWeekdays((dt1)=>this.extract(dt1, intl1, "weekday"));
            }
            return this.weekdaysCache[formatStr1][length1];
        });
    }
    meridiems(defaultOK1 = true) {
        return listStuff(this, undefined, defaultOK1, ()=>meridiems, ()=>{
            // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
            // for AM and PM. This is probably wrong, but it's makes parsing way easier.
            if (!this.meridiemCache) {
                const intl1 = {
                    hour: "numeric",
                    hourCycle: "h12"
                };
                this.meridiemCache = [
                    DateTime.utc(2016, 11, 13, 9),
                    DateTime.utc(2016, 11, 13, 19)
                ].map((dt1)=>this.extract(dt1, intl1, "dayperiod"));
            }
            return this.meridiemCache;
        });
    }
    eras(length1, defaultOK1 = true) {
        return listStuff(this, length1, defaultOK1, eras, ()=>{
            const intl1 = {
                era: length1
            };
            // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
            // to definitely enumerate them.
            if (!this.eraCache[length1]) {
                this.eraCache[length1] = [
                    DateTime.utc(-40, 1, 1),
                    DateTime.utc(2017, 1, 1)
                ].map((dt1)=>this.extract(dt1, intl1, "era"));
            }
            return this.eraCache[length1];
        });
    }
    extract(dt1, intlOpts1, field1) {
        const df1 = this.dtFormatter(dt1, intlOpts1), results1 = df1.formatToParts(), matching1 = results1.find((m1)=>m1.type.toLowerCase() === field1);
        return matching1 ? matching1.value : null;
    }
    numberFormatter(opts1 = {}) {
        // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
        // (in contrast, the rest of the condition is used heavily)
        return new PolyNumberFormatter(this.intl, opts1.forceSimple || this.fastNumbers, opts1);
    }
    dtFormatter(dt1, intlOpts1 = {}) {
        return new PolyDateFormatter(dt1, this.intl, intlOpts1);
    }
    relFormatter(opts1 = {}) {
        return new PolyRelFormatter(this.intl, this.isEnglish(), opts1);
    }
    listFormatter(opts1 = {}) {
        return getCachedLF(this.intl, opts1);
    }
    isEnglish() {
        return this.locale === "en" || this.locale.toLowerCase() === "en-us" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
    }
    equals(other1) {
        return this.locale === other1.locale && this.numberingSystem === other1.numberingSystem && this.outputCalendar === other1.outputCalendar;
    }
}
let singleton = null;
/**
 * A zone with a fixed offset (meaning no DST)
 * @implements {Zone}
 */ class FixedOffsetZone extends Zone {
    /**
   * Get a singleton instance of UTC
   * @return {FixedOffsetZone}
   */ static get utcInstance() {
        if (singleton === null) {
            singleton = new FixedOffsetZone(0);
        }
        return singleton;
    }
    /**
   * Get an instance with a specified offset
   * @param {number} offset - The offset in minutes
   * @return {FixedOffsetZone}
   */ static instance(offset1) {
        return offset1 === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset1);
    }
    /**
   * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
   * @param {string} s - The offset string to parse
   * @example FixedOffsetZone.parseSpecifier("UTC+6")
   * @example FixedOffsetZone.parseSpecifier("UTC+06")
   * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
   * @return {FixedOffsetZone}
   */ static parseSpecifier(s1) {
        if (s1) {
            const r4 = s1.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
            if (r4) {
                return new FixedOffsetZone(signedOffset(r4[1], r4[2]));
            }
        }
        return null;
    }
    constructor(offset1){
        super();
        /** @private **/ this.fixed = offset1;
    }
    /** @override **/ get type() {
        return "fixed";
    }
    /** @override **/ get name() {
        return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
    }
    get ianaName() {
        if (this.fixed === 0) {
            return "Etc/UTC";
        } else {
            return `Etc/GMT${formatOffset(-this.fixed, "narrow")}`;
        }
    }
    /** @override **/ offsetName() {
        return this.name;
    }
    /** @override **/ formatOffset(ts1, format1) {
        return formatOffset(this.fixed, format1);
    }
    /** @override **/ get isUniversal() {
        return true;
    }
    /** @override **/ offset() {
        return this.fixed;
    }
    /** @override **/ equals(otherZone1) {
        return otherZone1.type === "fixed" && otherZone1.fixed === this.fixed;
    }
    /** @override **/ get isValid() {
        return true;
    }
}
/**
 * A zone that failed to parse. You should never need to instantiate this.
 * @implements {Zone}
 */ class InvalidZone extends Zone {
    constructor(zoneName1){
        super();
        /**  @private */ this.zoneName = zoneName1;
    }
    /** @override **/ get type() {
        return "invalid";
    }
    /** @override **/ get name() {
        return this.zoneName;
    }
    /** @override **/ get isUniversal() {
        return false;
    }
    /** @override **/ offsetName() {
        return null;
    }
    /** @override **/ formatOffset() {
        return "";
    }
    /** @override **/ offset() {
        return NaN;
    }
    /** @override **/ equals() {
        return false;
    }
    /** @override **/ get isValid() {
        return false;
    }
}
/**
 * @private
 */ function normalizeZone(input1, defaultZone1) {
    if (isUndefined(input1) || input1 === null) {
        return defaultZone1;
    } else if (input1 instanceof Zone) {
        return input1;
    } else if (isString(input1)) {
        const lowered1 = input1.toLowerCase();
        if (lowered1 === "default") return defaultZone1;
        else if (lowered1 === "local" || lowered1 === "system") return SystemZone.instance;
        else if (lowered1 === "utc" || lowered1 === "gmt") return FixedOffsetZone.utcInstance;
        else return FixedOffsetZone.parseSpecifier(lowered1) || IANAZone.create(input1);
    } else if (isNumber(input1)) {
        return FixedOffsetZone.instance(input1);
    } else if (typeof input1 === "object" && input1.offset && typeof input1.offset === "number") {
        // This is dumb, but the instanceof check above doesn't seem to really work
        // so we're duck checking it
        return input1;
    } else {
        return new InvalidZone(input1);
    }
}
let now = ()=>Date.now(), defaultZone = "system", defaultLocale = null, defaultNumberingSystem = null, defaultOutputCalendar = null, twoDigitCutoffYear = 60, throwOnInvalid;
/**
 * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
 */ class Settings {
    /**
   * Get the callback for returning the current timestamp.
   * @type {function}
   */ static get now() {
        return now;
    }
    /**
   * Set the callback for returning the current timestamp.
   * The function should return a number, which will be interpreted as an Epoch millisecond count
   * @type {function}
   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
   */ static set now(n3) {
        now = n3;
    }
    /**
   * Set the default time zone to create DateTimes in. Does not affect existing instances.
   * Use the value "system" to reset this value to the system's time zone.
   * @type {string}
   */ static set defaultZone(zone1) {
        defaultZone = zone1;
    }
    /**
   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
   * The default value is the system's time zone (the one set on the machine that runs this code).
   * @type {Zone}
   */ static get defaultZone() {
        return normalizeZone(defaultZone, SystemZone.instance);
    }
    /**
   * Get the default locale to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */ static get defaultLocale() {
        return defaultLocale;
    }
    /**
   * Set the default locale to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */ static set defaultLocale(locale1) {
        defaultLocale = locale1;
    }
    /**
   * Get the default numbering system to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */ static get defaultNumberingSystem() {
        return defaultNumberingSystem;
    }
    /**
   * Set the default numbering system to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */ static set defaultNumberingSystem(numberingSystem1) {
        defaultNumberingSystem = numberingSystem1;
    }
    /**
   * Get the default output calendar to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */ static get defaultOutputCalendar() {
        return defaultOutputCalendar;
    }
    /**
   * Set the default output calendar to create DateTimes with. Does not affect existing instances.
   * @type {string}
   */ static set defaultOutputCalendar(outputCalendar1) {
        defaultOutputCalendar = outputCalendar1;
    }
    /**
   * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
   * @type {number}
   */ static get twoDigitCutoffYear() {
        return twoDigitCutoffYear;
    }
    /**
   * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
   * @type {number}
   * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpretted as current century
   * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050
   * @example Settings.twoDigitCutoffYear = 1950 // interpretted as 50
   * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpretted as 50
   */ static set twoDigitCutoffYear(cutoffYear1) {
        twoDigitCutoffYear = cutoffYear1 % 100;
    }
    /**
   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
   * @type {boolean}
   */ static get throwOnInvalid() {
        return throwOnInvalid;
    }
    /**
   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
   * @type {boolean}
   */ static set throwOnInvalid(t5) {
        throwOnInvalid = t5;
    }
    /**
   * Reset Luxon's global caches. Should only be necessary in testing scenarios.
   * @return {void}
   */ static resetCaches() {
        Locale.resetCache();
        IANAZone.resetCache();
    }
}
/*
  This is just a junk drawer, containing anything used across multiple classes.
  Because Luxon is small(ish), this should stay small and we won't worry about splitting
  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.
*/ /**
 * @private
 */ // TYPES
function isUndefined(o4) {
    return typeof o4 === "undefined";
}
function isNumber(o4) {
    return typeof o4 === "number";
}
function isInteger(o4) {
    return typeof o4 === "number" && o4 % 1 === 0;
}
function isString(o4) {
    return typeof o4 === "string";
}
function isDate(o4) {
    return Object.prototype.toString.call(o4) === "[object Date]";
}
// CAPABILITIES
function hasRelative() {
    try {
        return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
    } catch (e1) {
        return false;
    }
}
// OBJECTS AND ARRAYS
function maybeArray(thing1) {
    return Array.isArray(thing1) ? thing1 : [
        thing1
    ];
}
function bestBy(arr1, by1, compare1) {
    if (arr1.length === 0) {
        return undefined;
    }
    return arr1.reduce((best1, next1)=>{
        const pair1 = [
            by1(next1),
            next1
        ];
        if (!best1) {
            return pair1;
        } else if (compare1(best1[0], pair1[0]) === best1[0]) {
            return best1;
        } else {
            return pair1;
        }
    }, null)[1];
}
function pick(obj1, keys1) {
    return keys1.reduce((a1, k3)=>{
        a1[k3] = obj1[k3];
        return a1;
    }, {});
}
function hasOwnProperty(obj1, prop1) {
    return Object.prototype.hasOwnProperty.call(obj1, prop1);
}
// NUMBERS AND STRINGS
function integerBetween(thing1, bottom1, top1) {
    return isInteger(thing1) && thing1 >= bottom1 && thing1 <= top1;
}
// x % n but takes the sign of n instead of x
function floorMod(x1, n3) {
    return x1 - n3 * Math.floor(x1 / n3);
}
function padStart(input1, n3 = 2) {
    const isNeg1 = input1 < 0;
    let padded1;
    if (isNeg1) {
        padded1 = "-" + ("" + -input1).padStart(n3, "0");
    } else {
        padded1 = ("" + input1).padStart(n3, "0");
    }
    return padded1;
}
function parseInteger(string1) {
    if (isUndefined(string1) || string1 === null || string1 === "") {
        return undefined;
    } else {
        return parseInt(string1, 10);
    }
}
function parseFloating(string1) {
    if (isUndefined(string1) || string1 === null || string1 === "") {
        return undefined;
    } else {
        return parseFloat(string1);
    }
}
function parseMillis(fraction1) {
    // Return undefined (instead of 0) in these cases, where fraction is not set
    if (isUndefined(fraction1) || fraction1 === null || fraction1 === "") {
        return undefined;
    } else {
        const f3 = parseFloat("0." + fraction1) * 1000;
        return Math.floor(f3);
    }
}
function roundTo(number1, digits1, towardZero1 = false) {
    const factor1 = 10 ** digits1, rounder1 = towardZero1 ? Math.trunc : Math.round;
    return rounder1(number1 * factor1) / factor1;
}
// DATE BASICS
function isLeapYear(year1) {
    return year1 % 4 === 0 && (year1 % 100 !== 0 || year1 % 400 === 0);
}
function daysInYear(year1) {
    return isLeapYear(year1) ? 366 : 365;
}
function daysInMonth(year1, month1) {
    const modMonth1 = floorMod(month1 - 1, 12) + 1, modYear1 = year1 + (month1 - modMonth1) / 12;
    if (modMonth1 === 2) {
        return isLeapYear(modYear1) ? 29 : 28;
    } else {
        return [
            31,
            null,
            31,
            30,
            31,
            30,
            31,
            31,
            30,
            31,
            30,
            31
        ][modMonth1 - 1];
    }
}
// covert a calendar object to a local timestamp (epoch, but with the offset baked in)
function objToLocalTS(obj1) {
    let d1 = Date.UTC(obj1.year, obj1.month - 1, obj1.day, obj1.hour, obj1.minute, obj1.second, obj1.millisecond);
    // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that
    if (obj1.year < 100 && obj1.year >= 0) {
        d1 = new Date(d1);
        d1.setUTCFullYear(d1.getUTCFullYear() - 1900);
    }
    return +d1;
}
function weeksInWeekYear(weekYear1) {
    const p11 = (weekYear1 + Math.floor(weekYear1 / 4) - Math.floor(weekYear1 / 100) + Math.floor(weekYear1 / 400)) % 7, last1 = weekYear1 - 1, p21 = (last1 + Math.floor(last1 / 4) - Math.floor(last1 / 100) + Math.floor(last1 / 400)) % 7;
    return p11 === 4 || p21 === 3 ? 53 : 52;
}
function untruncateYear(year1) {
    if (year1 > 99) {
        return year1;
    } else return year1 > Settings.twoDigitCutoffYear ? 1900 + year1 : 2000 + year1;
}
// PARSING
function parseZoneInfo(ts1, offsetFormat1, locale1, timeZone1 = null) {
    const date1 = new Date(ts1), intlOpts1 = {
        hourCycle: "h23",
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit"
    };
    if (timeZone1) {
        intlOpts1.timeZone = timeZone1;
    }
    const modified1 = {
        timeZoneName: offsetFormat1,
        ...intlOpts1
    };
    const parsed1 = new Intl.DateTimeFormat(locale1, modified1).formatToParts(date1).find((m1)=>m1.type.toLowerCase() === "timezonename");
    return parsed1 ? parsed1.value : null;
}
// signedOffset('-5', '30') -> -330
function signedOffset(offHourStr1, offMinuteStr1) {
    let offHour1 = parseInt(offHourStr1, 10);
    // don't || this because we want to preserve -0
    if (Number.isNaN(offHour1)) {
        offHour1 = 0;
    }
    const offMin1 = parseInt(offMinuteStr1, 10) || 0, offMinSigned1 = offHour1 < 0 || Object.is(offHour1, -0) ? -offMin1 : offMin1;
    return offHour1 * 60 + offMinSigned1;
}
// COERCION
function asNumber(value1) {
    const numericValue1 = Number(value1);
    if (typeof value1 === "boolean" || value1 === "" || Number.isNaN(numericValue1)) throw new InvalidArgumentError(`Invalid unit value ${value1}`);
    return numericValue1;
}
function normalizeObject(obj1, normalizer1) {
    const normalized1 = {};
    for(const u1 in obj1){
        if (hasOwnProperty(obj1, u1)) {
            const v4 = obj1[u1];
            if (v4 === undefined || v4 === null) continue;
            normalized1[normalizer1(u1)] = asNumber(v4);
        }
    }
    return normalized1;
}
function formatOffset(offset1, format1) {
    const hours1 = Math.trunc(Math.abs(offset1 / 60)), minutes1 = Math.trunc(Math.abs(offset1 % 60)), sign1 = offset1 >= 0 ? "+" : "-";
    switch(format1){
        case "short":
            return `${sign1}${padStart(hours1, 2)}:${padStart(minutes1, 2)}`;
        case "narrow":
            return `${sign1}${hours1}${minutes1 > 0 ? `:${minutes1}` : ""}`;
        case "techie":
            return `${sign1}${padStart(hours1, 2)}${padStart(minutes1, 2)}`;
        default:
            throw new RangeError(`Value format ${format1} is out of range for property format`);
    }
}
function timeObject(obj1) {
    return pick(obj1, [
        "hour",
        "minute",
        "second",
        "millisecond"
    ]);
}
/**
 * @private
 */ const monthsLong = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
];
const monthsShort = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
const monthsNarrow = [
    "J",
    "F",
    "M",
    "A",
    "M",
    "J",
    "J",
    "A",
    "S",
    "O",
    "N",
    "D"
];
function months(length1) {
    switch(length1){
        case "narrow":
            return [
                ...monthsNarrow
            ];
        case "short":
            return [
                ...monthsShort
            ];
        case "long":
            return [
                ...monthsLong
            ];
        case "numeric":
            return [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12"
            ];
        case "2-digit":
            return [
                "01",
                "02",
                "03",
                "04",
                "05",
                "06",
                "07",
                "08",
                "09",
                "10",
                "11",
                "12"
            ];
        default:
            return null;
    }
}
const weekdaysLong = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday"
];
const weekdaysShort = [
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat",
    "Sun"
];
const weekdaysNarrow = [
    "M",
    "T",
    "W",
    "T",
    "F",
    "S",
    "S"
];
function weekdays(length1) {
    switch(length1){
        case "narrow":
            return [
                ...weekdaysNarrow
            ];
        case "short":
            return [
                ...weekdaysShort
            ];
        case "long":
            return [
                ...weekdaysLong
            ];
        case "numeric":
            return [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7"
            ];
        default:
            return null;
    }
}
const meridiems = [
    "AM",
    "PM"
];
const erasLong = [
    "Before Christ",
    "Anno Domini"
];
const erasShort = [
    "BC",
    "AD"
];
const erasNarrow = [
    "B",
    "A"
];
function eras(length1) {
    switch(length1){
        case "narrow":
            return [
                ...erasNarrow
            ];
        case "short":
            return [
                ...erasShort
            ];
        case "long":
            return [
                ...erasLong
            ];
        default:
            return null;
    }
}
function meridiemForDateTime(dt1) {
    return meridiems[dt1.hour < 12 ? 0 : 1];
}
function weekdayForDateTime(dt1, length1) {
    return weekdays(length1)[dt1.weekday - 1];
}
function monthForDateTime(dt1, length1) {
    return months(length1)[dt1.month - 1];
}
function eraForDateTime(dt1, length1) {
    return eras(length1)[dt1.year < 0 ? 0 : 1];
}
function formatRelativeTime(unit1, count1, numeric1 = "always", narrow1 = false) {
    const units1 = {
        years: [
            "year",
            "yr."
        ],
        quarters: [
            "quarter",
            "qtr."
        ],
        months: [
            "month",
            "mo."
        ],
        weeks: [
            "week",
            "wk."
        ],
        days: [
            "day",
            "day",
            "days"
        ],
        hours: [
            "hour",
            "hr."
        ],
        minutes: [
            "minute",
            "min."
        ],
        seconds: [
            "second",
            "sec."
        ]
    };
    const lastable1 = [
        "hours",
        "minutes",
        "seconds"
    ].indexOf(unit1) === -1;
    if (numeric1 === "auto" && lastable1) {
        const isDay1 = unit1 === "days";
        switch(count1){
            case 1:
                return isDay1 ? "tomorrow" : `next ${units1[unit1][0]}`;
            case -1:
                return isDay1 ? "yesterday" : `last ${units1[unit1][0]}`;
            case 0:
                return isDay1 ? "today" : `this ${units1[unit1][0]}`;
        }
    }
    const isInPast1 = Object.is(count1, -0) || count1 < 0, fmtValue1 = Math.abs(count1), singular1 = fmtValue1 === 1, lilUnits1 = units1[unit1], fmtUnit1 = narrow1 ? singular1 ? lilUnits1[1] : lilUnits1[2] || lilUnits1[1] : singular1 ? units1[unit1][0] : unit1;
    return isInPast1 ? `${fmtValue1} ${fmtUnit1} ago` : `in ${fmtValue1} ${fmtUnit1}`;
}
function stringifyTokens(splits1, tokenToString1) {
    let s1 = "";
    for (const token1 of splits1){
        if (token1.literal) {
            s1 += token1.val;
        } else {
            s1 += tokenToString1(token1.val);
        }
    }
    return s1;
}
const macroTokenToFormatOpts = {
    D: DATE_SHORT,
    DD: DATE_MED,
    DDD: DATE_FULL,
    DDDD: DATE_HUGE,
    t: TIME_SIMPLE,
    tt: TIME_WITH_SECONDS,
    ttt: TIME_WITH_SHORT_OFFSET,
    tttt: TIME_WITH_LONG_OFFSET,
    T: TIME_24_SIMPLE,
    TT: TIME_24_WITH_SECONDS,
    TTT: TIME_24_WITH_SHORT_OFFSET,
    TTTT: TIME_24_WITH_LONG_OFFSET,
    f: DATETIME_SHORT,
    ff: DATETIME_MED,
    fff: DATETIME_FULL,
    ffff: DATETIME_HUGE,
    F: DATETIME_SHORT_WITH_SECONDS,
    FF: DATETIME_MED_WITH_SECONDS,
    FFF: DATETIME_FULL_WITH_SECONDS,
    FFFF: DATETIME_HUGE_WITH_SECONDS
};
/**
 * @private
 */ class Formatter {
    static create(locale1, opts1 = {}) {
        return new Formatter(locale1, opts1);
    }
    static parseFormat(fmt1) {
        let current1 = null, currentFull1 = "", bracketed1 = false;
        const splits1 = [];
        for(let i1 = 0; i1 < fmt1.length; i1++){
            const c1 = fmt1.charAt(i1);
            if (c1 === "'") {
                if (currentFull1.length > 0) {
                    splits1.push({
                        literal: bracketed1,
                        val: currentFull1
                    });
                }
                current1 = null;
                currentFull1 = "";
                bracketed1 = !bracketed1;
            } else if (bracketed1) {
                currentFull1 += c1;
            } else if (c1 === current1) {
                currentFull1 += c1;
            } else {
                if (currentFull1.length > 0) {
                    splits1.push({
                        literal: false,
                        val: currentFull1
                    });
                }
                currentFull1 = c1;
                current1 = c1;
            }
        }
        if (currentFull1.length > 0) {
            splits1.push({
                literal: bracketed1,
                val: currentFull1
            });
        }
        return splits1;
    }
    static macroTokenToFormatOpts(token1) {
        return macroTokenToFormatOpts[token1];
    }
    constructor(locale1, formatOpts1){
        this.opts = formatOpts1;
        this.loc = locale1;
        this.systemLoc = null;
    }
    formatWithSystemDefault(dt1, opts1) {
        if (this.systemLoc === null) {
            this.systemLoc = this.loc.redefaultToSystem();
        }
        const df1 = this.systemLoc.dtFormatter(dt1, {
            ...this.opts,
            ...opts1
        });
        return df1.format();
    }
    formatDateTime(dt1, opts1 = {}) {
        const df1 = this.loc.dtFormatter(dt1, {
            ...this.opts,
            ...opts1
        });
        return df1.format();
    }
    formatDateTimeParts(dt1, opts1 = {}) {
        const df1 = this.loc.dtFormatter(dt1, {
            ...this.opts,
            ...opts1
        });
        return df1.formatToParts();
    }
    formatInterval(interval1, opts1 = {}) {
        const df1 = this.loc.dtFormatter(interval1.start, {
            ...this.opts,
            ...opts1
        });
        return df1.dtf.formatRange(interval1.start.toJSDate(), interval1.end.toJSDate());
    }
    resolvedOptions(dt1, opts1 = {}) {
        const df1 = this.loc.dtFormatter(dt1, {
            ...this.opts,
            ...opts1
        });
        return df1.resolvedOptions();
    }
    num(n3, p3 = 0) {
        // we get some perf out of doing this here, annoyingly
        if (this.opts.forceSimple) {
            return padStart(n3, p3);
        }
        const opts1 = {
            ...this.opts
        };
        if (p3 > 0) {
            opts1.padTo = p3;
        }
        return this.loc.numberFormatter(opts1).format(n3);
    }
    formatDateTimeFromString(dt1, fmt1) {
        const knownEnglish1 = this.loc.listingMode() === "en", useDateTimeFormatter1 = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory", string1 = (opts1, extract1)=>this.loc.extract(dt1, opts1, extract1), formatOffset1 = (opts1)=>{
            if (dt1.isOffsetFixed && dt1.offset === 0 && opts1.allowZ) {
                return "Z";
            }
            return dt1.isValid ? dt1.zone.formatOffset(dt1.ts, opts1.format) : "";
        }, meridiem1 = ()=>knownEnglish1 ? meridiemForDateTime(dt1) : string1({
                hour: "numeric",
                hourCycle: "h12"
            }, "dayperiod"), month1 = (length1, standalone1)=>knownEnglish1 ? monthForDateTime(dt1, length1) : string1(standalone1 ? {
                month: length1
            } : {
                month: length1,
                day: "numeric"
            }, "month"), weekday1 = (length1, standalone1)=>knownEnglish1 ? weekdayForDateTime(dt1, length1) : string1(standalone1 ? {
                weekday: length1
            } : {
                weekday: length1,
                month: "long",
                day: "numeric"
            }, "weekday"), maybeMacro1 = (token1)=>{
            const formatOpts1 = Formatter.macroTokenToFormatOpts(token1);
            if (formatOpts1) {
                return this.formatWithSystemDefault(dt1, formatOpts1);
            } else {
                return token1;
            }
        }, era1 = (length1)=>knownEnglish1 ? eraForDateTime(dt1, length1) : string1({
                era: length1
            }, "era"), tokenToString1 = (token1)=>{
            // Where possible: http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles
            switch(token1){
                // ms
                case "S":
                    return this.num(dt1.millisecond);
                case "u":
                // falls through
                case "SSS":
                    return this.num(dt1.millisecond, 3);
                // seconds
                case "s":
                    return this.num(dt1.second);
                case "ss":
                    return this.num(dt1.second, 2);
                // fractional seconds
                case "uu":
                    return this.num(Math.floor(dt1.millisecond / 10), 2);
                case "uuu":
                    return this.num(Math.floor(dt1.millisecond / 100));
                // minutes
                case "m":
                    return this.num(dt1.minute);
                case "mm":
                    return this.num(dt1.minute, 2);
                // hours
                case "h":
                    return this.num(dt1.hour % 12 === 0 ? 12 : dt1.hour % 12);
                case "hh":
                    return this.num(dt1.hour % 12 === 0 ? 12 : dt1.hour % 12, 2);
                case "H":
                    return this.num(dt1.hour);
                case "HH":
                    return this.num(dt1.hour, 2);
                // offset
                case "Z":
                    // like +6
                    return formatOffset1({
                        format: "narrow",
                        allowZ: this.opts.allowZ
                    });
                case "ZZ":
                    // like +06:00
                    return formatOffset1({
                        format: "short",
                        allowZ: this.opts.allowZ
                    });
                case "ZZZ":
                    // like +0600
                    return formatOffset1({
                        format: "techie",
                        allowZ: this.opts.allowZ
                    });
                case "ZZZZ":
                    // like EST
                    return dt1.zone.offsetName(dt1.ts, {
                        format: "short",
                        locale: this.loc.locale
                    });
                case "ZZZZZ":
                    // like Eastern Standard Time
                    return dt1.zone.offsetName(dt1.ts, {
                        format: "long",
                        locale: this.loc.locale
                    });
                // zone
                case "z":
                    // like America/New_York
                    return dt1.zoneName;
                // meridiems
                case "a":
                    return meridiem1();
                // dates
                case "d":
                    return useDateTimeFormatter1 ? string1({
                        day: "numeric"
                    }, "day") : this.num(dt1.day);
                case "dd":
                    return useDateTimeFormatter1 ? string1({
                        day: "2-digit"
                    }, "day") : this.num(dt1.day, 2);
                // weekdays - standalone
                case "c":
                    // like 1
                    return this.num(dt1.weekday);
                case "ccc":
                    // like 'Tues'
                    return weekday1("short", true);
                case "cccc":
                    // like 'Tuesday'
                    return weekday1("long", true);
                case "ccccc":
                    // like 'T'
                    return weekday1("narrow", true);
                // weekdays - format
                case "E":
                    // like 1
                    return this.num(dt1.weekday);
                case "EEE":
                    // like 'Tues'
                    return weekday1("short", false);
                case "EEEE":
                    // like 'Tuesday'
                    return weekday1("long", false);
                case "EEEEE":
                    // like 'T'
                    return weekday1("narrow", false);
                // months - standalone
                case "L":
                    // like 1
                    return useDateTimeFormatter1 ? string1({
                        month: "numeric",
                        day: "numeric"
                    }, "month") : this.num(dt1.month);
                case "LL":
                    // like 01, doesn't seem to work
                    return useDateTimeFormatter1 ? string1({
                        month: "2-digit",
                        day: "numeric"
                    }, "month") : this.num(dt1.month, 2);
                case "LLL":
                    // like Jan
                    return month1("short", true);
                case "LLLL":
                    // like January
                    return month1("long", true);
                case "LLLLL":
                    // like J
                    return month1("narrow", true);
                // months - format
                case "M":
                    // like 1
                    return useDateTimeFormatter1 ? string1({
                        month: "numeric"
                    }, "month") : this.num(dt1.month);
                case "MM":
                    // like 01
                    return useDateTimeFormatter1 ? string1({
                        month: "2-digit"
                    }, "month") : this.num(dt1.month, 2);
                case "MMM":
                    // like Jan
                    return month1("short", false);
                case "MMMM":
                    // like January
                    return month1("long", false);
                case "MMMMM":
                    // like J
                    return month1("narrow", false);
                // years
                case "y":
                    // like 2014
                    return useDateTimeFormatter1 ? string1({
                        year: "numeric"
                    }, "year") : this.num(dt1.year);
                case "yy":
                    // like 14
                    return useDateTimeFormatter1 ? string1({
                        year: "2-digit"
                    }, "year") : this.num(dt1.year.toString().slice(-2), 2);
                case "yyyy":
                    // like 0012
                    return useDateTimeFormatter1 ? string1({
                        year: "numeric"
                    }, "year") : this.num(dt1.year, 4);
                case "yyyyyy":
                    // like 000012
                    return useDateTimeFormatter1 ? string1({
                        year: "numeric"
                    }, "year") : this.num(dt1.year, 6);
                // eras
                case "G":
                    // like AD
                    return era1("short");
                case "GG":
                    // like Anno Domini
                    return era1("long");
                case "GGGGG":
                    return era1("narrow");
                case "kk":
                    return this.num(dt1.weekYear.toString().slice(-2), 2);
                case "kkkk":
                    return this.num(dt1.weekYear, 4);
                case "W":
                    return this.num(dt1.weekNumber);
                case "WW":
                    return this.num(dt1.weekNumber, 2);
                case "o":
                    return this.num(dt1.ordinal);
                case "ooo":
                    return this.num(dt1.ordinal, 3);
                case "q":
                    // like 1
                    return this.num(dt1.quarter);
                case "qq":
                    // like 01
                    return this.num(dt1.quarter, 2);
                case "X":
                    return this.num(Math.floor(dt1.ts / 1000));
                case "x":
                    return this.num(dt1.ts);
                default:
                    return maybeMacro1(token1);
            }
        };
        return stringifyTokens(Formatter.parseFormat(fmt1), tokenToString1);
    }
    formatDurationFromString(dur1, fmt1) {
        const tokenToField1 = (token1)=>{
            switch(token1[0]){
                case "S":
                    return "millisecond";
                case "s":
                    return "second";
                case "m":
                    return "minute";
                case "h":
                    return "hour";
                case "d":
                    return "day";
                case "w":
                    return "week";
                case "M":
                    return "month";
                case "y":
                    return "year";
                default:
                    return null;
            }
        }, tokenToString1 = (lildur1)=>(token1)=>{
                const mapped1 = tokenToField1(token1);
                if (mapped1) {
                    return this.num(lildur1.get(mapped1), token1.length);
                } else {
                    return token1;
                }
            }, tokens1 = Formatter.parseFormat(fmt1), realTokens1 = tokens1.reduce((found1, { literal: literal1, val: val3 })=>literal1 ? found1 : found1.concat(val3), []), collapsed1 = dur1.shiftTo(...realTokens1.map(tokenToField1).filter((t5)=>t5));
        return stringifyTokens(tokens1, tokenToString1(collapsed1));
    }
}
class Invalid {
    constructor(reason1, explanation1){
        this.reason = reason1;
        this.explanation = explanation1;
    }
    toMessage() {
        if (this.explanation) {
            return `${this.reason}: ${this.explanation}`;
        } else {
            return this.reason;
        }
    }
}
/*
 * This file handles parsing for well-specified formats. Here's how it works:
 * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
 * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
 * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
 * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
 * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
 * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
 */ const ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;
function combineRegexes(...regexes1) {
    const full1 = regexes1.reduce((f3, r4)=>f3 + r4.source, "");
    return RegExp(`^${full1}$`);
}
function combineExtractors(...extractors1) {
    return (m1)=>extractors1.reduce(([mergedVals1, mergedZone1, cursor1], ex1)=>{
            const [val3, zone1, next1] = ex1(m1, cursor1);
            return [
                {
                    ...mergedVals1,
                    ...val3
                },
                zone1 || mergedZone1,
                next1
            ];
        }, [
            {},
            null,
            1
        ]).slice(0, 2);
}
function parse(s1, ...patterns1) {
    if (s1 == null) {
        return [
            null,
            null
        ];
    }
    for (const [regex1, extractor1] of patterns1){
        const m1 = regex1.exec(s1);
        if (m1) {
            return extractor1(m1);
        }
    }
    return [
        null,
        null
    ];
}
function simpleParse(...keys1) {
    return (match1, cursor1)=>{
        const ret1 = {};
        let i1;
        for(i1 = 0; i1 < keys1.length; i1++){
            ret1[keys1[i1]] = parseInteger(match1[cursor1 + i1]);
        }
        return [
            ret1,
            null,
            cursor1 + i1
        ];
    };
}
// ISO and SQL parsing
const offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
const isoExtendedZone = `(?:${offsetRegex.source}?(?:\\[(${ianaRegex.source})\\])?)?`;
const isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
const isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);
const isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);
const isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
const isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
const isoOrdinalRegex = /(\d{4})-?(\d{3})/;
const extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
const extractISOOrdinalData = simpleParse("year", "ordinal");
const sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/; // dumbed-down version of the ISO one
const sqlTimeRegex = RegExp(`${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`);
const sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);
function int(match1, pos1, fallback1) {
    const m1 = match1[pos1];
    return isUndefined(m1) ? fallback1 : parseInteger(m1);
}
function extractISOYmd(match1, cursor1) {
    const item1 = {
        year: int(match1, cursor1),
        month: int(match1, cursor1 + 1, 1),
        day: int(match1, cursor1 + 2, 1)
    };
    return [
        item1,
        null,
        cursor1 + 3
    ];
}
function extractISOTime(match1, cursor1) {
    const item1 = {
        hours: int(match1, cursor1, 0),
        minutes: int(match1, cursor1 + 1, 0),
        seconds: int(match1, cursor1 + 2, 0),
        milliseconds: parseMillis(match1[cursor1 + 3])
    };
    return [
        item1,
        null,
        cursor1 + 4
    ];
}
function extractISOOffset(match1, cursor1) {
    const local1 = !match1[cursor1] && !match1[cursor1 + 1], fullOffset1 = signedOffset(match1[cursor1 + 1], match1[cursor1 + 2]), zone1 = local1 ? null : FixedOffsetZone.instance(fullOffset1);
    return [
        {},
        zone1,
        cursor1 + 3
    ];
}
function extractIANAZone(match1, cursor1) {
    const zone1 = match1[cursor1] ? IANAZone.create(match1[cursor1]) : null;
    return [
        {},
        zone1,
        cursor1 + 1
    ];
}
// ISO time parsing
const isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);
// ISO duration parsing
const isoDuration = /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;
function extractISODuration(match1) {
    const [s1, yearStr1, monthStr1, weekStr1, dayStr1, hourStr1, minuteStr1, secondStr1, millisecondsStr1] = match1;
    const hasNegativePrefix1 = s1[0] === "-";
    const negativeSeconds1 = secondStr1 && secondStr1[0] === "-";
    const maybeNegate1 = (num1, force1 = false)=>num1 !== undefined && (force1 || num1 && hasNegativePrefix1) ? -num1 : num1;
    return [
        {
            years: maybeNegate1(parseFloating(yearStr1)),
            months: maybeNegate1(parseFloating(monthStr1)),
            weeks: maybeNegate1(parseFloating(weekStr1)),
            days: maybeNegate1(parseFloating(dayStr1)),
            hours: maybeNegate1(parseFloating(hourStr1)),
            minutes: maybeNegate1(parseFloating(minuteStr1)),
            seconds: maybeNegate1(parseFloating(secondStr1), secondStr1 === "-0"),
            milliseconds: maybeNegate1(parseMillis(millisecondsStr1), negativeSeconds1)
        }
    ];
}
// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
// and not just that we're in -240 *right now*. But since I don't think these are used that often
// I'm just going to ignore that
const obsOffsets = {
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60
};
function fromStrings(weekdayStr1, yearStr1, monthStr1, dayStr1, hourStr1, minuteStr1, secondStr1) {
    const result1 = {
        year: yearStr1.length === 2 ? untruncateYear(parseInteger(yearStr1)) : parseInteger(yearStr1),
        month: monthsShort.indexOf(monthStr1) + 1,
        day: parseInteger(dayStr1),
        hour: parseInteger(hourStr1),
        minute: parseInteger(minuteStr1)
    };
    if (secondStr1) result1.second = parseInteger(secondStr1);
    if (weekdayStr1) {
        result1.weekday = weekdayStr1.length > 3 ? weekdaysLong.indexOf(weekdayStr1) + 1 : weekdaysShort.indexOf(weekdayStr1) + 1;
    }
    return result1;
}
// RFC 2822/5322
const rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;
function extractRFC2822(match1) {
    const [, weekdayStr1, dayStr1, monthStr1, yearStr1, hourStr1, minuteStr1, secondStr1, obsOffset1, milOffset1, offHourStr1, offMinuteStr1] = match1, result1 = fromStrings(weekdayStr1, yearStr1, monthStr1, dayStr1, hourStr1, minuteStr1, secondStr1);
    let offset1;
    if (obsOffset1) {
        offset1 = obsOffsets[obsOffset1];
    } else if (milOffset1) {
        offset1 = 0;
    } else {
        offset1 = signedOffset(offHourStr1, offMinuteStr1);
    }
    return [
        result1,
        new FixedOffsetZone(offset1)
    ];
}
function preprocessRFC2822(s1) {
    // Remove comments and folding whitespace and replace multiple-spaces with a single space
    return s1.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
}
// http date
const rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/, rfc850 = /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/, ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;
function extractRFC1123Or850(match1) {
    const [, weekdayStr1, dayStr1, monthStr1, yearStr1, hourStr1, minuteStr1, secondStr1] = match1, result1 = fromStrings(weekdayStr1, yearStr1, monthStr1, dayStr1, hourStr1, minuteStr1, secondStr1);
    return [
        result1,
        FixedOffsetZone.utcInstance
    ];
}
function extractASCII(match1) {
    const [, weekdayStr1, monthStr1, dayStr1, hourStr1, minuteStr1, secondStr1, yearStr1] = match1, result1 = fromStrings(weekdayStr1, yearStr1, monthStr1, dayStr1, hourStr1, minuteStr1, secondStr1);
    return [
        result1,
        FixedOffsetZone.utcInstance
    ];
}
const isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
const isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
const isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
const isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
const extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);
const extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset, extractIANAZone);
const extractISOOrdinalDateAndTime = combineExtractors(extractISOOrdinalData, extractISOTime, extractISOOffset, extractIANAZone);
const extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
/*
 * @private
 */ function parseISODate(s1) {
    return parse(s1, [
        isoYmdWithTimeExtensionRegex,
        extractISOYmdTimeAndOffset
    ], [
        isoWeekWithTimeExtensionRegex,
        extractISOWeekTimeAndOffset
    ], [
        isoOrdinalWithTimeExtensionRegex,
        extractISOOrdinalDateAndTime
    ], [
        isoTimeCombinedRegex,
        extractISOTimeAndOffset
    ]);
}
function parseRFC2822Date(s1) {
    return parse(preprocessRFC2822(s1), [
        rfc2822,
        extractRFC2822
    ]);
}
function parseHTTPDate(s1) {
    return parse(s1, [
        rfc1123,
        extractRFC1123Or850
    ], [
        rfc850,
        extractRFC1123Or850
    ], [
        ascii,
        extractASCII
    ]);
}
function parseISODuration(s1) {
    return parse(s1, [
        isoDuration,
        extractISODuration
    ]);
}
const extractISOTimeOnly = combineExtractors(extractISOTime);
function parseISOTimeOnly(s1) {
    return parse(s1, [
        isoTimeOnly,
        extractISOTimeOnly
    ]);
}
const sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
const sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
const extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
function parseSQL(s1) {
    return parse(s1, [
        sqlYmdWithTimeExtensionRegex,
        extractISOYmdTimeAndOffset
    ], [
        sqlTimeCombinedRegex,
        extractISOTimeOffsetAndIANAZone
    ]);
}
const INVALID$2 = "Invalid Duration";
// unit conversion constants
const lowOrderMatrix = {
    weeks: {
        days: 7,
        hours: 7 * 24,
        minutes: 7 * 24 * 60,
        seconds: 7 * 24 * 60 * 60,
        milliseconds: 7 * 24 * 60 * 60 * 1000
    },
    days: {
        hours: 24,
        minutes: 24 * 60,
        seconds: 24 * 60 * 60,
        milliseconds: 24 * 60 * 60 * 1000
    },
    hours: {
        minutes: 60,
        seconds: 60 * 60,
        milliseconds: 60 * 60 * 1000
    },
    minutes: {
        seconds: 60,
        milliseconds: 60 * 1000
    },
    seconds: {
        milliseconds: 1000
    }
}, casualMatrix = {
    years: {
        quarters: 4,
        months: 12,
        weeks: 52,
        days: 365,
        hours: 365 * 24,
        minutes: 365 * 24 * 60,
        seconds: 365 * 24 * 60 * 60,
        milliseconds: 365 * 24 * 60 * 60 * 1000
    },
    quarters: {
        months: 3,
        weeks: 13,
        days: 91,
        hours: 91 * 24,
        minutes: 91 * 24 * 60,
        seconds: 91 * 24 * 60 * 60,
        milliseconds: 91 * 24 * 60 * 60 * 1000
    },
    months: {
        weeks: 4,
        days: 30,
        hours: 30 * 24,
        minutes: 30 * 24 * 60,
        seconds: 30 * 24 * 60 * 60,
        milliseconds: 30 * 24 * 60 * 60 * 1000
    },
    ...lowOrderMatrix
}, daysInYearAccurate = 146097.0 / 400, daysInMonthAccurate = 146097.0 / 4800, accurateMatrix = {
    years: {
        quarters: 4,
        months: 12,
        weeks: daysInYearAccurate / 7,
        days: daysInYearAccurate,
        hours: daysInYearAccurate * 24,
        minutes: daysInYearAccurate * 24 * 60,
        seconds: daysInYearAccurate * 24 * 60 * 60,
        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000
    },
    quarters: {
        months: 3,
        weeks: daysInYearAccurate / 28,
        days: daysInYearAccurate / 4,
        hours: daysInYearAccurate * 24 / 4,
        minutes: daysInYearAccurate * 24 * 60 / 4,
        seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000 / 4
    },
    months: {
        weeks: daysInMonthAccurate / 7,
        days: daysInMonthAccurate,
        hours: daysInMonthAccurate * 24,
        minutes: daysInMonthAccurate * 24 * 60,
        seconds: daysInMonthAccurate * 24 * 60 * 60,
        milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1000
    },
    ...lowOrderMatrix
};
// units ordered by size
const orderedUnits$1 = [
    "years",
    "quarters",
    "months",
    "weeks",
    "days",
    "hours",
    "minutes",
    "seconds",
    "milliseconds"
];
const reverseUnits = orderedUnits$1.slice(0).reverse();
// clone really means "create another instance just like this one, but with these changes"
function clone$1(dur1, alts1, clear1 = false) {
    // deep merge for vals
    const conf1 = {
        values: clear1 ? alts1.values : {
            ...dur1.values,
            ...alts1.values || {}
        },
        loc: dur1.loc.clone(alts1.loc),
        conversionAccuracy: alts1.conversionAccuracy || dur1.conversionAccuracy,
        matrix: alts1.matrix || dur1.matrix
    };
    return new Duration(conf1);
}
function antiTrunc(n3) {
    return n3 < 0 ? Math.floor(n3) : Math.ceil(n3);
}
// NB: mutates parameters
function convert(matrix1, fromMap1, fromUnit1, toMap1, toUnit1) {
    const conv1 = matrix1[toUnit1][fromUnit1], raw1 = fromMap1[fromUnit1] / conv1, sameSign1 = Math.sign(raw1) === Math.sign(toMap1[toUnit1]), // ok, so this is wild, but see the matrix in the tests
    added1 = !sameSign1 && toMap1[toUnit1] !== 0 && Math.abs(raw1) <= 1 ? antiTrunc(raw1) : Math.trunc(raw1);
    toMap1[toUnit1] += added1;
    fromMap1[fromUnit1] -= added1 * conv1;
}
// NB: mutates parameters
function normalizeValues(matrix1, vals1) {
    reverseUnits.reduce((previous1, current1)=>{
        if (!isUndefined(vals1[current1])) {
            if (previous1) {
                convert(matrix1, vals1, previous1, vals1, current1);
            }
            return current1;
        } else {
            return previous1;
        }
    }, null);
}
// Remove all properties with a value of 0 from an object
function removeZeroes(vals1) {
    const newVals1 = {};
    for (const [key1, value1] of Object.entries(vals1)){
        if (value1 !== 0) {
            newVals1[key1] = value1;
        }
    }
    return newVals1;
}
/**
 * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.
 *
 * Here is a brief overview of commonly used methods and getters in Duration:
 *
 * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
 * * **Unit values** See the {@link Duration#years}, {@link Duration#months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.
 * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.
 * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.
 * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}
 *
 * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
 */ class Duration {
    /**
   * @private
   */ constructor(config1){
        const accurate1 = config1.conversionAccuracy === "longterm" || false;
        let matrix1 = accurate1 ? accurateMatrix : casualMatrix;
        if (config1.matrix) {
            matrix1 = config1.matrix;
        }
        /**
     * @access private
     */ this.values = config1.values;
        /**
     * @access private
     */ this.loc = config1.loc || Locale.create();
        /**
     * @access private
     */ this.conversionAccuracy = accurate1 ? "longterm" : "casual";
        /**
     * @access private
     */ this.invalid = config1.invalid || null;
        /**
     * @access private
     */ this.matrix = matrix1;
        /**
     * @access private
     */ this.isLuxonDuration = true;
    }
    /**
   * Create Duration from a number of milliseconds.
   * @param {number} count of milliseconds
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */ static fromMillis(count1, opts1) {
        return Duration.fromObject({
            milliseconds: count1
        }, opts1);
    }
    /**
   * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
   * If this object is empty then a zero milliseconds duration is returned.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.years
   * @param {number} obj.quarters
   * @param {number} obj.months
   * @param {number} obj.weeks
   * @param {number} obj.days
   * @param {number} obj.hours
   * @param {number} obj.minutes
   * @param {number} obj.seconds
   * @param {number} obj.milliseconds
   * @param {Object} [opts=[]] - options for creating this Duration
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the custom conversion system to use
   * @return {Duration}
   */ static fromObject(obj1, opts1 = {}) {
        if (obj1 == null || typeof obj1 !== "object") {
            throw new InvalidArgumentError(`Duration.fromObject: argument expected to be an object, got ${obj1 === null ? "null" : typeof obj1}`);
        }
        return new Duration({
            values: normalizeObject(obj1, Duration.normalizeUnit),
            loc: Locale.fromObject(opts1),
            conversionAccuracy: opts1.conversionAccuracy,
            matrix: opts1.matrix
        });
    }
    /**
   * Create a Duration from DurationLike.
   *
   * @param {Object | number | Duration} durationLike
   * One of:
   * - object with keys like 'years' and 'hours'.
   * - number representing milliseconds
   * - Duration instance
   * @return {Duration}
   */ static fromDurationLike(durationLike1) {
        if (isNumber(durationLike1)) {
            return Duration.fromMillis(durationLike1);
        } else if (Duration.isDuration(durationLike1)) {
            return durationLike1;
        } else if (typeof durationLike1 === "object") {
            return Duration.fromObject(durationLike1);
        } else {
            throw new InvalidArgumentError(`Unknown duration argument ${durationLike1} of type ${typeof durationLike1}`);
        }
    }
    /**
   * Create a Duration from an ISO 8601 duration string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the preset conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
   * @return {Duration}
   */ static fromISO(text1, opts1) {
        const [parsed1] = parseISODuration(text1);
        if (parsed1) {
            return Duration.fromObject(parsed1, opts1);
        } else {
            return Duration.invalid("unparsable", `the input "${text1}" can't be parsed as ISO 8601`);
        }
    }
    /**
   * Create a Duration from an ISO 8601 time string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @return {Duration}
   */ static fromISOTime(text1, opts1) {
        const [parsed1] = parseISOTimeOnly(text1);
        if (parsed1) {
            return Duration.fromObject(parsed1, opts1);
        } else {
            return Duration.invalid("unparsable", `the input "${text1}" can't be parsed as ISO 8601`);
        }
    }
    /**
   * Create an invalid Duration.
   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Duration}
   */ static invalid(reason1, explanation1 = null) {
        if (!reason1) {
            throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
        }
        const invalid1 = reason1 instanceof Invalid ? reason1 : new Invalid(reason1, explanation1);
        if (Settings.throwOnInvalid) {
            throw new InvalidDurationError(invalid1);
        } else {
            return new Duration({
                invalid: invalid1
            });
        }
    }
    /**
   * @private
   */ static normalizeUnit(unit1) {
        const normalized1 = {
            year: "years",
            years: "years",
            quarter: "quarters",
            quarters: "quarters",
            month: "months",
            months: "months",
            week: "weeks",
            weeks: "weeks",
            day: "days",
            days: "days",
            hour: "hours",
            hours: "hours",
            minute: "minutes",
            minutes: "minutes",
            second: "seconds",
            seconds: "seconds",
            millisecond: "milliseconds",
            milliseconds: "milliseconds"
        }[unit1 ? unit1.toLowerCase() : unit1];
        if (!normalized1) throw new InvalidUnitError(unit1);
        return normalized1;
    }
    /**
   * Check if an object is a Duration. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */ static isDuration(o4) {
        return o4 && o4.isLuxonDuration || false;
    }
    /**
   * Get  the locale of a Duration, such 'en-GB'
   * @type {string}
   */ get locale() {
        return this.isValid ? this.loc.locale : null;
    }
    /**
   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
   *
   * @type {string}
   */ get numberingSystem() {
        return this.isValid ? this.loc.numberingSystem : null;
    }
    /**
   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
   * * `S` for milliseconds
   * * `s` for seconds
   * * `m` for minutes
   * * `h` for hours
   * * `d` for days
   * * `w` for weeks
   * * `M` for months
   * * `y` for years
   * Notes:
   * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
   * * Tokens can be escaped by wrapping with single quotes.
   * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
   * @param {string} fmt - the format string
   * @param {Object} opts - options
   * @param {boolean} [opts.floor=true] - floor numerical values
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
   * @return {string}
   */ toFormat(fmt1, opts1 = {}) {
        // reverse-compat since 1.2; we always round down now, never up, and we do it by default
        const fmtOpts1 = {
            ...opts1,
            floor: opts1.round !== false && opts1.floor !== false
        };
        return this.isValid ? Formatter.create(this.loc, fmtOpts1).formatDurationFromString(this, fmt1) : INVALID$2;
    }
    /**
   * Returns a string representation of a Duration with all units included.
   * To modify its behavior use the `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat
   * @param opts - On option object to override the formatting. Accepts the same keys as the options parameter of the native `Int.NumberFormat` constructor, as well as `listStyle`.
   * @example
   * ```js
   * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
   * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
   * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
   * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
   * ```
   */ toHuman(opts1 = {}) {
        const l1 = orderedUnits$1.map((unit1)=>{
            const val3 = this.values[unit1];
            if (isUndefined(val3)) {
                return null;
            }
            return this.loc.numberFormatter({
                style: "unit",
                unitDisplay: "long",
                ...opts1,
                unit: unit1.slice(0, -1)
            }).format(val3);
        }).filter((n3)=>n3);
        return this.loc.listFormatter({
            type: "conjunction",
            style: opts1.listStyle || "narrow",
            ...opts1
        }).format(l1);
    }
    /**
   * Returns a JavaScript object with this Duration's values.
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
   * @return {Object}
   */ toObject() {
        if (!this.isValid) return {};
        return {
            ...this.values
        };
    }
    /**
   * Returns an ISO 8601-compliant string representation of this Duration.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
   * @return {string}
   */ toISO() {
        // we could use the formatter, but this is an easier way to get the minimum string
        if (!this.isValid) return null;
        let s1 = "P";
        if (this.years !== 0) s1 += this.years + "Y";
        if (this.months !== 0 || this.quarters !== 0) s1 += this.months + this.quarters * 3 + "M";
        if (this.weeks !== 0) s1 += this.weeks + "W";
        if (this.days !== 0) s1 += this.days + "D";
        if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) s1 += "T";
        if (this.hours !== 0) s1 += this.hours + "H";
        if (this.minutes !== 0) s1 += this.minutes + "M";
        if (this.seconds !== 0 || this.milliseconds !== 0) // this will handle "floating point madness" by removing extra decimal places
        // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
        s1 += roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
        if (s1 === "P") s1 += "T0S";
        return s1;
    }
    /**
   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
   * @return {string}
   */ toISOTime(opts1 = {}) {
        if (!this.isValid) return null;
        const millis1 = this.toMillis();
        if (millis1 < 0 || millis1 >= 86400000) return null;
        opts1 = {
            suppressMilliseconds: false,
            suppressSeconds: false,
            includePrefix: false,
            format: "extended",
            ...opts1
        };
        const value1 = this.shiftTo("hours", "minutes", "seconds", "milliseconds");
        let fmt1 = opts1.format === "basic" ? "hhmm" : "hh:mm";
        if (!opts1.suppressSeconds || value1.seconds !== 0 || value1.milliseconds !== 0) {
            fmt1 += opts1.format === "basic" ? "ss" : ":ss";
            if (!opts1.suppressMilliseconds || value1.milliseconds !== 0) {
                fmt1 += ".SSS";
            }
        }
        let str1 = value1.toFormat(fmt1);
        if (opts1.includePrefix) {
            str1 = "T" + str1;
        }
        return str1;
    }
    /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
   * @return {string}
   */ toJSON() {
        return this.toISO();
    }
    /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
   * @return {string}
   */ toString() {
        return this.toISO();
    }
    /**
   * Returns an milliseconds value of this Duration.
   * @return {number}
   */ toMillis() {
        return this.as("milliseconds");
    }
    /**
   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
   * @return {number}
   */ valueOf() {
        return this.toMillis();
    }
    /**
   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */ plus(duration1) {
        if (!this.isValid) return this;
        const dur1 = Duration.fromDurationLike(duration1), result1 = {};
        for (const k3 of orderedUnits$1){
            if (hasOwnProperty(dur1.values, k3) || hasOwnProperty(this.values, k3)) {
                result1[k3] = dur1.get(k3) + this.get(k3);
            }
        }
        return clone$1(this, {
            values: result1
        }, true);
    }
    /**
   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */ minus(duration1) {
        if (!this.isValid) return this;
        const dur1 = Duration.fromDurationLike(duration1);
        return this.plus(dur1.negate());
    }
    /**
   * Scale this Duration by the specified amount. Return a newly-constructed Duration.
   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
   * @return {Duration}
   */ mapUnits(fn1) {
        if (!this.isValid) return this;
        const result1 = {};
        for (const k3 of Object.keys(this.values)){
            result1[k3] = asNumber(fn1(this.values[k3], k3));
        }
        return clone$1(this, {
            values: result1
        }, true);
    }
    /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
   * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
   * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
   * @return {number}
   */ get(unit1) {
        return this[Duration.normalizeUnit(unit1)];
    }
    /**
   * "Set" the values of specified units. Return a newly-constructed Duration.
   * @param {Object} values - a mapping of units to numbers
   * @example dur.set({ years: 2017 })
   * @example dur.set({ hours: 8, minutes: 30 })
   * @return {Duration}
   */ set(values1) {
        if (!this.isValid) return this;
        const mixed1 = {
            ...this.values,
            ...normalizeObject(values1, Duration.normalizeUnit)
        };
        return clone$1(this, {
            values: mixed1
        });
    }
    /**
   * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
   * @example dur.reconfigure({ locale: 'en-GB' })
   * @return {Duration}
   */ reconfigure({ locale: locale1, numberingSystem: numberingSystem1, conversionAccuracy: conversionAccuracy1, matrix: matrix1 } = {}) {
        const loc1 = this.loc.clone({
            locale: locale1,
            numberingSystem: numberingSystem1
        });
        const opts1 = {
            loc: loc1,
            matrix: matrix1,
            conversionAccuracy: conversionAccuracy1
        };
        return clone$1(this, opts1);
    }
    /**
   * Return the length of the duration in the specified unit.
   * @param {string} unit - a unit such as 'minutes' or 'days'
   * @example Duration.fromObject({years: 1}).as('days') //=> 365
   * @example Duration.fromObject({years: 1}).as('months') //=> 12
   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
   * @return {number}
   */ as(unit1) {
        return this.isValid ? this.shiftTo(unit1).get(unit1) : NaN;
    }
    /**
   * Reduce this Duration to its canonical representation in its current units.
   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
   * @return {Duration}
   */ normalize() {
        if (!this.isValid) return this;
        const vals1 = this.toObject();
        normalizeValues(this.matrix, vals1);
        return clone$1(this, {
            values: vals1
        }, true);
    }
    /**
   * Rescale units to its largest representation
   * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
   * @return {Duration}
   */ rescale() {
        if (!this.isValid) return this;
        const vals1 = removeZeroes(this.normalize().shiftToAll().toObject());
        return clone$1(this, {
            values: vals1
        }, true);
    }
    /**
   * Convert this Duration into its representation in a different set of units.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
   * @return {Duration}
   */ shiftTo(...units1) {
        if (!this.isValid) return this;
        if (units1.length === 0) {
            return this;
        }
        units1 = units1.map((u1)=>Duration.normalizeUnit(u1));
        const built1 = {}, accumulated1 = {}, vals1 = this.toObject();
        let lastUnit1;
        for (const k3 of orderedUnits$1){
            if (units1.indexOf(k3) >= 0) {
                lastUnit1 = k3;
                let own1 = 0;
                // anything we haven't boiled down yet should get boiled to this unit
                for(const ak1 in accumulated1){
                    own1 += this.matrix[ak1][k3] * accumulated1[ak1];
                    accumulated1[ak1] = 0;
                }
                // plus anything that's already in this unit
                if (isNumber(vals1[k3])) {
                    own1 += vals1[k3];
                }
                const i1 = Math.trunc(own1);
                built1[k3] = i1;
                accumulated1[k3] = (own1 * 1000 - i1 * 1000) / 1000;
                // plus anything further down the chain that should be rolled up in to this
                for(const down1 in vals1){
                    if (orderedUnits$1.indexOf(down1) > orderedUnits$1.indexOf(k3)) {
                        convert(this.matrix, vals1, down1, built1, k3);
                    }
                }
            // otherwise, keep it in the wings to boil it later
            } else if (isNumber(vals1[k3])) {
                accumulated1[k3] = vals1[k3];
            }
        }
        // anything leftover becomes the decimal for the last unit
        // lastUnit must be defined since units is not empty
        for(const key1 in accumulated1){
            if (accumulated1[key1] !== 0) {
                built1[lastUnit1] += key1 === lastUnit1 ? accumulated1[key1] : accumulated1[key1] / this.matrix[lastUnit1][key1];
            }
        }
        return clone$1(this, {
            values: built1
        }, true).normalize();
    }
    /**
   * Shift this Duration to all available units.
   * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
   * @return {Duration}
   */ shiftToAll() {
        if (!this.isValid) return this;
        return this.shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds");
    }
    /**
   * Return the negative of this Duration.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
   * @return {Duration}
   */ negate() {
        if (!this.isValid) return this;
        const negated1 = {};
        for (const k3 of Object.keys(this.values)){
            negated1[k3] = this.values[k3] === 0 ? 0 : -this.values[k3];
        }
        return clone$1(this, {
            values: negated1
        }, true);
    }
    /**
   * Get the years.
   * @type {number}
   */ get years() {
        return this.isValid ? this.values.years || 0 : NaN;
    }
    /**
   * Get the quarters.
   * @type {number}
   */ get quarters() {
        return this.isValid ? this.values.quarters || 0 : NaN;
    }
    /**
   * Get the months.
   * @type {number}
   */ get months() {
        return this.isValid ? this.values.months || 0 : NaN;
    }
    /**
   * Get the weeks
   * @type {number}
   */ get weeks() {
        return this.isValid ? this.values.weeks || 0 : NaN;
    }
    /**
   * Get the days.
   * @type {number}
   */ get days() {
        return this.isValid ? this.values.days || 0 : NaN;
    }
    /**
   * Get the hours.
   * @type {number}
   */ get hours() {
        return this.isValid ? this.values.hours || 0 : NaN;
    }
    /**
   * Get the minutes.
   * @type {number}
   */ get minutes() {
        return this.isValid ? this.values.minutes || 0 : NaN;
    }
    /**
   * Get the seconds.
   * @return {number}
   */ get seconds() {
        return this.isValid ? this.values.seconds || 0 : NaN;
    }
    /**
   * Get the milliseconds.
   * @return {number}
   */ get milliseconds() {
        return this.isValid ? this.values.milliseconds || 0 : NaN;
    }
    /**
   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
   * on invalid DateTimes or Intervals.
   * @return {boolean}
   */ get isValid() {
        return this.invalid === null;
    }
    /**
   * Returns an error code if this Duration became invalid, or null if the Duration is valid
   * @return {string}
   */ get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
    }
    /**
   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
   * @type {string}
   */ get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
    }
    /**
   * Equality check
   * Two Durations are equal iff they have the same units and the same values for each unit.
   * @param {Duration} other
   * @return {boolean}
   */ equals(other1) {
        if (!this.isValid || !other1.isValid) {
            return false;
        }
        if (!this.loc.equals(other1.loc)) {
            return false;
        }
        function eq1(v11, v21) {
            // Consider 0 and undefined as equal
            if (v11 === undefined || v11 === 0) return v21 === undefined || v21 === 0;
            return v11 === v21;
        }
        for (const u1 of orderedUnits$1){
            if (!eq1(this.values[u1], other1.values[u1])) {
                return false;
            }
        }
        return true;
    }
}
const INVALID$1 = "Invalid Interval";
// checks if the start is equal to or before the end
function validateStartEnd(start1, end1) {
    if (!start1 || !start1.isValid) {
        return Interval.invalid("missing or invalid start");
    } else if (!end1 || !end1.isValid) {
        return Interval.invalid("missing or invalid end");
    } else if (end1 < start1) {
        return Interval.invalid("end before start", `The end of an interval must be after its start, but you had start=${start1.toISO()} and end=${end1.toISO()}`);
    } else {
        return null;
    }
}
/**
 * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
 *
 * Here is a brief overview of the most commonly used methods and getters in Interval:
 *
 * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.
 * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.
 * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.
 * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.
 * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}
 * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.
 */ class Interval {
    /**
   * @private
   */ constructor(config1){
        /**
     * @access private
     */ this.s = config1.start;
        /**
     * @access private
     */ this.e = config1.end;
        /**
     * @access private
     */ this.invalid = config1.invalid || null;
        /**
     * @access private
     */ this.isLuxonInterval = true;
    }
    /**
   * Create an invalid Interval.
   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Interval}
   */ static invalid(reason1, explanation1 = null) {
        if (!reason1) {
            throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
        }
        const invalid1 = reason1 instanceof Invalid ? reason1 : new Invalid(reason1, explanation1);
        if (Settings.throwOnInvalid) {
            throw new InvalidIntervalError(invalid1);
        } else {
            return new Interval({
                invalid: invalid1
            });
        }
    }
    /**
   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
   * @param {DateTime|Date|Object} start
   * @param {DateTime|Date|Object} end
   * @return {Interval}
   */ static fromDateTimes(start1, end1) {
        const builtStart1 = friendlyDateTime(start1), builtEnd1 = friendlyDateTime(end1);
        const validateError1 = validateStartEnd(builtStart1, builtEnd1);
        if (validateError1 == null) {
            return new Interval({
                start: builtStart1,
                end: builtEnd1
            });
        } else {
            return validateError1;
        }
    }
    /**
   * Create an Interval from a start DateTime and a Duration to extend to.
   * @param {DateTime|Date|Object} start
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */ static after(start1, duration1) {
        const dur1 = Duration.fromDurationLike(duration1), dt1 = friendlyDateTime(start1);
        return Interval.fromDateTimes(dt1, dt1.plus(dur1));
    }
    /**
   * Create an Interval from an end DateTime and a Duration to extend backwards to.
   * @param {DateTime|Date|Object} end
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */ static before(end1, duration1) {
        const dur1 = Duration.fromDurationLike(duration1), dt1 = friendlyDateTime(end1);
        return Interval.fromDateTimes(dt1.minus(dur1), dt1);
    }
    /**
   * Create an Interval from an ISO 8601 string.
   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
   * @param {string} text - the ISO string to parse
   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {Interval}
   */ static fromISO(text1, opts1) {
        const [s1, e1] = (text1 || "").split("/", 2);
        if (s1 && e1) {
            let start1, startIsValid1;
            try {
                start1 = DateTime.fromISO(s1, opts1);
                startIsValid1 = start1.isValid;
            } catch (e1) {
                startIsValid1 = false;
            }
            let end1, endIsValid1;
            try {
                end1 = DateTime.fromISO(e1, opts1);
                endIsValid1 = end1.isValid;
            } catch (e1) {
                endIsValid1 = false;
            }
            if (startIsValid1 && endIsValid1) {
                return Interval.fromDateTimes(start1, end1);
            }
            if (startIsValid1) {
                const dur1 = Duration.fromISO(e1, opts1);
                if (dur1.isValid) {
                    return Interval.after(start1, dur1);
                }
            } else if (endIsValid1) {
                const dur1 = Duration.fromISO(s1, opts1);
                if (dur1.isValid) {
                    return Interval.before(end1, dur1);
                }
            }
        }
        return Interval.invalid("unparsable", `the input "${text1}" can't be parsed as ISO 8601`);
    }
    /**
   * Check if an object is an Interval. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */ static isInterval(o4) {
        return o4 && o4.isLuxonInterval || false;
    }
    /**
   * Returns the start of the Interval
   * @type {DateTime}
   */ get start() {
        return this.isValid ? this.s : null;
    }
    /**
   * Returns the end of the Interval
   * @type {DateTime}
   */ get end() {
        return this.isValid ? this.e : null;
    }
    /**
   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
   * @type {boolean}
   */ get isValid() {
        return this.invalidReason === null;
    }
    /**
   * Returns an error code if this Interval is invalid, or null if the Interval is valid
   * @type {string}
   */ get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
    }
    /**
   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
   * @type {string}
   */ get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
    }
    /**
   * Returns the length of the Interval in the specified unit.
   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
   * @return {number}
   */ length(unit1 = "milliseconds") {
        return this.isValid ? this.toDuration(...[
            unit1
        ]).get(unit1) : NaN;
    }
    /**
   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
   * @param {string} [unit='milliseconds'] - the unit of time to count.
   * @return {number}
   */ count(unit1 = "milliseconds") {
        if (!this.isValid) return NaN;
        const start1 = this.start.startOf(unit1), end1 = this.end.startOf(unit1);
        return Math.floor(end1.diff(start1, unit1).get(unit1)) + 1;
    }
    /**
   * Returns whether this Interval's start and end are both in the same unit of time
   * @param {string} unit - the unit of time to check sameness on
   * @return {boolean}
   */ hasSame(unit1) {
        return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit1) : false;
    }
    /**
   * Return whether this Interval has the same start and end DateTimes.
   * @return {boolean}
   */ isEmpty() {
        return this.s.valueOf() === this.e.valueOf();
    }
    /**
   * Return whether this Interval's start is after the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */ isAfter(dateTime1) {
        if (!this.isValid) return false;
        return this.s > dateTime1;
    }
    /**
   * Return whether this Interval's end is before the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */ isBefore(dateTime1) {
        if (!this.isValid) return false;
        return this.e <= dateTime1;
    }
    /**
   * Return whether this Interval contains the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */ contains(dateTime1) {
        if (!this.isValid) return false;
        return this.s <= dateTime1 && this.e > dateTime1;
    }
    /**
   * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
   * @param {Object} values - the values to set
   * @param {DateTime} values.start - the starting DateTime
   * @param {DateTime} values.end - the ending DateTime
   * @return {Interval}
   */ set({ start: start1, end: end1 } = {}) {
        if (!this.isValid) return this;
        return Interval.fromDateTimes(start1 || this.s, end1 || this.e);
    }
    /**
   * Split this Interval at each of the specified DateTimes
   * @param {...DateTime} dateTimes - the unit of time to count.
   * @return {Array}
   */ splitAt(...dateTimes1) {
        if (!this.isValid) return [];
        const sorted1 = dateTimes1.map(friendlyDateTime).filter((d1)=>this.contains(d1)).sort(), results1 = [];
        let { s: s1 } = this, i1 = 0;
        while(s1 < this.e){
            const added1 = sorted1[i1] || this.e, next1 = +added1 > +this.e ? this.e : added1;
            results1.push(Interval.fromDateTimes(s1, next1));
            s1 = next1;
            i1 += 1;
        }
        return results1;
    }
    /**
   * Split this Interval into smaller Intervals, each of the specified length.
   * Left over time is grouped into a smaller interval
   * @param {Duration|Object|number} duration - The length of each resulting interval.
   * @return {Array}
   */ splitBy(duration1) {
        const dur1 = Duration.fromDurationLike(duration1);
        if (!this.isValid || !dur1.isValid || dur1.as("milliseconds") === 0) {
            return [];
        }
        let { s: s1 } = this, idx1 = 1, next1;
        const results1 = [];
        while(s1 < this.e){
            const added1 = this.start.plus(dur1.mapUnits((x1)=>x1 * idx1));
            next1 = +added1 > +this.e ? this.e : added1;
            results1.push(Interval.fromDateTimes(s1, next1));
            s1 = next1;
            idx1 += 1;
        }
        return results1;
    }
    /**
   * Split this Interval into the specified number of smaller intervals.
   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
   * @return {Array}
   */ divideEqually(numberOfParts1) {
        if (!this.isValid) return [];
        return this.splitBy(this.length() / numberOfParts1).slice(0, numberOfParts1);
    }
    /**
   * Return whether this Interval overlaps with the specified Interval
   * @param {Interval} other
   * @return {boolean}
   */ overlaps(other1) {
        return this.e > other1.s && this.s < other1.e;
    }
    /**
   * Return whether this Interval's end is adjacent to the specified Interval's start.
   * @param {Interval} other
   * @return {boolean}
   */ abutsStart(other1) {
        if (!this.isValid) return false;
        return +this.e === +other1.s;
    }
    /**
   * Return whether this Interval's start is adjacent to the specified Interval's end.
   * @param {Interval} other
   * @return {boolean}
   */ abutsEnd(other1) {
        if (!this.isValid) return false;
        return +other1.e === +this.s;
    }
    /**
   * Return whether this Interval engulfs the start and end of the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */ engulfs(other1) {
        if (!this.isValid) return false;
        return this.s <= other1.s && this.e >= other1.e;
    }
    /**
   * Return whether this Interval has the same start and end as the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */ equals(other1) {
        if (!this.isValid || !other1.isValid) {
            return false;
        }
        return this.s.equals(other1.s) && this.e.equals(other1.e);
    }
    /**
   * Return an Interval representing the intersection of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
   * Returns null if the intersection is empty, meaning, the intervals don't intersect.
   * @param {Interval} other
   * @return {Interval}
   */ intersection(other1) {
        if (!this.isValid) return this;
        const s1 = this.s > other1.s ? this.s : other1.s, e1 = this.e < other1.e ? this.e : other1.e;
        if (s1 >= e1) {
            return null;
        } else {
            return Interval.fromDateTimes(s1, e1);
        }
    }
    /**
   * Return an Interval representing the union of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
   * @param {Interval} other
   * @return {Interval}
   */ union(other1) {
        if (!this.isValid) return this;
        const s1 = this.s < other1.s ? this.s : other1.s, e1 = this.e > other1.e ? this.e : other1.e;
        return Interval.fromDateTimes(s1, e1);
    }
    /**
   * Merge an array of Intervals into a equivalent minimal set of Intervals.
   * Combines overlapping and adjacent Intervals.
   * @param {Array} intervals
   * @return {Array}
   */ static merge(intervals1) {
        const [found1, final1] = intervals1.sort((a1, b1)=>a1.s - b1.s).reduce(([sofar1, current1], item1)=>{
            if (!current1) {
                return [
                    sofar1,
                    item1
                ];
            } else if (current1.overlaps(item1) || current1.abutsStart(item1)) {
                return [
                    sofar1,
                    current1.union(item1)
                ];
            } else {
                return [
                    sofar1.concat([
                        current1
                    ]),
                    item1
                ];
            }
        }, [
            [],
            null
        ]);
        if (final1) {
            found1.push(final1);
        }
        return found1;
    }
    /**
   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
   * @param {Array} intervals
   * @return {Array}
   */ static xor(intervals1) {
        let start1 = null, currentCount1 = 0;
        const results1 = [], ends1 = intervals1.map((i1)=>[
                {
                    time: i1.s,
                    type: "s"
                },
                {
                    time: i1.e,
                    type: "e"
                }
            ]), flattened1 = Array.prototype.concat(...ends1), arr1 = flattened1.sort((a1, b1)=>a1.time - b1.time);
        for (const i1 of arr1){
            currentCount1 += i1.type === "s" ? 1 : -1;
            if (currentCount1 === 1) {
                start1 = i1.time;
            } else {
                if (start1 && +start1 !== +i1.time) {
                    results1.push(Interval.fromDateTimes(start1, i1.time));
                }
                start1 = null;
            }
        }
        return Interval.merge(results1);
    }
    /**
   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
   * @param {...Interval} intervals
   * @return {Array}
   */ difference(...intervals1) {
        return Interval.xor([
            this
        ].concat(intervals1)).map((i1)=>this.intersection(i1)).filter((i1)=>i1 && !i1.isEmpty());
    }
    /**
   * Returns a string representation of this Interval appropriate for debugging.
   * @return {string}
   */ toString() {
        if (!this.isValid) return INVALID$1;
        return `[${this.s.toISO()} – ${this.e.toISO()})`;
    }
    /**
   * Returns a localized string representing this Interval. Accepts the same options as the
   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
   * is browser-specific, but in general it will return an appropriate representation of the
   * Interval in the assigned locale. Defaults to the system's locale if no locale has been
   * specified.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
   * Intl.DateTimeFormat constructor options.
   * @param {Object} opts - Options to override the configuration of the start DateTime.
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
   * @return {string}
   */ toLocaleString(formatOpts1 = DATE_SHORT, opts1 = {}) {
        return this.isValid ? Formatter.create(this.s.loc.clone(opts1), formatOpts1).formatInterval(this) : INVALID$1;
    }
    /**
   * Returns an ISO 8601-compliant string representation of this Interval.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime#toISO}
   * @return {string}
   */ toISO(opts1) {
        if (!this.isValid) return INVALID$1;
        return `${this.s.toISO(opts1)}/${this.e.toISO(opts1)}`;
    }
    /**
   * Returns an ISO 8601-compliant string representation of date of this Interval.
   * The time components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {string}
   */ toISODate() {
        if (!this.isValid) return INVALID$1;
        return `${this.s.toISODate()}/${this.e.toISODate()}`;
    }
    /**
   * Returns an ISO 8601-compliant string representation of time of this Interval.
   * The date components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime#toISO}
   * @return {string}
   */ toISOTime(opts1) {
        if (!this.isValid) return INVALID$1;
        return `${this.s.toISOTime(opts1)}/${this.e.toISOTime(opts1)}`;
    }
    /**
   * Returns a string representation of this Interval formatted according to the specified format
   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
   * formatting tool.
   * @param {string} dateFormat - The format string. This string formats the start and end time.
   * See {@link DateTime#toFormat} for details.
   * @param {Object} opts - Options.
   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
   * representations.
   * @return {string}
   */ toFormat(dateFormat1, { separator: separator1 = " – " } = {}) {
        if (!this.isValid) return INVALID$1;
        return `${this.s.toFormat(dateFormat1)}${separator1}${this.e.toFormat(dateFormat1)}`;
    }
    /**
   * Return a Duration representing the time spanned by this interval.
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
   * @return {Duration}
   */ toDuration(unit1, opts1) {
        if (!this.isValid) {
            return Duration.invalid(this.invalidReason);
        }
        return this.e.diff(this.s, unit1, opts1);
    }
    /**
   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
   * @param {function} mapFn
   * @return {Interval}
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
   */ mapEndpoints(mapFn1) {
        return Interval.fromDateTimes(mapFn1(this.s), mapFn1(this.e));
    }
}
/**
 * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
 */ class Info {
    /**
   * Return whether the specified zone contains a DST.
   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
   * @return {boolean}
   */ static hasDST(zone1 = Settings.defaultZone) {
        const proto1 = DateTime.now().setZone(zone1).set({
            month: 12
        });
        return !zone1.isUniversal && proto1.offset !== proto1.set({
            month: 6
        }).offset;
    }
    /**
   * Return whether the specified zone is a valid IANA specifier.
   * @param {string} zone - Zone to check
   * @return {boolean}
   */ static isValidIANAZone(zone1) {
        return IANAZone.isValidZone(zone1);
    }
    /**
   * Converts the input into a {@link Zone} instance.
   *
   * * If `input` is already a Zone instance, it is returned unchanged.
   * * If `input` is a string containing a valid time zone name, a Zone instance
   *   with that name is returned.
   * * If `input` is a string that doesn't refer to a known time zone, a Zone
   *   instance with {@link Zone#isValid} == false is returned.
   * * If `input is a number, a Zone instance with the specified fixed offset
   *   in minutes is returned.
   * * If `input` is `null` or `undefined`, the default zone is returned.
   * @param {string|Zone|number} [input] - the value to be converted
   * @return {Zone}
   */ static normalizeZone(input1) {
        return normalizeZone(input1, Settings.defaultZone);
    }
    /**
   * Return an array of standalone month names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @example Info.months()[0] //=> 'January'
   * @example Info.months('short')[0] //=> 'Jan'
   * @example Info.months('numeric')[0] //=> '1'
   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
   * @return {Array}
   */ static months(length1 = "long", { locale: locale1 = null, numberingSystem: numberingSystem1 = null, locObj: locObj1 = null, outputCalendar: outputCalendar1 = "gregory" } = {}) {
        return (locObj1 || Locale.create(locale1, numberingSystem1, outputCalendar1)).months(length1);
    }
    /**
   * Return an array of format month names.
   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
   * changes the string.
   * See {@link Info#months}
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @return {Array}
   */ static monthsFormat(length1 = "long", { locale: locale1 = null, numberingSystem: numberingSystem1 = null, locObj: locObj1 = null, outputCalendar: outputCalendar1 = "gregory" } = {}) {
        return (locObj1 || Locale.create(locale1, numberingSystem1, outputCalendar1)).months(length1, true);
    }
    /**
   * Return an array of standalone week names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @example Info.weekdays()[0] //=> 'Monday'
   * @example Info.weekdays('short')[0] //=> 'Mon'
   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
   * @return {Array}
   */ static weekdays(length1 = "long", { locale: locale1 = null, numberingSystem: numberingSystem1 = null, locObj: locObj1 = null } = {}) {
        return (locObj1 || Locale.create(locale1, numberingSystem1, null)).weekdays(length1);
    }
    /**
   * Return an array of format week names.
   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
   * changes the string.
   * See {@link Info#weekdays}
   * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale=null] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @return {Array}
   */ static weekdaysFormat(length1 = "long", { locale: locale1 = null, numberingSystem: numberingSystem1 = null, locObj: locObj1 = null } = {}) {
        return (locObj1 || Locale.create(locale1, numberingSystem1, null)).weekdays(length1, true);
    }
    /**
   * Return an array of meridiems.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.meridiems() //=> [ 'AM', 'PM' ]
   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
   * @return {Array}
   */ static meridiems({ locale: locale1 = null } = {}) {
        return Locale.create(locale1).meridiems();
    }
    /**
   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
   * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.eras() //=> [ 'BC', 'AD' ]
   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
   * @return {Array}
   */ static eras(length1 = "short", { locale: locale1 = null } = {}) {
        return Locale.create(locale1, null, "gregory").eras(length1);
    }
    /**
   * Return the set of available features in this environment.
   * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
   * Keys:
   * * `relative`: whether this environment supports relative time formatting
   * @example Info.features() //=> { relative: false }
   * @return {Object}
   */ static features() {
        return {
            relative: hasRelative()
        };
    }
}
function dayDiff(earlier1, later1) {
    const utcDayStart1 = (dt1)=>dt1.toUTC(0, {
            keepLocalTime: true
        }).startOf("day").valueOf(), ms1 = utcDayStart1(later1) - utcDayStart1(earlier1);
    return Math.floor(Duration.fromMillis(ms1).as("days"));
}
function highOrderDiffs(cursor1, later1, units1) {
    const differs1 = [
        [
            "years",
            (a1, b1)=>b1.year - a1.year
        ],
        [
            "quarters",
            (a1, b1)=>b1.quarter - a1.quarter + (b1.year - a1.year) * 4
        ],
        [
            "months",
            (a1, b1)=>b1.month - a1.month + (b1.year - a1.year) * 12
        ],
        [
            "weeks",
            (a1, b1)=>{
                const days1 = dayDiff(a1, b1);
                return (days1 - days1 % 7) / 7;
            }
        ],
        [
            "days",
            dayDiff
        ]
    ];
    const results1 = {};
    const earlier1 = cursor1;
    let lowestOrder1, highWater1;
    for (const [unit1, differ1] of differs1){
        if (units1.indexOf(unit1) >= 0) {
            lowestOrder1 = unit1;
            results1[unit1] = differ1(cursor1, later1);
            highWater1 = earlier1.plus(results1);
            if (highWater1 > later1) {
                results1[unit1]--;
                cursor1 = earlier1.plus(results1);
            } else {
                cursor1 = highWater1;
            }
        }
    }
    return [
        cursor1,
        results1,
        highWater1,
        lowestOrder1
    ];
}
function diff(earlier1, later1, units1, opts1) {
    let [cursor1, results1, highWater1, lowestOrder1] = highOrderDiffs(earlier1, later1, units1);
    const remainingMillis1 = later1 - cursor1;
    const lowerOrderUnits1 = units1.filter((u1)=>[
            "hours",
            "minutes",
            "seconds",
            "milliseconds"
        ].indexOf(u1) >= 0);
    if (lowerOrderUnits1.length === 0) {
        if (highWater1 < later1) {
            highWater1 = cursor1.plus({
                [lowestOrder1]: 1
            });
        }
        if (highWater1 !== cursor1) {
            results1[lowestOrder1] = (results1[lowestOrder1] || 0) + remainingMillis1 / (highWater1 - cursor1);
        }
    }
    const duration1 = Duration.fromObject(results1, opts1);
    if (lowerOrderUnits1.length > 0) {
        return Duration.fromMillis(remainingMillis1, opts1).shiftTo(...lowerOrderUnits1).plus(duration1);
    } else {
        return duration1;
    }
}
const numberingSystems = {
    arab: "[٠-٩]",
    arabext: "[۰-۹]",
    bali: "[᭐-᭙]",
    beng: "[০-৯]",
    deva: "[०-९]",
    fullwide: "[０-９]",
    gujr: "[૦-૯]",
    hanidec: "[〇|一|二|三|四|五|六|七|八|九]",
    khmr: "[០-៩]",
    knda: "[೦-೯]",
    laoo: "[໐-໙]",
    limb: "[᥆-᥏]",
    mlym: "[൦-൯]",
    mong: "[᠐-᠙]",
    mymr: "[၀-၉]",
    orya: "[୦-୯]",
    tamldec: "[௦-௯]",
    telu: "[౦-౯]",
    thai: "[๐-๙]",
    tibt: "[༠-༩]",
    latn: "\\d"
};
const numberingSystemsUTF16 = {
    arab: [
        1632,
        1641
    ],
    arabext: [
        1776,
        1785
    ],
    bali: [
        6992,
        7001
    ],
    beng: [
        2534,
        2543
    ],
    deva: [
        2406,
        2415
    ],
    fullwide: [
        65296,
        65303
    ],
    gujr: [
        2790,
        2799
    ],
    khmr: [
        6112,
        6121
    ],
    knda: [
        3302,
        3311
    ],
    laoo: [
        3792,
        3801
    ],
    limb: [
        6470,
        6479
    ],
    mlym: [
        3430,
        3439
    ],
    mong: [
        6160,
        6169
    ],
    mymr: [
        4160,
        4169
    ],
    orya: [
        2918,
        2927
    ],
    tamldec: [
        3046,
        3055
    ],
    telu: [
        3174,
        3183
    ],
    thai: [
        3664,
        3673
    ],
    tibt: [
        3872,
        3881
    ]
};
const hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
function parseDigits(str1) {
    let value1 = parseInt(str1, 10);
    if (isNaN(value1)) {
        value1 = "";
        for(let i1 = 0; i1 < str1.length; i1++){
            const code1 = str1.charCodeAt(i1);
            if (str1[i1].search(numberingSystems.hanidec) !== -1) {
                value1 += hanidecChars.indexOf(str1[i1]);
            } else {
                for(const key1 in numberingSystemsUTF16){
                    const [min1, max1] = numberingSystemsUTF16[key1];
                    if (code1 >= min1 && code1 <= max1) {
                        value1 += code1 - min1;
                    }
                }
            }
        }
        return parseInt(value1, 10);
    } else {
        return value1;
    }
}
function digitRegex({ numberingSystem: numberingSystem1 }, append1 = "") {
    return new RegExp(`${numberingSystems[numberingSystem1 || "latn"]}${append1}`);
}
const MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";
function intUnit(regex1, post1 = (i1)=>i1) {
    return {
        regex: regex1,
        deser: ([s1])=>post1(parseDigits(s1))
    };
}
const NBSP = String.fromCharCode(160);
const spaceOrNBSP = `[ ${NBSP}]`;
const spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");
function fixListRegex(s1) {
    // make dots optional and also make them literal
    // make space and non breakable space characters interchangeable
    return s1.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
}
function stripInsensitivities(s1) {
    return s1.replace(/\./g, "") // ignore dots that were made optional
    .replace(spaceOrNBSPRegExp, " ") // interchange space and nbsp
    .toLowerCase();
}
function oneOf(strings1, startIndex1) {
    if (strings1 === null) {
        return null;
    } else {
        return {
            regex: RegExp(strings1.map(fixListRegex).join("|")),
            deser: ([s1])=>strings1.findIndex((i1)=>stripInsensitivities(s1) === stripInsensitivities(i1)) + startIndex1
        };
    }
}
function offset(regex1, groups1) {
    return {
        regex: regex1,
        deser: ([, h1, m1])=>signedOffset(h1, m1),
        groups: groups1
    };
}
function simple(regex1) {
    return {
        regex: regex1,
        deser: ([s1])=>s1
    };
}
function escapeToken(value1) {
    return value1.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}
function unitForToken(token1, loc1) {
    const one1 = digitRegex(loc1), two1 = digitRegex(loc1, "{2}"), three1 = digitRegex(loc1, "{3}"), four1 = digitRegex(loc1, "{4}"), six1 = digitRegex(loc1, "{6}"), oneOrTwo1 = digitRegex(loc1, "{1,2}"), oneToThree1 = digitRegex(loc1, "{1,3}"), oneToSix1 = digitRegex(loc1, "{1,6}"), oneToNine1 = digitRegex(loc1, "{1,9}"), twoToFour1 = digitRegex(loc1, "{2,4}"), fourToSix1 = digitRegex(loc1, "{4,6}"), literal1 = (t5)=>({
            regex: RegExp(escapeToken(t5.val)),
            deser: ([s1])=>s1,
            literal: true
        }), unitate1 = (t5)=>{
        if (token1.literal) {
            return literal1(t5);
        }
        switch(t5.val){
            // era
            case "G":
                return oneOf(loc1.eras("short", false), 0);
            case "GG":
                return oneOf(loc1.eras("long", false), 0);
            // years
            case "y":
                return intUnit(oneToSix1);
            case "yy":
                return intUnit(twoToFour1, untruncateYear);
            case "yyyy":
                return intUnit(four1);
            case "yyyyy":
                return intUnit(fourToSix1);
            case "yyyyyy":
                return intUnit(six1);
            // months
            case "M":
                return intUnit(oneOrTwo1);
            case "MM":
                return intUnit(two1);
            case "MMM":
                return oneOf(loc1.months("short", true, false), 1);
            case "MMMM":
                return oneOf(loc1.months("long", true, false), 1);
            case "L":
                return intUnit(oneOrTwo1);
            case "LL":
                return intUnit(two1);
            case "LLL":
                return oneOf(loc1.months("short", false, false), 1);
            case "LLLL":
                return oneOf(loc1.months("long", false, false), 1);
            // dates
            case "d":
                return intUnit(oneOrTwo1);
            case "dd":
                return intUnit(two1);
            // ordinals
            case "o":
                return intUnit(oneToThree1);
            case "ooo":
                return intUnit(three1);
            // time
            case "HH":
                return intUnit(two1);
            case "H":
                return intUnit(oneOrTwo1);
            case "hh":
                return intUnit(two1);
            case "h":
                return intUnit(oneOrTwo1);
            case "mm":
                return intUnit(two1);
            case "m":
                return intUnit(oneOrTwo1);
            case "q":
                return intUnit(oneOrTwo1);
            case "qq":
                return intUnit(two1);
            case "s":
                return intUnit(oneOrTwo1);
            case "ss":
                return intUnit(two1);
            case "S":
                return intUnit(oneToThree1);
            case "SSS":
                return intUnit(three1);
            case "u":
                return simple(oneToNine1);
            case "uu":
                return simple(oneOrTwo1);
            case "uuu":
                return intUnit(one1);
            // meridiem
            case "a":
                return oneOf(loc1.meridiems(), 0);
            // weekYear (k)
            case "kkkk":
                return intUnit(four1);
            case "kk":
                return intUnit(twoToFour1, untruncateYear);
            // weekNumber (W)
            case "W":
                return intUnit(oneOrTwo1);
            case "WW":
                return intUnit(two1);
            // weekdays
            case "E":
            case "c":
                return intUnit(one1);
            case "EEE":
                return oneOf(loc1.weekdays("short", false, false), 1);
            case "EEEE":
                return oneOf(loc1.weekdays("long", false, false), 1);
            case "ccc":
                return oneOf(loc1.weekdays("short", true, false), 1);
            case "cccc":
                return oneOf(loc1.weekdays("long", true, false), 1);
            // offset/zone
            case "Z":
            case "ZZ":
                return offset(new RegExp(`([+-]${oneOrTwo1.source})(?::(${two1.source}))?`), 2);
            case "ZZZ":
                return offset(new RegExp(`([+-]${oneOrTwo1.source})(${two1.source})?`), 2);
            // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
            // because we don't have any way to figure out what they are
            case "z":
                return simple(/[a-z_+-/]{1,256}?/i);
            default:
                return literal1(t5);
        }
    };
    const unit1 = unitate1(token1) || {
        invalidReason: MISSING_FTP
    };
    unit1.token = token1;
    return unit1;
}
const partTypeStyleToTokenVal = {
    year: {
        "2-digit": "yy",
        numeric: "yyyyy"
    },
    month: {
        numeric: "M",
        "2-digit": "MM",
        short: "MMM",
        long: "MMMM"
    },
    day: {
        numeric: "d",
        "2-digit": "dd"
    },
    weekday: {
        short: "EEE",
        long: "EEEE"
    },
    dayperiod: "a",
    dayPeriod: "a",
    hour: {
        numeric: "h",
        "2-digit": "hh"
    },
    minute: {
        numeric: "m",
        "2-digit": "mm"
    },
    second: {
        numeric: "s",
        "2-digit": "ss"
    },
    timeZoneName: {
        long: "ZZZZZ",
        short: "ZZZ"
    }
};
function tokenForPart(part1, formatOpts1) {
    const { type: type1, value: value1 } = part1;
    if (type1 === "literal") {
        return {
            literal: true,
            val: value1
        };
    }
    const style1 = formatOpts1[type1];
    let val3 = partTypeStyleToTokenVal[type1];
    if (typeof val3 === "object") {
        val3 = val3[style1];
    }
    if (val3) {
        return {
            literal: false,
            val: val3
        };
    }
    return undefined;
}
function buildRegex(units1) {
    const re1 = units1.map((u1)=>u1.regex).reduce((f3, r4)=>`${f3}(${r4.source})`, "");
    return [
        `^${re1}$`,
        units1
    ];
}
function match(input1, regex1, handlers1) {
    const matches1 = input1.match(regex1);
    if (matches1) {
        const all1 = {};
        let matchIndex1 = 1;
        for(const i1 in handlers1){
            if (hasOwnProperty(handlers1, i1)) {
                const h1 = handlers1[i1], groups1 = h1.groups ? h1.groups + 1 : 1;
                if (!h1.literal && h1.token) {
                    all1[h1.token.val[0]] = h1.deser(matches1.slice(matchIndex1, matchIndex1 + groups1));
                }
                matchIndex1 += groups1;
            }
        }
        return [
            matches1,
            all1
        ];
    } else {
        return [
            matches1,
            {}
        ];
    }
}
function dateTimeFromMatches(matches1) {
    const toField1 = (token1)=>{
        switch(token1){
            case "S":
                return "millisecond";
            case "s":
                return "second";
            case "m":
                return "minute";
            case "h":
            case "H":
                return "hour";
            case "d":
                return "day";
            case "o":
                return "ordinal";
            case "L":
            case "M":
                return "month";
            case "y":
                return "year";
            case "E":
            case "c":
                return "weekday";
            case "W":
                return "weekNumber";
            case "k":
                return "weekYear";
            case "q":
                return "quarter";
            default:
                return null;
        }
    };
    let zone1 = null;
    let specificOffset1;
    if (!isUndefined(matches1.z)) {
        zone1 = IANAZone.create(matches1.z);
    }
    if (!isUndefined(matches1.Z)) {
        if (!zone1) {
            zone1 = new FixedOffsetZone(matches1.Z);
        }
        specificOffset1 = matches1.Z;
    }
    if (!isUndefined(matches1.q)) {
        matches1.M = (matches1.q - 1) * 3 + 1;
    }
    if (!isUndefined(matches1.h)) {
        if (matches1.h < 12 && matches1.a === 1) {
            matches1.h += 12;
        } else if (matches1.h === 12 && matches1.a === 0) {
            matches1.h = 0;
        }
    }
    if (matches1.G === 0 && matches1.y) {
        matches1.y = -matches1.y;
    }
    if (!isUndefined(matches1.u)) {
        matches1.S = parseMillis(matches1.u);
    }
    const vals1 = Object.keys(matches1).reduce((r4, k3)=>{
        const f3 = toField1(k3);
        if (f3) {
            r4[f3] = matches1[k3];
        }
        return r4;
    }, {});
    return [
        vals1,
        zone1,
        specificOffset1
    ];
}
let dummyDateTimeCache = null;
function getDummyDateTime() {
    if (!dummyDateTimeCache) {
        dummyDateTimeCache = DateTime.fromMillis(1555555555555);
    }
    return dummyDateTimeCache;
}
function maybeExpandMacroToken(token1, locale1) {
    if (token1.literal) {
        return token1;
    }
    const formatOpts1 = Formatter.macroTokenToFormatOpts(token1.val);
    const tokens1 = formatOptsToTokens(formatOpts1, locale1);
    if (tokens1 == null || tokens1.includes(undefined)) {
        return token1;
    }
    return tokens1;
}
function expandMacroTokens(tokens1, locale1) {
    return Array.prototype.concat(...tokens1.map((t5)=>maybeExpandMacroToken(t5, locale1)));
}
/**
 * @private
 */ function explainFromTokens(locale1, input1, format1) {
    const tokens1 = expandMacroTokens(Formatter.parseFormat(format1), locale1), units1 = tokens1.map((t5)=>unitForToken(t5, locale1)), disqualifyingUnit1 = units1.find((t5)=>t5.invalidReason);
    if (disqualifyingUnit1) {
        return {
            input: input1,
            tokens: tokens1,
            invalidReason: disqualifyingUnit1.invalidReason
        };
    } else {
        const [regexString1, handlers1] = buildRegex(units1), regex1 = RegExp(regexString1, "i"), [rawMatches1, matches1] = match(input1, regex1, handlers1), [result1, zone1, specificOffset1] = matches1 ? dateTimeFromMatches(matches1) : [
            null,
            null,
            undefined
        ];
        if (hasOwnProperty(matches1, "a") && hasOwnProperty(matches1, "H")) {
            throw new ConflictingSpecificationError("Can't include meridiem when specifying 24-hour format");
        }
        return {
            input: input1,
            tokens: tokens1,
            regex: regex1,
            rawMatches: rawMatches1,
            matches: matches1,
            result: result1,
            zone: zone1,
            specificOffset: specificOffset1
        };
    }
}
function parseFromTokens(locale1, input1, format1) {
    const { result: result1, zone: zone1, specificOffset: specificOffset1, invalidReason: invalidReason1 } = explainFromTokens(locale1, input1, format1);
    return [
        result1,
        zone1,
        specificOffset1,
        invalidReason1
    ];
}
function formatOptsToTokens(formatOpts1, locale1) {
    if (!formatOpts1) {
        return null;
    }
    const formatter1 = Formatter.create(locale1, formatOpts1);
    const parts1 = formatter1.formatDateTimeParts(getDummyDateTime());
    return parts1.map((p3)=>tokenForPart(p3, formatOpts1));
}
const nonLeapLadder = [
    0,
    31,
    59,
    90,
    120,
    151,
    181,
    212,
    243,
    273,
    304,
    334
], leapLadder = [
    0,
    31,
    60,
    91,
    121,
    152,
    182,
    213,
    244,
    274,
    305,
    335
];
function unitOutOfRange(unit1, value1) {
    return new Invalid("unit out of range", `you specified ${value1} (of type ${typeof value1}) as a ${unit1}, which is invalid`);
}
function dayOfWeek(year1, month1, day1) {
    const d1 = new Date(Date.UTC(year1, month1 - 1, day1));
    if (year1 < 100 && year1 >= 0) {
        d1.setUTCFullYear(d1.getUTCFullYear() - 1900);
    }
    const js1 = d1.getUTCDay();
    return js1 === 0 ? 7 : js1;
}
function computeOrdinal(year1, month1, day1) {
    return day1 + (isLeapYear(year1) ? leapLadder : nonLeapLadder)[month1 - 1];
}
function uncomputeOrdinal(year1, ordinal1) {
    const table1 = isLeapYear(year1) ? leapLadder : nonLeapLadder, month01 = table1.findIndex((i1)=>i1 < ordinal1), day1 = ordinal1 - table1[month01];
    return {
        month: month01 + 1,
        day: day1
    };
}
/**
 * @private
 */ function gregorianToWeek(gregObj1) {
    const { year: year1, month: month1, day: day1 } = gregObj1, ordinal1 = computeOrdinal(year1, month1, day1), weekday1 = dayOfWeek(year1, month1, day1);
    let weekNumber1 = Math.floor((ordinal1 - weekday1 + 10) / 7), weekYear1;
    if (weekNumber1 < 1) {
        weekYear1 = year1 - 1;
        weekNumber1 = weeksInWeekYear(weekYear1);
    } else if (weekNumber1 > weeksInWeekYear(year1)) {
        weekYear1 = year1 + 1;
        weekNumber1 = 1;
    } else {
        weekYear1 = year1;
    }
    return {
        weekYear: weekYear1,
        weekNumber: weekNumber1,
        weekday: weekday1,
        ...timeObject(gregObj1)
    };
}
function weekToGregorian(weekData1) {
    const { weekYear: weekYear1, weekNumber: weekNumber1, weekday: weekday1 } = weekData1, weekdayOfJan41 = dayOfWeek(weekYear1, 1, 4), yearInDays1 = daysInYear(weekYear1);
    let ordinal1 = weekNumber1 * 7 + weekday1 - weekdayOfJan41 - 3, year1;
    if (ordinal1 < 1) {
        year1 = weekYear1 - 1;
        ordinal1 += daysInYear(year1);
    } else if (ordinal1 > yearInDays1) {
        year1 = weekYear1 + 1;
        ordinal1 -= daysInYear(weekYear1);
    } else {
        year1 = weekYear1;
    }
    const { month: month1, day: day1 } = uncomputeOrdinal(year1, ordinal1);
    return {
        year: year1,
        month: month1,
        day: day1,
        ...timeObject(weekData1)
    };
}
function gregorianToOrdinal(gregData1) {
    const { year: year1, month: month1, day: day1 } = gregData1;
    const ordinal1 = computeOrdinal(year1, month1, day1);
    return {
        year: year1,
        ordinal: ordinal1,
        ...timeObject(gregData1)
    };
}
function ordinalToGregorian(ordinalData1) {
    const { year: year1, ordinal: ordinal1 } = ordinalData1;
    const { month: month1, day: day1 } = uncomputeOrdinal(year1, ordinal1);
    return {
        year: year1,
        month: month1,
        day: day1,
        ...timeObject(ordinalData1)
    };
}
function hasInvalidWeekData(obj1) {
    const validYear1 = isInteger(obj1.weekYear), validWeek1 = integerBetween(obj1.weekNumber, 1, weeksInWeekYear(obj1.weekYear)), validWeekday1 = integerBetween(obj1.weekday, 1, 7);
    if (!validYear1) {
        return unitOutOfRange("weekYear", obj1.weekYear);
    } else if (!validWeek1) {
        return unitOutOfRange("week", obj1.week);
    } else if (!validWeekday1) {
        return unitOutOfRange("weekday", obj1.weekday);
    } else return false;
}
function hasInvalidOrdinalData(obj1) {
    const validYear1 = isInteger(obj1.year), validOrdinal1 = integerBetween(obj1.ordinal, 1, daysInYear(obj1.year));
    if (!validYear1) {
        return unitOutOfRange("year", obj1.year);
    } else if (!validOrdinal1) {
        return unitOutOfRange("ordinal", obj1.ordinal);
    } else return false;
}
function hasInvalidGregorianData(obj1) {
    const validYear1 = isInteger(obj1.year), validMonth1 = integerBetween(obj1.month, 1, 12), validDay1 = integerBetween(obj1.day, 1, daysInMonth(obj1.year, obj1.month));
    if (!validYear1) {
        return unitOutOfRange("year", obj1.year);
    } else if (!validMonth1) {
        return unitOutOfRange("month", obj1.month);
    } else if (!validDay1) {
        return unitOutOfRange("day", obj1.day);
    } else return false;
}
function hasInvalidTimeData(obj1) {
    const { hour: hour1, minute: minute1, second: second1, millisecond: millisecond1 } = obj1;
    const validHour1 = integerBetween(hour1, 0, 23) || hour1 === 24 && minute1 === 0 && second1 === 0 && millisecond1 === 0, validMinute1 = integerBetween(minute1, 0, 59), validSecond1 = integerBetween(second1, 0, 59), validMillisecond1 = integerBetween(millisecond1, 0, 999);
    if (!validHour1) {
        return unitOutOfRange("hour", hour1);
    } else if (!validMinute1) {
        return unitOutOfRange("minute", minute1);
    } else if (!validSecond1) {
        return unitOutOfRange("second", second1);
    } else if (!validMillisecond1) {
        return unitOutOfRange("millisecond", millisecond1);
    } else return false;
}
const INVALID = "Invalid DateTime";
const MAX_DATE = 8.64e15;
function unsupportedZone(zone1) {
    return new Invalid("unsupported zone", `the zone "${zone1.name}" is not supported`);
}
// we cache week data on the DT object and this intermediates the cache
function possiblyCachedWeekData(dt1) {
    if (dt1.weekData === null) {
        dt1.weekData = gregorianToWeek(dt1.c);
    }
    return dt1.weekData;
}
// clone really means, "make a new object with these modifications". all "setters" really use this
// to create a new object while only changing some of the properties
function clone(inst1, alts1) {
    const current1 = {
        ts: inst1.ts,
        zone: inst1.zone,
        c: inst1.c,
        o: inst1.o,
        loc: inst1.loc,
        invalid: inst1.invalid
    };
    return new DateTime({
        ...current1,
        ...alts1,
        old: current1
    });
}
// find the right offset a given local time. The o input is our guess, which determines which
// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)
function fixOffset(localTS1, o4, tz1) {
    // Our UTC time is just a guess because our offset is just a guess
    let utcGuess1 = localTS1 - o4 * 60 * 1000;
    // Test whether the zone matches the offset for this ts
    const o21 = tz1.offset(utcGuess1);
    // If so, offset didn't change and we're done
    if (o4 === o21) {
        return [
            utcGuess1,
            o4
        ];
    }
    // If not, change the ts by the difference in the offset
    utcGuess1 -= (o21 - o4) * 60 * 1000;
    // If that gives us the local time we want, we're done
    const o31 = tz1.offset(utcGuess1);
    if (o21 === o31) {
        return [
            utcGuess1,
            o21
        ];
    }
    // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time
    return [
        localTS1 - Math.min(o21, o31) * 60 * 1000,
        Math.max(o21, o31)
    ];
}
// convert an epoch timestamp into a calendar object with the given offset
function tsToObj(ts1, offset1) {
    ts1 += offset1 * 60 * 1000;
    const d1 = new Date(ts1);
    return {
        year: d1.getUTCFullYear(),
        month: d1.getUTCMonth() + 1,
        day: d1.getUTCDate(),
        hour: d1.getUTCHours(),
        minute: d1.getUTCMinutes(),
        second: d1.getUTCSeconds(),
        millisecond: d1.getUTCMilliseconds()
    };
}
// convert a calendar object to a epoch timestamp
function objToTS(obj1, offset1, zone1) {
    return fixOffset(objToLocalTS(obj1), offset1, zone1);
}
// create a new DT instance by adding a duration, adjusting for DSTs
function adjustTime(inst1, dur1) {
    const oPre1 = inst1.o, year1 = inst1.c.year + Math.trunc(dur1.years), month1 = inst1.c.month + Math.trunc(dur1.months) + Math.trunc(dur1.quarters) * 3, c1 = {
        ...inst1.c,
        year: year1,
        month: month1,
        day: Math.min(inst1.c.day, daysInMonth(year1, month1)) + Math.trunc(dur1.days) + Math.trunc(dur1.weeks) * 7
    }, millisToAdd1 = Duration.fromObject({
        years: dur1.years - Math.trunc(dur1.years),
        quarters: dur1.quarters - Math.trunc(dur1.quarters),
        months: dur1.months - Math.trunc(dur1.months),
        weeks: dur1.weeks - Math.trunc(dur1.weeks),
        days: dur1.days - Math.trunc(dur1.days),
        hours: dur1.hours,
        minutes: dur1.minutes,
        seconds: dur1.seconds,
        milliseconds: dur1.milliseconds
    }).as("milliseconds"), localTS1 = objToLocalTS(c1);
    let [ts1, o4] = fixOffset(localTS1, oPre1, inst1.zone);
    if (millisToAdd1 !== 0) {
        ts1 += millisToAdd1;
        // that could have changed the offset by going over a DST, but we want to keep the ts the same
        o4 = inst1.zone.offset(ts1);
    }
    return {
        ts: ts1,
        o: o4
    };
}
// helper useful in turning the results of parsing into real dates
// by handling the zone options
function parseDataToDateTime(parsed1, parsedZone1, opts1, format1, text1, specificOffset1) {
    const { setZone: setZone1, zone: zone1 } = opts1;
    if (parsed1 && Object.keys(parsed1).length !== 0) {
        const interpretationZone1 = parsedZone1 || zone1, inst1 = DateTime.fromObject(parsed1, {
            ...opts1,
            zone: interpretationZone1,
            specificOffset: specificOffset1
        });
        return setZone1 ? inst1 : inst1.setZone(zone1);
    } else {
        return DateTime.invalid(new Invalid("unparsable", `the input "${text1}" can't be parsed as ${format1}`));
    }
}
// if you want to output a technical format (e.g. RFC 2822), this helper
// helps handle the details
function toTechFormat(dt1, format1, allowZ1 = true) {
    return dt1.isValid ? Formatter.create(Locale.create("en-US"), {
        allowZ: allowZ1,
        forceSimple: true
    }).formatDateTimeFromString(dt1, format1) : null;
}
function toISODate(o4, extended1) {
    const longFormat1 = o4.c.year > 9999 || o4.c.year < 0;
    let c1 = "";
    if (longFormat1 && o4.c.year >= 0) c1 += "+";
    c1 += padStart(o4.c.year, longFormat1 ? 6 : 4);
    if (extended1) {
        c1 += "-";
        c1 += padStart(o4.c.month);
        c1 += "-";
        c1 += padStart(o4.c.day);
    } else {
        c1 += padStart(o4.c.month);
        c1 += padStart(o4.c.day);
    }
    return c1;
}
function toISOTime(o4, extended1, suppressSeconds1, suppressMilliseconds1, includeOffset1, extendedZone1) {
    let c1 = padStart(o4.c.hour);
    if (extended1) {
        c1 += ":";
        c1 += padStart(o4.c.minute);
        if (o4.c.second !== 0 || !suppressSeconds1) {
            c1 += ":";
        }
    } else {
        c1 += padStart(o4.c.minute);
    }
    if (o4.c.second !== 0 || !suppressSeconds1) {
        c1 += padStart(o4.c.second);
        if (o4.c.millisecond !== 0 || !suppressMilliseconds1) {
            c1 += ".";
            c1 += padStart(o4.c.millisecond, 3);
        }
    }
    if (includeOffset1) {
        if (o4.isOffsetFixed && o4.offset === 0 && !extendedZone1) {
            c1 += "Z";
        } else if (o4.o < 0) {
            c1 += "-";
            c1 += padStart(Math.trunc(-o4.o / 60));
            c1 += ":";
            c1 += padStart(Math.trunc(-o4.o % 60));
        } else {
            c1 += "+";
            c1 += padStart(Math.trunc(o4.o / 60));
            c1 += ":";
            c1 += padStart(Math.trunc(o4.o % 60));
        }
    }
    if (extendedZone1) {
        c1 += "[" + o4.zone.ianaName + "]";
    }
    return c1;
}
// defaults for unspecified units in the supported calendars
const defaultUnitValues = {
    month: 1,
    day: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
}, defaultWeekUnitValues = {
    weekNumber: 1,
    weekday: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
}, defaultOrdinalUnitValues = {
    ordinal: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
};
// Units in the supported calendars, sorted by bigness
const orderedUnits = [
    "year",
    "month",
    "day",
    "hour",
    "minute",
    "second",
    "millisecond"
], orderedWeekUnits = [
    "weekYear",
    "weekNumber",
    "weekday",
    "hour",
    "minute",
    "second",
    "millisecond"
], orderedOrdinalUnits = [
    "year",
    "ordinal",
    "hour",
    "minute",
    "second",
    "millisecond"
];
// standardize case and plurality in units
function normalizeUnit(unit1) {
    const normalized1 = {
        year: "year",
        years: "year",
        month: "month",
        months: "month",
        day: "day",
        days: "day",
        hour: "hour",
        hours: "hour",
        minute: "minute",
        minutes: "minute",
        quarter: "quarter",
        quarters: "quarter",
        second: "second",
        seconds: "second",
        millisecond: "millisecond",
        milliseconds: "millisecond",
        weekday: "weekday",
        weekdays: "weekday",
        weeknumber: "weekNumber",
        weeksnumber: "weekNumber",
        weeknumbers: "weekNumber",
        weekyear: "weekYear",
        weekyears: "weekYear",
        ordinal: "ordinal"
    }[unit1.toLowerCase()];
    if (!normalized1) throw new InvalidUnitError(unit1);
    return normalized1;
}
// this is a dumbed down version of fromObject() that runs about 60% faster
// but doesn't do any validation, makes a bunch of assumptions about what units
// are present, and so on.
function quickDT(obj1, opts1) {
    const zone1 = normalizeZone(opts1.zone, Settings.defaultZone), loc1 = Locale.fromObject(opts1), tsNow1 = Settings.now();
    let ts1, o4;
    // assume we have the higher-order units
    if (!isUndefined(obj1.year)) {
        for (const u1 of orderedUnits){
            if (isUndefined(obj1[u1])) {
                obj1[u1] = defaultUnitValues[u1];
            }
        }
        const invalid1 = hasInvalidGregorianData(obj1) || hasInvalidTimeData(obj1);
        if (invalid1) {
            return DateTime.invalid(invalid1);
        }
        const offsetProvis1 = zone1.offset(tsNow1);
        [ts1, o4] = objToTS(obj1, offsetProvis1, zone1);
    } else {
        ts1 = tsNow1;
    }
    return new DateTime({
        ts: ts1,
        zone: zone1,
        loc: loc1,
        o: o4
    });
}
function diffRelative(start1, end1, opts1) {
    const round1 = isUndefined(opts1.round) ? true : opts1.round, format1 = (c1, unit1)=>{
        c1 = roundTo(c1, round1 || opts1.calendary ? 0 : 2, true);
        const formatter1 = end1.loc.clone(opts1).relFormatter(opts1);
        return formatter1.format(c1, unit1);
    }, differ1 = (unit1)=>{
        if (opts1.calendary) {
            if (!end1.hasSame(start1, unit1)) {
                return end1.startOf(unit1).diff(start1.startOf(unit1), unit1).get(unit1);
            } else return 0;
        } else {
            return end1.diff(start1, unit1).get(unit1);
        }
    };
    if (opts1.unit) {
        return format1(differ1(opts1.unit), opts1.unit);
    }
    for (const unit1 of opts1.units){
        const count1 = differ1(unit1);
        if (Math.abs(count1) >= 1) {
            return format1(count1, unit1);
        }
    }
    return format1(start1 > end1 ? -0 : 0, opts1.units[opts1.units.length - 1]);
}
function lastOpts(argList1) {
    let opts1 = {}, args1;
    if (argList1.length > 0 && typeof argList1[argList1.length - 1] === "object") {
        opts1 = argList1[argList1.length - 1];
        args1 = Array.from(argList1).slice(0, argList1.length - 1);
    } else {
        args1 = Array.from(argList1);
    }
    return [
        opts1,
        args1
    ];
}
/**
 * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
 *
 * A DateTime comprises of:
 * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
 * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
 * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
 *
 * Here is a brief overview of the most commonly used functionality it provides:
 *
 * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.
 * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},
 * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.
 * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.
 * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.
 * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.
 * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.
 *
 * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
 */ class DateTime {
    /**
   * @access private
   */ constructor(config1){
        const zone1 = config1.zone || Settings.defaultZone;
        let invalid1 = config1.invalid || (Number.isNaN(config1.ts) ? new Invalid("invalid input") : null) || (!zone1.isValid ? unsupportedZone(zone1) : null);
        /**
     * @access private
     */ this.ts = isUndefined(config1.ts) ? Settings.now() : config1.ts;
        let c1 = null, o4 = null;
        if (!invalid1) {
            const unchanged1 = config1.old && config1.old.ts === this.ts && config1.old.zone.equals(zone1);
            if (unchanged1) {
                [c1, o4] = [
                    config1.old.c,
                    config1.old.o
                ];
            } else {
                const ot1 = zone1.offset(this.ts);
                c1 = tsToObj(this.ts, ot1);
                invalid1 = Number.isNaN(c1.year) ? new Invalid("invalid input") : null;
                c1 = invalid1 ? null : c1;
                o4 = invalid1 ? null : ot1;
            }
        }
        /**
     * @access private
     */ this._zone = zone1;
        /**
     * @access private
     */ this.loc = config1.loc || Locale.create();
        /**
     * @access private
     */ this.invalid = invalid1;
        /**
     * @access private
     */ this.weekData = null;
        /**
     * @access private
     */ this.c = c1;
        /**
     * @access private
     */ this.o = o4;
        /**
     * @access private
     */ this.isLuxonDateTime = true;
    }
    // CONSTRUCT
    /**
   * Create a DateTime for the current instant, in the system's time zone.
   *
   * Use Settings to override these default values if needed.
   * @example DateTime.now().toISO() //~> now in the ISO format
   * @return {DateTime}
   */ static now() {
        return new DateTime({});
    }
    /**
   * Create a local DateTime
   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month, 1-indexed
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @example DateTime.local()                                  //~> now
   * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
   * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
   * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
   * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
   * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
   * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
   * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
   * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
   * @return {DateTime}
   */ static local() {
        const [opts1, args1] = lastOpts(arguments), [year1, month1, day1, hour1, minute1, second1, millisecond1] = args1;
        return quickDT({
            year: year1,
            month: month1,
            day: day1,
            hour: hour1,
            minute: minute1,
            second: second1,
            millisecond: millisecond1
        }, opts1);
    }
    /**
   * Create a DateTime in UTC
   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @param {Object} options - configuration options for the DateTime
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
   * @example DateTime.utc()                                              //~> now
   * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
   * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
   * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
   * @return {DateTime}
   */ static utc() {
        const [opts1, args1] = lastOpts(arguments), [year1, month1, day1, hour1, minute1, second1, millisecond1] = args1;
        opts1.zone = FixedOffsetZone.utcInstance;
        return quickDT({
            year: year1,
            month: month1,
            day: day1,
            hour: hour1,
            minute: minute1,
            second: second1,
            millisecond: millisecond1
        }, opts1);
    }
    /**
   * Create a DateTime from a JavaScript Date object. Uses the default zone.
   * @param {Date} date - a JavaScript Date object
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @return {DateTime}
   */ static fromJSDate(date1, options1 = {}) {
        const ts1 = isDate(date1) ? date1.valueOf() : NaN;
        if (Number.isNaN(ts1)) {
            return DateTime.invalid("invalid input");
        }
        const zoneToUse1 = normalizeZone(options1.zone, Settings.defaultZone);
        if (!zoneToUse1.isValid) {
            return DateTime.invalid(unsupportedZone(zoneToUse1));
        }
        return new DateTime({
            ts: ts1,
            zone: zoneToUse1,
            loc: Locale.fromObject(options1)
        });
    }
    /**
   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} milliseconds - a number of milliseconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */ static fromMillis(milliseconds1, options1 = {}) {
        if (!isNumber(milliseconds1)) {
            throw new InvalidArgumentError(`fromMillis requires a numerical input, but received a ${typeof milliseconds1} with value ${milliseconds1}`);
        } else if (milliseconds1 < -MAX_DATE || milliseconds1 > MAX_DATE) {
            // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start
            return DateTime.invalid("Timestamp out of range");
        } else {
            return new DateTime({
                ts: milliseconds1,
                zone: normalizeZone(options1.zone, Settings.defaultZone),
                loc: Locale.fromObject(options1)
            });
        }
    }
    /**
   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} seconds - a number of seconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */ static fromSeconds(seconds1, options1 = {}) {
        if (!isNumber(seconds1)) {
            throw new InvalidArgumentError("fromSeconds requires a numerical input");
        } else {
            return new DateTime({
                ts: seconds1 * 1000,
                zone: normalizeZone(options1.zone, Settings.defaultZone),
                loc: Locale.fromObject(options1)
            });
        }
    }
    /**
   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.year - a year, such as 1987
   * @param {number} obj.month - a month, 1-12
   * @param {number} obj.day - a day of the month, 1-31, depending on the month
   * @param {number} obj.ordinal - day of the year, 1-365 or 366
   * @param {number} obj.weekYear - an ISO week year
   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
   * @param {number} obj.hour - hour of the day, 0-23
   * @param {number} obj.minute - minute of the hour, 0-59
   * @param {number} obj.second - second of the minute, 0-59
   * @param {number} obj.millisecond - millisecond of the second, 0-999
   * @param {Object} opts - options for creating this DateTime
   * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
   * @return {DateTime}
   */ static fromObject(obj1, opts1 = {}) {
        obj1 = obj1 || {};
        const zoneToUse1 = normalizeZone(opts1.zone, Settings.defaultZone);
        if (!zoneToUse1.isValid) {
            return DateTime.invalid(unsupportedZone(zoneToUse1));
        }
        const tsNow1 = Settings.now(), offsetProvis1 = !isUndefined(opts1.specificOffset) ? opts1.specificOffset : zoneToUse1.offset(tsNow1), normalized1 = normalizeObject(obj1, normalizeUnit), containsOrdinal1 = !isUndefined(normalized1.ordinal), containsGregorYear1 = !isUndefined(normalized1.year), containsGregorMD1 = !isUndefined(normalized1.month) || !isUndefined(normalized1.day), containsGregor1 = containsGregorYear1 || containsGregorMD1, definiteWeekDef1 = normalized1.weekYear || normalized1.weekNumber, loc1 = Locale.fromObject(opts1);
        // cases:
        // just a weekday -> this week's instance of that weekday, no worries
        // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
        // (gregorian month or day) + ordinal -> error
        // otherwise just use weeks or ordinals or gregorian, depending on what's specified
        if ((containsGregor1 || containsOrdinal1) && definiteWeekDef1) {
            throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
        }
        if (containsGregorMD1 && containsOrdinal1) {
            throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        }
        const useWeekData1 = definiteWeekDef1 || normalized1.weekday && !containsGregor1;
        // configure ourselves to deal with gregorian dates or week stuff
        let units1, defaultValues1, objNow1 = tsToObj(tsNow1, offsetProvis1);
        if (useWeekData1) {
            units1 = orderedWeekUnits;
            defaultValues1 = defaultWeekUnitValues;
            objNow1 = gregorianToWeek(objNow1);
        } else if (containsOrdinal1) {
            units1 = orderedOrdinalUnits;
            defaultValues1 = defaultOrdinalUnitValues;
            objNow1 = gregorianToOrdinal(objNow1);
        } else {
            units1 = orderedUnits;
            defaultValues1 = defaultUnitValues;
        }
        // set default values for missing stuff
        let foundFirst1 = false;
        for (const u1 of units1){
            const v4 = normalized1[u1];
            if (!isUndefined(v4)) {
                foundFirst1 = true;
            } else if (foundFirst1) {
                normalized1[u1] = defaultValues1[u1];
            } else {
                normalized1[u1] = objNow1[u1];
            }
        }
        // make sure the values we have are in range
        const higherOrderInvalid1 = useWeekData1 ? hasInvalidWeekData(normalized1) : containsOrdinal1 ? hasInvalidOrdinalData(normalized1) : hasInvalidGregorianData(normalized1), invalid1 = higherOrderInvalid1 || hasInvalidTimeData(normalized1);
        if (invalid1) {
            return DateTime.invalid(invalid1);
        }
        // compute the actual time
        const gregorian1 = useWeekData1 ? weekToGregorian(normalized1) : containsOrdinal1 ? ordinalToGregorian(normalized1) : normalized1, [tsFinal1, offsetFinal1] = objToTS(gregorian1, offsetProvis1, zoneToUse1), inst1 = new DateTime({
            ts: tsFinal1,
            zone: zoneToUse1,
            o: offsetFinal1,
            loc: loc1
        });
        // gregorian data + weekday serves only to validate
        if (normalized1.weekday && containsGregor1 && obj1.weekday !== inst1.weekday) {
            return DateTime.invalid("mismatched weekday", `you can't specify both a weekday of ${normalized1.weekday} and a date of ${inst1.toISO()}`);
        }
        return inst1;
    }
    /**
   * Create a DateTime from an ISO 8601 string
   * @param {string} text - the ISO string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
   * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromISO('2016-05-25T09:08:34.123')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
   * @example DateTime.fromISO('2016-W05-4')
   * @return {DateTime}
   */ static fromISO(text1, opts1 = {}) {
        const [vals1, parsedZone1] = parseISODate(text1);
        return parseDataToDateTime(vals1, parsedZone1, opts1, "ISO 8601", text1);
    }
    /**
   * Create a DateTime from an RFC 2822 string
   * @param {string} text - the RFC 2822 string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
   * @return {DateTime}
   */ static fromRFC2822(text1, opts1 = {}) {
        const [vals1, parsedZone1] = parseRFC2822Date(text1);
        return parseDataToDateTime(vals1, parsedZone1, opts1, "RFC 2822", text1);
    }
    /**
   * Create a DateTime from an HTTP header date
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @param {string} text - the HTTP header date
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
   * @return {DateTime}
   */ static fromHTTP(text1, opts1 = {}) {
        const [vals1, parsedZone1] = parseHTTPDate(text1);
        return parseDataToDateTime(vals1, parsedZone1, opts1, "HTTP", opts1);
    }
    /**
   * Create a DateTime from an input string and format string.
   * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @return {DateTime}
   */ static fromFormat(text1, fmt1, opts1 = {}) {
        if (isUndefined(text1) || isUndefined(fmt1)) {
            throw new InvalidArgumentError("fromFormat requires an input string and a format");
        }
        const { locale: locale1 = null, numberingSystem: numberingSystem1 = null } = opts1, localeToUse1 = Locale.fromOpts({
            locale: locale1,
            numberingSystem: numberingSystem1,
            defaultToEN: true
        }), [vals1, parsedZone1, specificOffset1, invalid1] = parseFromTokens(localeToUse1, text1, fmt1);
        if (invalid1) {
            return DateTime.invalid(invalid1);
        } else {
            return parseDataToDateTime(vals1, parsedZone1, opts1, `format ${fmt1}`, text1, specificOffset1);
        }
    }
    /**
   * @deprecated use fromFormat instead
   */ static fromString(text1, fmt1, opts1 = {}) {
        return DateTime.fromFormat(text1, fmt1, opts1);
    }
    /**
   * Create a DateTime from a SQL date, time, or datetime
   * Defaults to en-US if no locale has been specified, regardless of the system's locale
   * @param {string} text - the string to parse
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @example DateTime.fromSQL('2017-05-15')
   * @example DateTime.fromSQL('2017-05-15 09:12:34')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
   * @example DateTime.fromSQL('09:12:34.342')
   * @return {DateTime}
   */ static fromSQL(text1, opts1 = {}) {
        const [vals1, parsedZone1] = parseSQL(text1);
        return parseDataToDateTime(vals1, parsedZone1, opts1, "SQL", text1);
    }
    /**
   * Create an invalid DateTime.
   * @param {DateTime} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {DateTime}
   */ static invalid(reason1, explanation1 = null) {
        if (!reason1) {
            throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
        }
        const invalid1 = reason1 instanceof Invalid ? reason1 : new Invalid(reason1, explanation1);
        if (Settings.throwOnInvalid) {
            throw new InvalidDateTimeError(invalid1);
        } else {
            return new DateTime({
                invalid: invalid1
            });
        }
    }
    /**
   * Check if an object is an instance of DateTime. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */ static isDateTime(o4) {
        return o4 && o4.isLuxonDateTime || false;
    }
    /**
   * Produce the format string for a set of options
   * @param formatOpts
   * @param localeOpts
   * @returns {string}
   */ static parseFormatForOpts(formatOpts1, localeOpts1 = {}) {
        const tokenList1 = formatOptsToTokens(formatOpts1, Locale.fromObject(localeOpts1));
        return !tokenList1 ? null : tokenList1.map((t5)=>t5 ? t5.val : null).join("");
    }
    /**
   * Produce the the fully expanded format token for the locale
   * Does NOT quote characters, so quoted tokens will not round trip correctly
   * @param fmt
   * @param localeOpts
   * @returns {string}
   */ static expandFormat(fmt1, localeOpts1 = {}) {
        const expanded1 = expandMacroTokens(Formatter.parseFormat(fmt1), Locale.fromObject(localeOpts1));
        return expanded1.map((t5)=>t5.val).join("");
    }
    // INFO
    /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
   * @return {number}
   */ get(unit1) {
        return this[unit1];
    }
    /**
   * Returns whether the DateTime is valid. Invalid DateTimes occur when:
   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
   * * The DateTime was created by an operation on another invalid date
   * @type {boolean}
   */ get isValid() {
        return this.invalid === null;
    }
    /**
   * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
   * @type {string}
   */ get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
    }
    /**
   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
   * @type {string}
   */ get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
    }
    /**
   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
   *
   * @type {string}
   */ get locale() {
        return this.isValid ? this.loc.locale : null;
    }
    /**
   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
   *
   * @type {string}
   */ get numberingSystem() {
        return this.isValid ? this.loc.numberingSystem : null;
    }
    /**
   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
   *
   * @type {string}
   */ get outputCalendar() {
        return this.isValid ? this.loc.outputCalendar : null;
    }
    /**
   * Get the time zone associated with this DateTime.
   * @type {Zone}
   */ get zone() {
        return this._zone;
    }
    /**
   * Get the name of the time zone.
   * @type {string}
   */ get zoneName() {
        return this.isValid ? this.zone.name : null;
    }
    /**
   * Get the year
   * @example DateTime.local(2017, 5, 25).year //=> 2017
   * @type {number}
   */ get year() {
        return this.isValid ? this.c.year : NaN;
    }
    /**
   * Get the quarter
   * @example DateTime.local(2017, 5, 25).quarter //=> 2
   * @type {number}
   */ get quarter() {
        return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
    }
    /**
   * Get the month (1-12).
   * @example DateTime.local(2017, 5, 25).month //=> 5
   * @type {number}
   */ get month() {
        return this.isValid ? this.c.month : NaN;
    }
    /**
   * Get the day of the month (1-30ish).
   * @example DateTime.local(2017, 5, 25).day //=> 25
   * @type {number}
   */ get day() {
        return this.isValid ? this.c.day : NaN;
    }
    /**
   * Get the hour of the day (0-23).
   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
   * @type {number}
   */ get hour() {
        return this.isValid ? this.c.hour : NaN;
    }
    /**
   * Get the minute of the hour (0-59).
   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
   * @type {number}
   */ get minute() {
        return this.isValid ? this.c.minute : NaN;
    }
    /**
   * Get the second of the minute (0-59).
   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
   * @type {number}
   */ get second() {
        return this.isValid ? this.c.second : NaN;
    }
    /**
   * Get the millisecond of the second (0-999).
   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
   * @type {number}
   */ get millisecond() {
        return this.isValid ? this.c.millisecond : NaN;
    }
    /**
   * Get the week year
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
   * @type {number}
   */ get weekYear() {
        return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
    }
    /**
   * Get the week number of the week year (1-52ish).
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
   * @type {number}
   */ get weekNumber() {
        return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
    }
    /**
   * Get the day of the week.
   * 1 is Monday and 7 is Sunday
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2014, 11, 31).weekday //=> 4
   * @type {number}
   */ get weekday() {
        return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
    }
    /**
   * Get the ordinal (meaning the day of the year)
   * @example DateTime.local(2017, 5, 25).ordinal //=> 145
   * @type {number|DateTime}
   */ get ordinal() {
        return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
    }
    /**
   * Get the human readable short month name, such as 'Oct'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
   * @type {string}
   */ get monthShort() {
        return this.isValid ? Info.months("short", {
            locObj: this.loc
        })[this.month - 1] : null;
    }
    /**
   * Get the human readable long month name, such as 'October'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).monthLong //=> October
   * @type {string}
   */ get monthLong() {
        return this.isValid ? Info.months("long", {
            locObj: this.loc
        })[this.month - 1] : null;
    }
    /**
   * Get the human readable short weekday, such as 'Mon'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
   * @type {string}
   */ get weekdayShort() {
        return this.isValid ? Info.weekdays("short", {
            locObj: this.loc
        })[this.weekday - 1] : null;
    }
    /**
   * Get the human readable long weekday, such as 'Monday'.
   * Defaults to the system's locale if no locale has been specified
   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
   * @type {string}
   */ get weekdayLong() {
        return this.isValid ? Info.weekdays("long", {
            locObj: this.loc
        })[this.weekday - 1] : null;
    }
    /**
   * Get the UTC offset of this DateTime in minutes
   * @example DateTime.now().offset //=> -240
   * @example DateTime.utc().offset //=> 0
   * @type {number}
   */ get offset() {
        return this.isValid ? +this.o : NaN;
    }
    /**
   * Get the short human name for the zone's current offset, for example "EST" or "EDT".
   * Defaults to the system's locale if no locale has been specified
   * @type {string}
   */ get offsetNameShort() {
        if (this.isValid) {
            return this.zone.offsetName(this.ts, {
                format: "short",
                locale: this.locale
            });
        } else {
            return null;
        }
    }
    /**
   * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
   * Defaults to the system's locale if no locale has been specified
   * @type {string}
   */ get offsetNameLong() {
        if (this.isValid) {
            return this.zone.offsetName(this.ts, {
                format: "long",
                locale: this.locale
            });
        } else {
            return null;
        }
    }
    /**
   * Get whether this zone's offset ever changes, as in a DST.
   * @type {boolean}
   */ get isOffsetFixed() {
        return this.isValid ? this.zone.isUniversal : null;
    }
    /**
   * Get whether the DateTime is in a DST.
   * @type {boolean}
   */ get isInDST() {
        if (this.isOffsetFixed) {
            return false;
        } else {
            return this.offset > this.set({
                month: 1,
                day: 1
            }).offset || this.offset > this.set({
                month: 5
            }).offset;
        }
    }
    /**
   * Returns true if this DateTime is in a leap year, false otherwise
   * @example DateTime.local(2016).isInLeapYear //=> true
   * @example DateTime.local(2013).isInLeapYear //=> false
   * @type {boolean}
   */ get isInLeapYear() {
        return isLeapYear(this.year);
    }
    /**
   * Returns the number of days in this DateTime's month
   * @example DateTime.local(2016, 2).daysInMonth //=> 29
   * @example DateTime.local(2016, 3).daysInMonth //=> 31
   * @type {number}
   */ get daysInMonth() {
        return daysInMonth(this.year, this.month);
    }
    /**
   * Returns the number of days in this DateTime's year
   * @example DateTime.local(2016).daysInYear //=> 366
   * @example DateTime.local(2013).daysInYear //=> 365
   * @type {number}
   */ get daysInYear() {
        return this.isValid ? daysInYear(this.year) : NaN;
    }
    /**
   * Returns the number of weeks in this DateTime's year
   * @see https://en.wikipedia.org/wiki/ISO_week_date
   * @example DateTime.local(2004).weeksInWeekYear //=> 53
   * @example DateTime.local(2013).weeksInWeekYear //=> 52
   * @type {number}
   */ get weeksInWeekYear() {
        return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
    }
    /**
   * Returns the resolved Intl options for this DateTime.
   * This is useful in understanding the behavior of formatting methods
   * @param {Object} opts - the same options as toLocaleString
   * @return {Object}
   */ resolvedLocaleOptions(opts1 = {}) {
        const { locale: locale1, numberingSystem: numberingSystem1, calendar: calendar1 } = Formatter.create(this.loc.clone(opts1), opts1).resolvedOptions(this);
        return {
            locale: locale1,
            numberingSystem: numberingSystem1,
            outputCalendar: calendar1
        };
    }
    // TRANSFORM
    /**
   * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
   *
   * Equivalent to {@link DateTime#setZone}('utc')
   * @param {number} [offset=0] - optionally, an offset from UTC in minutes
   * @param {Object} [opts={}] - options to pass to `setZone()`
   * @return {DateTime}
   */ toUTC(offset1 = 0, opts1 = {}) {
        return this.setZone(FixedOffsetZone.instance(offset1), opts1);
    }
    /**
   * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
   *
   * Equivalent to `setZone('local')`
   * @return {DateTime}
   */ toLocal() {
        return this.setZone(Settings.defaultZone);
    }
    /**
   * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
   *
   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
   * @param {Object} opts - options
   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
   * @return {DateTime}
   */ setZone(zone1, { keepLocalTime: keepLocalTime1 = false, keepCalendarTime: keepCalendarTime1 = false } = {}) {
        zone1 = normalizeZone(zone1, Settings.defaultZone);
        if (zone1.equals(this.zone)) {
            return this;
        } else if (!zone1.isValid) {
            return DateTime.invalid(unsupportedZone(zone1));
        } else {
            let newTS1 = this.ts;
            if (keepLocalTime1 || keepCalendarTime1) {
                const offsetGuess1 = zone1.offset(this.ts);
                const asObj1 = this.toObject();
                [newTS1] = objToTS(asObj1, offsetGuess1, zone1);
            }
            return clone(this, {
                ts: newTS1,
                zone: zone1
            });
        }
    }
    /**
   * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
   * @param {Object} properties - the properties to set
   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
   * @return {DateTime}
   */ reconfigure({ locale: locale1, numberingSystem: numberingSystem1, outputCalendar: outputCalendar1 } = {}) {
        const loc1 = this.loc.clone({
            locale: locale1,
            numberingSystem: numberingSystem1,
            outputCalendar: outputCalendar1
        });
        return clone(this, {
            loc: loc1
        });
    }
    /**
   * "Set" the locale. Returns a newly-constructed DateTime.
   * Just a convenient alias for reconfigure({ locale })
   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
   * @return {DateTime}
   */ setLocale(locale1) {
        return this.reconfigure({
            locale: locale1
        });
    }
    /**
   * "Set" the values of specified units. Returns a newly-constructed DateTime.
   * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
   * @param {Object} values - a mapping of units to numbers
   * @example dt.set({ year: 2017 })
   * @example dt.set({ hour: 8, minute: 30 })
   * @example dt.set({ weekday: 5 })
   * @example dt.set({ year: 2005, ordinal: 234 })
   * @return {DateTime}
   */ set(values1) {
        if (!this.isValid) return this;
        const normalized1 = normalizeObject(values1, normalizeUnit), settingWeekStuff1 = !isUndefined(normalized1.weekYear) || !isUndefined(normalized1.weekNumber) || !isUndefined(normalized1.weekday), containsOrdinal1 = !isUndefined(normalized1.ordinal), containsGregorYear1 = !isUndefined(normalized1.year), containsGregorMD1 = !isUndefined(normalized1.month) || !isUndefined(normalized1.day), containsGregor1 = containsGregorYear1 || containsGregorMD1, definiteWeekDef1 = normalized1.weekYear || normalized1.weekNumber;
        if ((containsGregor1 || containsOrdinal1) && definiteWeekDef1) {
            throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
        }
        if (containsGregorMD1 && containsOrdinal1) {
            throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        }
        let mixed1;
        if (settingWeekStuff1) {
            mixed1 = weekToGregorian({
                ...gregorianToWeek(this.c),
                ...normalized1
            });
        } else if (!isUndefined(normalized1.ordinal)) {
            mixed1 = ordinalToGregorian({
                ...gregorianToOrdinal(this.c),
                ...normalized1
            });
        } else {
            mixed1 = {
                ...this.toObject(),
                ...normalized1
            };
            // if we didn't set the day but we ended up on an overflow date,
            // use the last day of the right month
            if (isUndefined(normalized1.day)) {
                mixed1.day = Math.min(daysInMonth(mixed1.year, mixed1.month), mixed1.day);
            }
        }
        const [ts1, o4] = objToTS(mixed1, this.o, this.zone);
        return clone(this, {
            ts: ts1,
            o: o4
        });
    }
    /**
   * Add a period of time to this DateTime and return the resulting DateTime
   *
   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @example DateTime.now().plus(123) //~> in 123 milliseconds
   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
   * @return {DateTime}
   */ plus(duration1) {
        if (!this.isValid) return this;
        const dur1 = Duration.fromDurationLike(duration1);
        return clone(this, adjustTime(this, dur1));
    }
    /**
   * Subtract a period of time to this DateTime and return the resulting DateTime
   * See {@link DateTime#plus}
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   @return {DateTime}
   */ minus(duration1) {
        if (!this.isValid) return this;
        const dur1 = Duration.fromDurationLike(duration1).negate();
        return clone(this, adjustTime(this, dur1));
    }
    /**
   * "Set" this DateTime to the beginning of a unit of time.
   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
   * @return {DateTime}
   */ startOf(unit1) {
        if (!this.isValid) return this;
        const o4 = {}, normalizedUnit1 = Duration.normalizeUnit(unit1);
        switch(normalizedUnit1){
            case "years":
                o4.month = 1;
            // falls through
            case "quarters":
            case "months":
                o4.day = 1;
            // falls through
            case "weeks":
            case "days":
                o4.hour = 0;
            // falls through
            case "hours":
                o4.minute = 0;
            // falls through
            case "minutes":
                o4.second = 0;
            // falls through
            case "seconds":
                o4.millisecond = 0;
                break;
        }
        if (normalizedUnit1 === "weeks") {
            o4.weekday = 1;
        }
        if (normalizedUnit1 === "quarters") {
            const q1 = Math.ceil(this.month / 3);
            o4.month = (q1 - 1) * 3 + 1;
        }
        return this.set(o4);
    }
    /**
   * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
   * @return {DateTime}
   */ endOf(unit1) {
        return this.isValid ? this.plus({
            [unit1]: 1
        }).startOf(unit1).minus(1) : this;
    }
    // OUTPUT
    /**
   * Returns a string representation of this DateTime formatted according to the specified format string.
   * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
   * Defaults to en-US if no locale has been specified, regardless of the system's locale.
   * @param {string} fmt - the format string
   * @param {Object} opts - opts to override the configuration options on this DateTime
   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
   * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
   * @return {string}
   */ toFormat(fmt1, opts1 = {}) {
        return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts1)).formatDateTimeFromString(this, fmt1) : INVALID;
    }
    /**
   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
   * of the DateTime in the assigned locale.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
   * @param {Object} opts - opts to override the configuration options on this DateTime
   * @example DateTime.now().toLocaleString(); //=> 4/20/2017
   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
   * @return {string}
   */ toLocaleString(formatOpts1 = DATE_SHORT, opts1 = {}) {
        return this.isValid ? Formatter.create(this.loc.clone(opts1), formatOpts1).formatDateTime(this) : INVALID;
    }
    /**
   * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
   * @example DateTime.now().toLocaleParts(); //=> [
   *                                   //=>   { type: 'day', value: '25' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'month', value: '05' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'year', value: '1982' }
   *                                   //=> ]
   */ toLocaleParts(opts1 = {}) {
        return this.isValid ? Formatter.create(this.loc.clone(opts1), opts1).formatDateTimeParts(this) : [];
    }
    /**
   * Returns an ISO 8601-compliant string representation of this DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
   * @return {string}
   */ toISO({ format: format1 = "extended", suppressSeconds: suppressSeconds1 = false, suppressMilliseconds: suppressMilliseconds1 = false, includeOffset: includeOffset1 = true, extendedZone: extendedZone1 = false } = {}) {
        if (!this.isValid) {
            return null;
        }
        const ext1 = format1 === "extended";
        let c1 = toISODate(this, ext1);
        c1 += "T";
        c1 += toISOTime(this, ext1, suppressSeconds1, suppressMilliseconds1, includeOffset1, extendedZone1);
        return c1;
    }
    /**
   * Returns an ISO 8601-compliant string representation of this DateTime's date component
   * @param {Object} opts - options
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
   * @return {string}
   */ toISODate({ format: format1 = "extended" } = {}) {
        if (!this.isValid) {
            return null;
        }
        return toISODate(this, format1 === "extended");
    }
    /**
   * Returns an ISO 8601-compliant string representation of this DateTime's week date
   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
   * @return {string}
   */ toISOWeekDate() {
        return toTechFormat(this, "kkkk-'W'WW-c");
    }
    /**
   * Returns an ISO 8601-compliant string representation of this DateTime's time component
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
   * @return {string}
   */ toISOTime({ suppressMilliseconds: suppressMilliseconds1 = false, suppressSeconds: suppressSeconds1 = false, includeOffset: includeOffset1 = true, includePrefix: includePrefix1 = false, extendedZone: extendedZone1 = false, format: format1 = "extended" } = {}) {
        if (!this.isValid) {
            return null;
        }
        let c1 = includePrefix1 ? "T" : "";
        return c1 + toISOTime(this, format1 === "extended", suppressSeconds1, suppressMilliseconds1, includeOffset1, extendedZone1);
    }
    /**
   * Returns an RFC 2822-compatible string representation of this DateTime
   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
   * @return {string}
   */ toRFC2822() {
        return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
    }
    /**
   * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
   * Specifically, the string conforms to RFC 1123.
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
   * @return {string}
   */ toHTTP() {
        return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
    }
    /**
   * Returns a string representation of this DateTime appropriate for use in SQL Date
   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
   * @return {string}
   */ toSQLDate() {
        if (!this.isValid) {
            return null;
        }
        return toISODate(this, true);
    }
    /**
   * Returns a string representation of this DateTime appropriate for use in SQL Time
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
   * @example DateTime.utc().toSQL() //=> '05:15:16.345'
   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
   * @return {string}
   */ toSQLTime({ includeOffset: includeOffset1 = true, includeZone: includeZone1 = false, includeOffsetSpace: includeOffsetSpace1 = true } = {}) {
        let fmt1 = "HH:mm:ss.SSS";
        if (includeZone1 || includeOffset1) {
            if (includeOffsetSpace1) {
                fmt1 += " ";
            }
            if (includeZone1) {
                fmt1 += "z";
            } else if (includeOffset1) {
                fmt1 += "ZZ";
            }
        }
        return toTechFormat(this, fmt1, true);
    }
    /**
   * Returns a string representation of this DateTime appropriate for use in SQL DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
   * @return {string}
   */ toSQL(opts1 = {}) {
        if (!this.isValid) {
            return null;
        }
        return `${this.toSQLDate()} ${this.toSQLTime(opts1)}`;
    }
    /**
   * Returns a string representation of this DateTime appropriate for debugging
   * @return {string}
   */ toString() {
        return this.isValid ? this.toISO() : INVALID;
    }
    /**
   * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
   * @return {number}
   */ valueOf() {
        return this.toMillis();
    }
    /**
   * Returns the epoch milliseconds of this DateTime.
   * @return {number}
   */ toMillis() {
        return this.isValid ? this.ts : NaN;
    }
    /**
   * Returns the epoch seconds of this DateTime.
   * @return {number}
   */ toSeconds() {
        return this.isValid ? this.ts / 1000 : NaN;
    }
    /**
   * Returns the epoch seconds (as a whole number) of this DateTime.
   * @return {number}
   */ toUnixInteger() {
        return this.isValid ? Math.floor(this.ts / 1000) : NaN;
    }
    /**
   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
   * @return {string}
   */ toJSON() {
        return this.toISO();
    }
    /**
   * Returns a BSON serializable equivalent to this DateTime.
   * @return {Date}
   */ toBSON() {
        return this.toJSDate();
    }
    /**
   * Returns a JavaScript object with this DateTime's year, month, day, and so on.
   * @param opts - options for generating the object
   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
   * @return {Object}
   */ toObject(opts1 = {}) {
        if (!this.isValid) return {};
        const base1 = {
            ...this.c
        };
        if (opts1.includeConfig) {
            base1.outputCalendar = this.outputCalendar;
            base1.numberingSystem = this.loc.numberingSystem;
            base1.locale = this.loc.locale;
        }
        return base1;
    }
    /**
   * Returns a JavaScript Date equivalent to this DateTime.
   * @return {Date}
   */ toJSDate() {
        return new Date(this.isValid ? this.ts : NaN);
    }
    // COMPARE
    /**
   * Return the difference between two DateTimes as a Duration.
   * @param {DateTime} otherDateTime - the DateTime to compare this one to
   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example
   * var i1 = DateTime.fromISO('1982-05-25T09:45'),
   *     i2 = DateTime.fromISO('1983-10-14T10:30');
   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
   * @return {Duration}
   */ diff(otherDateTime1, unit1 = "milliseconds", opts1 = {}) {
        if (!this.isValid || !otherDateTime1.isValid) {
            return Duration.invalid("created by diffing an invalid DateTime");
        }
        const durOpts1 = {
            locale: this.locale,
            numberingSystem: this.numberingSystem,
            ...opts1
        };
        const units1 = maybeArray(unit1).map(Duration.normalizeUnit), otherIsLater1 = otherDateTime1.valueOf() > this.valueOf(), earlier1 = otherIsLater1 ? this : otherDateTime1, later1 = otherIsLater1 ? otherDateTime1 : this, diffed1 = diff(earlier1, later1, units1, durOpts1);
        return otherIsLater1 ? diffed1.negate() : diffed1;
    }
    /**
   * Return the difference between this DateTime and right now.
   * See {@link DateTime#diff}
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */ diffNow(unit1 = "milliseconds", opts1 = {}) {
        return this.diff(DateTime.now(), unit1, opts1);
    }
    /**
   * Return an Interval spanning between this DateTime and another DateTime
   * @param {DateTime} otherDateTime - the other end point of the Interval
   * @return {Interval}
   */ until(otherDateTime1) {
        return this.isValid ? Interval.fromDateTimes(this, otherDateTime1) : this;
    }
    /**
   * Return whether this DateTime is in the same unit of time as another DateTime.
   * Higher-order units must also be identical for this function to return `true`.
   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
   * @param {DateTime} otherDateTime - the other DateTime
   * @param {string} unit - the unit of time to check sameness on
   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
   * @return {boolean}
   */ hasSame(otherDateTime1, unit1) {
        if (!this.isValid) return false;
        const inputMs1 = otherDateTime1.valueOf();
        const adjustedToZone1 = this.setZone(otherDateTime1.zone, {
            keepLocalTime: true
        });
        return adjustedToZone1.startOf(unit1) <= inputMs1 && inputMs1 <= adjustedToZone1.endOf(unit1);
    }
    /**
   * Equality check
   * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
   * To compare just the millisecond values, use `+dt1 === +dt2`.
   * @param {DateTime} other - the other DateTime
   * @return {boolean}
   */ equals(other1) {
        return this.isValid && other1.isValid && this.valueOf() === other1.valueOf() && this.zone.equals(other1.zone) && this.loc.equals(other1.loc);
    }
    /**
   * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
   * platform supports Intl.RelativeTimeFormat. Rounds down by default.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
   * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
   * @param {boolean} [options.round=true] - whether to round the numbers in the output.
   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
   * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
   */ toRelative(options1 = {}) {
        if (!this.isValid) return null;
        const base1 = options1.base || DateTime.fromObject({}, {
            zone: this.zone
        }), padding1 = options1.padding ? this < base1 ? -options1.padding : options1.padding : 0;
        let units1 = [
            "years",
            "months",
            "days",
            "hours",
            "minutes",
            "seconds"
        ];
        let unit1 = options1.unit;
        if (Array.isArray(options1.unit)) {
            units1 = options1.unit;
            unit1 = undefined;
        }
        return diffRelative(base1, this.plus(padding1), {
            ...options1,
            numeric: "always",
            units: units1,
            unit: unit1
        });
    }
    /**
   * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
   * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
   */ toRelativeCalendar(options1 = {}) {
        if (!this.isValid) return null;
        return diffRelative(options1.base || DateTime.fromObject({}, {
            zone: this.zone
        }), this, {
            ...options1,
            numeric: "auto",
            units: [
                "years",
                "months",
                "days"
            ],
            calendary: true
        });
    }
    /**
   * Return the min of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
   * @return {DateTime} the min DateTime, or undefined if called with no argument
   */ static min(...dateTimes1) {
        if (!dateTimes1.every(DateTime.isDateTime)) {
            throw new InvalidArgumentError("min requires all arguments be DateTimes");
        }
        return bestBy(dateTimes1, (i1)=>i1.valueOf(), Math.min);
    }
    /**
   * Return the max of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
   * @return {DateTime} the max DateTime, or undefined if called with no argument
   */ static max(...dateTimes1) {
        if (!dateTimes1.every(DateTime.isDateTime)) {
            throw new InvalidArgumentError("max requires all arguments be DateTimes");
        }
        return bestBy(dateTimes1, (i1)=>i1.valueOf(), Math.max);
    }
    // MISC
    /**
   * Explain how a string would be parsed by fromFormat()
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see description)
   * @param {Object} options - options taken by fromFormat()
   * @return {Object}
   */ static fromFormatExplain(text1, fmt1, options1 = {}) {
        const { locale: locale1 = null, numberingSystem: numberingSystem1 = null } = options1, localeToUse1 = Locale.fromOpts({
            locale: locale1,
            numberingSystem: numberingSystem1,
            defaultToEN: true
        });
        return explainFromTokens(localeToUse1, text1, fmt1);
    }
    /**
   * @deprecated use fromFormatExplain instead
   */ static fromStringExplain(text1, fmt1, options1 = {}) {
        return DateTime.fromFormatExplain(text1, fmt1, options1);
    }
    // FORMAT PRESETS
    /**
   * {@link DateTime#toLocaleString} format like 10/14/1983
   * @type {Object}
   */ static get DATE_SHORT() {
        return DATE_SHORT;
    }
    /**
   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
   * @type {Object}
   */ static get DATE_MED() {
        return DATE_MED;
    }
    /**
   * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
   * @type {Object}
   */ static get DATE_MED_WITH_WEEKDAY() {
        return DATE_MED_WITH_WEEKDAY;
    }
    /**
   * {@link DateTime#toLocaleString} format like 'October 14, 1983'
   * @type {Object}
   */ static get DATE_FULL() {
        return DATE_FULL;
    }
    /**
   * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
   * @type {Object}
   */ static get DATE_HUGE() {
        return DATE_HUGE;
    }
    /**
   * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */ static get TIME_SIMPLE() {
        return TIME_SIMPLE;
    }
    /**
   * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */ static get TIME_WITH_SECONDS() {
        return TIME_WITH_SECONDS;
    }
    /**
   * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
   * @type {Object}
   */ static get TIME_WITH_SHORT_OFFSET() {
        return TIME_WITH_SHORT_OFFSET;
    }
    /**
   * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
   * @type {Object}
   */ static get TIME_WITH_LONG_OFFSET() {
        return TIME_WITH_LONG_OFFSET;
    }
    /**
   * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
   * @type {Object}
   */ static get TIME_24_SIMPLE() {
        return TIME_24_SIMPLE;
    }
    /**
   * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
   * @type {Object}
   */ static get TIME_24_WITH_SECONDS() {
        return TIME_24_WITH_SECONDS;
    }
    /**
   * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
   * @type {Object}
   */ static get TIME_24_WITH_SHORT_OFFSET() {
        return TIME_24_WITH_SHORT_OFFSET;
    }
    /**
   * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
   * @type {Object}
   */ static get TIME_24_WITH_LONG_OFFSET() {
        return TIME_24_WITH_LONG_OFFSET;
    }
    /**
   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */ static get DATETIME_SHORT() {
        return DATETIME_SHORT;
    }
    /**
   * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */ static get DATETIME_SHORT_WITH_SECONDS() {
        return DATETIME_SHORT_WITH_SECONDS;
    }
    /**
   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */ static get DATETIME_MED() {
        return DATETIME_MED;
    }
    /**
   * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */ static get DATETIME_MED_WITH_SECONDS() {
        return DATETIME_MED_WITH_SECONDS;
    }
    /**
   * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
   * @type {Object}
   */ static get DATETIME_MED_WITH_WEEKDAY() {
        return DATETIME_MED_WITH_WEEKDAY;
    }
    /**
   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
   * @type {Object}
   */ static get DATETIME_FULL() {
        return DATETIME_FULL;
    }
    /**
   * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
   * @type {Object}
   */ static get DATETIME_FULL_WITH_SECONDS() {
        return DATETIME_FULL_WITH_SECONDS;
    }
    /**
   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
   * @type {Object}
   */ static get DATETIME_HUGE() {
        return DATETIME_HUGE;
    }
    /**
   * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
   * @type {Object}
   */ static get DATETIME_HUGE_WITH_SECONDS() {
        return DATETIME_HUGE_WITH_SECONDS;
    }
}
/**
 * @private
 */ function friendlyDateTime(dateTimeish1) {
    if (DateTime.isDateTime(dateTimeish1)) {
        return dateTimeish1;
    } else if (dateTimeish1 && dateTimeish1.valueOf && isNumber(dateTimeish1.valueOf())) {
        return DateTime.fromJSDate(dateTimeish1);
    } else if (dateTimeish1 && typeof dateTimeish1 === "object") {
        return DateTime.fromObject(dateTimeish1);
    } else {
        throw new InvalidArgumentError(`Unknown datetime argument: ${dateTimeish1}, of type ${typeof dateTimeish1}`);
    }
}
const VERSION = "3.2.1";
var Luxon = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    VERSION: VERSION,
    DateTime: DateTime,
    Duration: Duration,
    Interval: Interval,
    Info: Info,
    Zone: Zone,
    FixedOffsetZone: FixedOffsetZone,
    IANAZone: IANAZone,
    InvalidZone: InvalidZone,
    SystemZone: SystemZone,
    Settings: Settings
});
////////////////////
// Query Settings //
////////////////////
const DEFAULT_QUERY_SETTINGS = {
    renderNullAs: "\\-",
    taskCompletionTracking: false,
    taskCompletionUseEmojiShorthand: false,
    taskCompletionText: "completion",
    taskCompletionDateFormat: "yyyy-MM-dd",
    recursiveSubTaskCompletion: false,
    warnOnEmptyResult: true,
    refreshEnabled: true,
    refreshInterval: 2500,
    defaultDateFormat: "MMMM dd, yyyy",
    defaultDateTimeFormat: "h:mm a - MMMM dd, yyyy",
    maxRecursiveRenderDepth: 4,
    tableIdColumnName: "File",
    tableGroupColumnName: "Group",
    showResultCount: true
};
const DEFAULT_EXPORT_SETTINGS = {
    allowHtml: true
};
/** Default settings for dataview on install. */ const DEFAULT_SETTINGS = {
    ...DEFAULT_QUERY_SETTINGS,
    ...DEFAULT_EXPORT_SETTINGS,
    ...{
        inlineQueryPrefix: "=",
        inlineJsQueryPrefix: "$=",
        inlineQueriesInCodeblocks: true,
        enableInlineDataview: true,
        enableDataviewJs: false,
        enableInlineDataviewJs: false,
        prettyRenderInlineFields: true,
        dataviewJsKeyword: "dataviewjs"
    }
};
/** Functional return type for error handling. */ class Success {
    constructor(value1){
        this.value = value1;
        this.successful = true;
    }
    map(f3) {
        return new Success(f3(this.value));
    }
    flatMap(f3) {
        return f3(this.value);
    }
    mapErr(f3) {
        return this;
    }
    bimap(succ1, _fail1) {
        return this.map(succ1);
    }
    orElse(_value1) {
        return this.value;
    }
    cast() {
        return this;
    }
    orElseThrow(_message1) {
        return this.value;
    }
}
/** Functional return type for error handling. */ class Failure {
    constructor(error1){
        this.error = error1;
        this.successful = false;
    }
    map(_f1) {
        return this;
    }
    flatMap(_f1) {
        return this;
    }
    mapErr(f3) {
        return new Failure(f3(this.error));
    }
    bimap(_succ1, fail1) {
        return this.mapErr(fail1);
    }
    orElse(value1) {
        return value1;
    }
    cast() {
        return this;
    }
    orElseThrow(message1) {
        if (message1) throw new Error(message1(this.error));
        else throw new Error("" + this.error);
    }
}
/** Monadic 'Result' type which encapsulates whether a procedure succeeded or failed, as well as it's return value. */ var Result;
(function(Result1) {
    /** Construct a new success result wrapping the given value. */ function success1(value1) {
        return new Success(value1);
    }
    Result1.success = success1;
    /** Construct a new failure value wrapping the given error. */ function failure1(error1) {
        return new Failure(error1);
    }
    Result1.failure = failure1;
    /** Join two results with a bi-function and return a new result. */ function flatMap21(first1, second1, f3) {
        if (first1.successful) {
            if (second1.successful) return f3(first1.value, second1.value);
            else return failure1(second1.error);
        } else {
            return failure1(first1.error);
        }
    }
    Result1.flatMap2 = flatMap21;
    /** Join two results with a bi-function and return a new result. */ function map21(first1, second1, f3) {
        return flatMap21(first1, second1, (a1, b1)=>success1(f3(a1, b1)));
    }
    Result1.map2 = map21;
})(Result || (Result = {}));
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis :  false ? 0 : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function commonjsRequire(path1) {
    throw new Error('Could not dynamically require "' + path1 + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var parsimmon_umd_min = {
    exports: {}
};
(function(module1, exports1) {
    !function(n3, t5) {
        module1.exports = t5();
    }("undefined" != typeof self ? self : commonjsGlobal, function() {
        return function(n3) {
            var t5 = {};
            function r4(e1) {
                if (t5[e1]) return t5[e1].exports;
                var u1 = t5[e1] = {
                    i: e1,
                    l: !1,
                    exports: {}
                };
                return n3[e1].call(u1.exports, u1, u1.exports, r4), u1.l = !0, u1.exports;
            }
            return r4.m = n3, r4.c = t5, r4.d = function(n3, t5, e1) {
                r4.o(n3, t5) || Object.defineProperty(n3, t5, {
                    configurable: !1,
                    enumerable: !0,
                    get: e1
                });
            }, r4.r = function(n3) {
                Object.defineProperty(n3, "__esModule", {
                    value: !0
                });
            }, r4.n = function(n3) {
                var t5 = n3 && n3.__esModule ? function() {
                    return n3.default;
                } : function() {
                    return n3;
                };
                return r4.d(t5, "a", t5), t5;
            }, r4.o = function(n3, t5) {
                return Object.prototype.hasOwnProperty.call(n3, t5);
            }, r4.p = "", r4(r4.s = 0);
        }([
            function(n3, t5, r4) {
                function e1(n3) {
                    if (!(this instanceof e1)) return new e1(n3);
                    this._ = n3;
                }
                var u1 = e1.prototype;
                function o4(n3, t5) {
                    for(var r4 = 0; r4 < n3; r4++)t5(r4);
                }
                function i1(n3, t5, r4) {
                    return function(n3, t5) {
                        o4(t5.length, function(r4) {
                            n3(t5[r4], r4, t5);
                        });
                    }(function(r4, e1, u1) {
                        t5 = n3(t5, r4, e1, u1);
                    }, r4), t5;
                }
                function a1(n3, t5) {
                    return i1(function(t5, r4, e1, u1) {
                        return t5.concat([
                            n3(r4, e1, u1)
                        ]);
                    }, [], t5);
                }
                function f3(n3, t5) {
                    var r4 = {
                        v: 0,
                        buf: t5
                    };
                    return o4(n3, function() {
                        var n3;
                        r4 = {
                            v: r4.v << 1 | (n3 = r4.buf, n3[0] >> 7),
                            buf: function(n3) {
                                var t5 = i1(function(n3, t5, r4, e1) {
                                    return n3.concat(r4 === e1.length - 1 ? Buffer.from([
                                        t5,
                                        0
                                    ]).readUInt16BE(0) : e1.readUInt16BE(r4));
                                }, [], n3);
                                return Buffer.from(a1(function(n3) {
                                    return (n3 << 1 & 65535) >> 8;
                                }, t5));
                            }(r4.buf)
                        };
                    }), r4;
                }
                function c1() {
                    return "undefined" != typeof Buffer;
                }
                function s1() {
                    if (!c1()) throw new Error("Buffer global does not exist; please use webpack if you need to parse Buffers in the browser.");
                }
                function l1(n3) {
                    s1();
                    var t5 = i1(function(n3, t5) {
                        return n3 + t5;
                    }, 0, n3);
                    if (t5 % 8 != 0) throw new Error("The bits [" + n3.join(", ") + "] add up to " + t5 + " which is not an even number of bytes; the total should be divisible by 8");
                    var r4, u1 = t5 / 8, o4 = (r4 = function(n3) {
                        return n3 > 48;
                    }, i1(function(n3, t5) {
                        return n3 || (r4(t5) ? t5 : n3);
                    }, null, n3));
                    if (o4) throw new Error(o4 + " bit range requested exceeds 48 bit (6 byte) Number max.");
                    return new e1(function(t5, r4) {
                        var e1 = u1 + r4;
                        return e1 > t5.length ? x1(r4, u1.toString() + " bytes") : b1(e1, i1(function(n3, t5) {
                            var r4 = f3(t5, n3.buf);
                            return {
                                coll: n3.coll.concat(r4.v),
                                buf: r4.buf
                            };
                        }, {
                            coll: [],
                            buf: t5.slice(r4, e1)
                        }, n3).coll);
                    });
                }
                function h1(n3, t5) {
                    return new e1(function(r4, e1) {
                        return s1(), e1 + t5 > r4.length ? x1(e1, t5 + " bytes for " + n3) : b1(e1 + t5, r4.slice(e1, e1 + t5));
                    });
                }
                function p3(n3, t5) {
                    if ("number" != typeof (r4 = t5) || Math.floor(r4) !== r4 || t5 < 0 || t5 > 6) throw new Error(n3 + " requires integer length in range [0, 6].");
                    var r4;
                }
                function d1(n3) {
                    return p3("uintBE", n3), h1("uintBE(" + n3 + ")", n3).map(function(t5) {
                        return t5.readUIntBE(0, n3);
                    });
                }
                function v4(n3) {
                    return p3("uintLE", n3), h1("uintLE(" + n3 + ")", n3).map(function(t5) {
                        return t5.readUIntLE(0, n3);
                    });
                }
                function g1(n3) {
                    return p3("intBE", n3), h1("intBE(" + n3 + ")", n3).map(function(t5) {
                        return t5.readIntBE(0, n3);
                    });
                }
                function m1(n3) {
                    return p3("intLE", n3), h1("intLE(" + n3 + ")", n3).map(function(t5) {
                        return t5.readIntLE(0, n3);
                    });
                }
                function y1(n3) {
                    return n3 instanceof e1;
                }
                function E1(n3) {
                    return "[object Array]" === ({}).toString.call(n3);
                }
                function w1(n3) {
                    return c1() && Buffer.isBuffer(n3);
                }
                function b1(n3, t5) {
                    return {
                        status: !0,
                        index: n3,
                        value: t5,
                        furthest: -1,
                        expected: []
                    };
                }
                function x1(n3, t5) {
                    return E1(t5) || (t5 = [
                        t5
                    ]), {
                        status: !1,
                        index: -1,
                        value: null,
                        furthest: n3,
                        expected: t5
                    };
                }
                function B1(n3, t5) {
                    if (!t5) return n3;
                    if (n3.furthest > t5.furthest) return n3;
                    var r4 = n3.furthest === t5.furthest ? function(n3, t5) {
                        if (function() {
                            if (void 0 !== e1._supportsSet) return e1._supportsSet;
                            var n3 = "undefined" != typeof Set;
                            return e1._supportsSet = n3, n3;
                        }() && Array.from) {
                            for(var r4 = new Set(n3), u1 = 0; u1 < t5.length; u1++)r4.add(t5[u1]);
                            var o4 = Array.from(r4);
                            return o4.sort(), o4;
                        }
                        for(var i1 = {}, a1 = 0; a1 < n3.length; a1++)i1[n3[a1]] = !0;
                        for(var f3 = 0; f3 < t5.length; f3++)i1[t5[f3]] = !0;
                        var c1 = [];
                        for(var s1 in i1)({}).hasOwnProperty.call(i1, s1) && c1.push(s1);
                        return c1.sort(), c1;
                    }(n3.expected, t5.expected) : t5.expected;
                    return {
                        status: n3.status,
                        index: n3.index,
                        value: n3.value,
                        furthest: t5.furthest,
                        expected: r4
                    };
                }
                var j1 = {};
                function S1(n3, t5) {
                    if (w1(n3)) return {
                        offset: t5,
                        line: -1,
                        column: -1
                    };
                    n3 in j1 || (j1[n3] = {});
                    for(var r4 = j1[n3], e1 = 0, u1 = 0, o4 = 0, i1 = t5; i1 >= 0;){
                        if (i1 in r4) {
                            e1 = r4[i1].line, 0 === o4 && (o4 = r4[i1].lineStart);
                            break;
                        }
                        ("\n" === n3.charAt(i1) || "\r" === n3.charAt(i1) && "\n" !== n3.charAt(i1 + 1)) && (u1++, 0 === o4 && (o4 = i1 + 1)), i1--;
                    }
                    var a1 = e1 + u1, f3 = t5 - o4;
                    return r4[t5] = {
                        line: a1,
                        lineStart: o4
                    }, {
                        offset: t5,
                        line: a1 + 1,
                        column: f3 + 1
                    };
                }
                function _5(n3) {
                    if (!y1(n3)) throw new Error("not a parser: " + n3);
                }
                function L1(n3, t5) {
                    return "string" == typeof n3 ? n3.charAt(t5) : n3[t5];
                }
                function O1(n3) {
                    if ("number" != typeof n3) throw new Error("not a number: " + n3);
                }
                function k3(n3) {
                    if ("function" != typeof n3) throw new Error("not a function: " + n3);
                }
                function P1(n3) {
                    if ("string" != typeof n3) throw new Error("not a string: " + n3);
                }
                var q1 = 2, A1 = 3, I1 = 8, F1 = 5 * I1, M1 = 4 * I1, z1 = "  ";
                function R1(n3, t5) {
                    return new Array(t5 + 1).join(n3);
                }
                function U1(n3, t5, r4) {
                    var e1 = t5 - n3.length;
                    return e1 <= 0 ? n3 : R1(r4, e1) + n3;
                }
                function W1(n3, t5, r4, e1) {
                    return {
                        from: n3 - t5 > 0 ? n3 - t5 : 0,
                        to: n3 + r4 > e1 ? e1 : n3 + r4
                    };
                }
                function D1(n3, t5) {
                    var r4, e1, u1, o4, f3, c1 = t5.index, s1 = c1.offset, l1 = 1;
                    if (s1 === n3.length) return "Got the end of the input";
                    if (w1(n3)) {
                        var h1 = s1 - s1 % I1, p3 = s1 - h1, d1 = W1(h1, F1, M1 + I1, n3.length), v4 = a1(function(n3) {
                            return a1(function(n3) {
                                return U1(n3.toString(16), 2, "0");
                            }, n3);
                        }, function(n3, t5) {
                            var r4 = n3.length, e1 = [], u1 = 0;
                            if (r4 <= t5) return [
                                n3.slice()
                            ];
                            for(var o4 = 0; o4 < r4; o4++)e1[u1] || e1.push([]), e1[u1].push(n3[o4]), (o4 + 1) % t5 == 0 && u1++;
                            return e1;
                        }(n3.slice(d1.from, d1.to).toJSON().data, I1));
                        o4 = function(n3) {
                            return 0 === n3.from && 1 === n3.to ? {
                                from: n3.from,
                                to: n3.to
                            } : {
                                from: n3.from / I1,
                                to: Math.floor(n3.to / I1)
                            };
                        }(d1), e1 = h1 / I1, r4 = 3 * p3, p3 >= 4 && (r4 += 1), l1 = 2, u1 = a1(function(n3) {
                            return n3.length <= 4 ? n3.join(" ") : n3.slice(0, 4).join(" ") + "  " + n3.slice(4).join(" ");
                        }, v4), (f3 = (8 * (o4.to > 0 ? o4.to - 1 : o4.to)).toString(16).length) < 2 && (f3 = 2);
                    } else {
                        var g1 = n3.split(/\r\n|[\n\r\u2028\u2029]/);
                        r4 = c1.column - 1, e1 = c1.line - 1, o4 = W1(e1, q1, A1, g1.length), u1 = g1.slice(o4.from, o4.to), f3 = o4.to.toString().length;
                    }
                    var m1 = e1 - o4.from;
                    return w1(n3) && (f3 = (8 * (o4.to > 0 ? o4.to - 1 : o4.to)).toString(16).length) < 2 && (f3 = 2), i1(function(t5, e1, u1) {
                        var i1, a1 = u1 === m1, c1 = a1 ? "> " : z1;
                        return i1 = w1(n3) ? U1((8 * (o4.from + u1)).toString(16), f3, "0") : U1((o4.from + u1 + 1).toString(), f3, " "), [].concat(t5, [
                            c1 + i1 + " | " + e1
                        ], a1 ? [
                            z1 + R1(" ", f3) + " | " + U1("", r4, " ") + R1("^", l1)
                        ] : []);
                    }, [], u1).join("\n");
                }
                function N1(n3, t5) {
                    return [
                        "\n",
                        "-- PARSING FAILED " + R1("-", 50),
                        "\n\n",
                        D1(n3, t5),
                        "\n\n",
                        (r4 = t5.expected, 1 === r4.length ? "Expected:\n\n" + r4[0] : "Expected one of the following: \n\n" + r4.join(", ")),
                        "\n"
                    ].join("");
                    var r4;
                }
                function G1(n3) {
                    return void 0 !== n3.flags ? n3.flags : [
                        n3.global ? "g" : "",
                        n3.ignoreCase ? "i" : "",
                        n3.multiline ? "m" : "",
                        n3.unicode ? "u" : "",
                        n3.sticky ? "y" : ""
                    ].join("");
                }
                function C1() {
                    for(var n3 = [].slice.call(arguments), t5 = n3.length, r4 = 0; r4 < t5; r4 += 1)_5(n3[r4]);
                    return e1(function(r4, e1) {
                        for(var u1, o4 = new Array(t5), i1 = 0; i1 < t5; i1 += 1){
                            if (!(u1 = B1(n3[i1]._(r4, e1), u1)).status) return u1;
                            o4[i1] = u1.value, e1 = u1.index;
                        }
                        return B1(b1(e1, o4), u1);
                    });
                }
                function J1() {
                    var n3 = [].slice.call(arguments);
                    if (0 === n3.length) throw new Error("seqMap needs at least one argument");
                    var t5 = n3.pop();
                    return k3(t5), C1.apply(null, n3).map(function(n3) {
                        return t5.apply(null, n3);
                    });
                }
                function T1() {
                    var n3 = [].slice.call(arguments), t5 = n3.length;
                    if (0 === t5) return Y1("zero alternates");
                    for(var r4 = 0; r4 < t5; r4 += 1)_5(n3[r4]);
                    return e1(function(t5, r4) {
                        for(var e1, u1 = 0; u1 < n3.length; u1 += 1)if ((e1 = B1(n3[u1]._(t5, r4), e1)).status) return e1;
                        return e1;
                    });
                }
                function V1(n3, t5) {
                    return H1(n3, t5).or(X1([]));
                }
                function H1(n3, t5) {
                    return _5(n3), _5(t5), J1(n3, t5.then(n3).many(), function(n3, t5) {
                        return [
                            n3
                        ].concat(t5);
                    });
                }
                function K1(n3) {
                    P1(n3);
                    var t5 = "'" + n3 + "'";
                    return e1(function(r4, e1) {
                        var u1 = e1 + n3.length, o4 = r4.slice(e1, u1);
                        return o4 === n3 ? b1(u1, o4) : x1(e1, t5);
                    });
                }
                function Q1(n3, t5) {
                    !function(n3) {
                        if (!(n3 instanceof RegExp)) throw new Error("not a regexp: " + n3);
                        for(var t5 = G1(n3), r4 = 0; r4 < t5.length; r4++){
                            var e1 = t5.charAt(r4);
                            if ("i" !== e1 && "m" !== e1 && "u" !== e1 && "s" !== e1) throw new Error('unsupported regexp flag "' + e1 + '": ' + n3);
                        }
                    }(n3), arguments.length >= 2 ? O1(t5) : t5 = 0;
                    var r4 = function(n3) {
                        return RegExp("^(?:" + n3.source + ")", G1(n3));
                    }(n3), u1 = "" + n3;
                    return e1(function(n3, e1) {
                        var o4 = r4.exec(n3.slice(e1));
                        if (o4) {
                            if (0 <= t5 && t5 <= o4.length) {
                                var i1 = o4[0], a1 = o4[t5];
                                return b1(e1 + i1.length, a1);
                            }
                            return x1(e1, "valid match group (0 to " + o4.length + ") in " + u1);
                        }
                        return x1(e1, u1);
                    });
                }
                function X1(n3) {
                    return e1(function(t5, r4) {
                        return b1(r4, n3);
                    });
                }
                function Y1(n3) {
                    return e1(function(t5, r4) {
                        return x1(r4, n3);
                    });
                }
                function Z1(n3) {
                    if (y1(n3)) return e1(function(t5, r4) {
                        var e1 = n3._(t5, r4);
                        return e1.index = r4, e1.value = "", e1;
                    });
                    if ("string" == typeof n3) return Z1(K1(n3));
                    if (n3 instanceof RegExp) return Z1(Q1(n3));
                    throw new Error("not a string, regexp, or parser: " + n3);
                }
                function $1(n3) {
                    return _5(n3), e1(function(t5, r4) {
                        var e1 = n3._(t5, r4), u1 = t5.slice(r4, e1.index);
                        return e1.status ? x1(r4, 'not "' + u1 + '"') : b1(r4, null);
                    });
                }
                function nn1(n3) {
                    return k3(n3), e1(function(t5, r4) {
                        var e1 = L1(t5, r4);
                        return r4 < t5.length && n3(e1) ? b1(r4 + 1, e1) : x1(r4, "a character/byte matching " + n3);
                    });
                }
                function tn1(n3, t5) {
                    arguments.length < 2 && (t5 = n3, n3 = void 0);
                    var r4 = e1(function(n3, e1) {
                        return r4._ = t5()._, r4._(n3, e1);
                    });
                    return n3 ? r4.desc(n3) : r4;
                }
                function rn1() {
                    return Y1("fantasy-land/empty");
                }
                u1.parse = function(n3) {
                    if ("string" != typeof n3 && !w1(n3)) throw new Error(".parse must be called with a string or Buffer as its argument");
                    var t5, r4 = this.skip(an1)._(n3, 0);
                    return t5 = r4.status ? {
                        status: !0,
                        value: r4.value
                    } : {
                        status: !1,
                        index: S1(n3, r4.furthest),
                        expected: r4.expected
                    }, delete j1[n3], t5;
                }, u1.tryParse = function(n3) {
                    var t5 = this.parse(n3);
                    if (t5.status) return t5.value;
                    var r4 = N1(n3, t5), e1 = new Error(r4);
                    throw e1.type = "ParsimmonError", e1.result = t5, e1;
                }, u1.assert = function(n3, t5) {
                    return this.chain(function(r4) {
                        return n3(r4) ? X1(r4) : Y1(t5);
                    });
                }, u1.or = function(n3) {
                    return T1(this, n3);
                }, u1.trim = function(n3) {
                    return this.wrap(n3, n3);
                }, u1.wrap = function(n3, t5) {
                    return J1(n3, this, t5, function(n3, t5) {
                        return t5;
                    });
                }, u1.thru = function(n3) {
                    return n3(this);
                }, u1.then = function(n3) {
                    return _5(n3), C1(this, n3).map(function(n3) {
                        return n3[1];
                    });
                }, u1.many = function() {
                    var n3 = this;
                    return e1(function(t5, r4) {
                        for(var e1 = [], u1 = void 0;;){
                            if (!(u1 = B1(n3._(t5, r4), u1)).status) return B1(b1(r4, e1), u1);
                            if (r4 === u1.index) throw new Error("infinite loop detected in .many() parser --- calling .many() on a parser which can accept zero characters is usually the cause");
                            r4 = u1.index, e1.push(u1.value);
                        }
                    });
                }, u1.tieWith = function(n3) {
                    return P1(n3), this.map(function(t5) {
                        if (function(n3) {
                            if (!E1(n3)) throw new Error("not an array: " + n3);
                        }(t5), t5.length) {
                            P1(t5[0]);
                            for(var r4 = t5[0], e1 = 1; e1 < t5.length; e1++)P1(t5[e1]), r4 += n3 + t5[e1];
                            return r4;
                        }
                        return "";
                    });
                }, u1.tie = function() {
                    return this.tieWith("");
                }, u1.times = function(n3, t5) {
                    var r4 = this;
                    return arguments.length < 2 && (t5 = n3), O1(n3), O1(t5), e1(function(e1, u1) {
                        for(var o4 = [], i1 = void 0, a1 = void 0, f3 = 0; f3 < n3; f3 += 1){
                            if (a1 = B1(i1 = r4._(e1, u1), a1), !i1.status) return a1;
                            u1 = i1.index, o4.push(i1.value);
                        }
                        for(; f3 < t5 && (a1 = B1(i1 = r4._(e1, u1), a1), i1.status); f3 += 1)u1 = i1.index, o4.push(i1.value);
                        return B1(b1(u1, o4), a1);
                    });
                }, u1.result = function(n3) {
                    return this.map(function() {
                        return n3;
                    });
                }, u1.atMost = function(n3) {
                    return this.times(0, n3);
                }, u1.atLeast = function(n3) {
                    return J1(this.times(n3), this.many(), function(n3, t5) {
                        return n3.concat(t5);
                    });
                }, u1.map = function(n3) {
                    k3(n3);
                    var t5 = this;
                    return e1(function(r4, e1) {
                        var u1 = t5._(r4, e1);
                        return u1.status ? B1(b1(u1.index, n3(u1.value)), u1) : u1;
                    });
                }, u1.contramap = function(n3) {
                    k3(n3);
                    var t5 = this;
                    return e1(function(r4, e1) {
                        var u1 = t5.parse(n3(r4.slice(e1)));
                        return u1.status ? b1(e1 + r4.length, u1.value) : u1;
                    });
                }, u1.promap = function(n3, t5) {
                    return k3(n3), k3(t5), this.contramap(n3).map(t5);
                }, u1.skip = function(n3) {
                    return C1(this, n3).map(function(n3) {
                        return n3[0];
                    });
                }, u1.mark = function() {
                    return J1(en1, this, en1, function(n3, t5, r4) {
                        return {
                            start: n3,
                            value: t5,
                            end: r4
                        };
                    });
                }, u1.node = function(n3) {
                    return J1(en1, this, en1, function(t5, r4, e1) {
                        return {
                            name: n3,
                            value: r4,
                            start: t5,
                            end: e1
                        };
                    });
                }, u1.sepBy = function(n3) {
                    return V1(this, n3);
                }, u1.sepBy1 = function(n3) {
                    return H1(this, n3);
                }, u1.lookahead = function(n3) {
                    return this.skip(Z1(n3));
                }, u1.notFollowedBy = function(n3) {
                    return this.skip($1(n3));
                }, u1.desc = function(n3) {
                    E1(n3) || (n3 = [
                        n3
                    ]);
                    var t5 = this;
                    return e1(function(r4, e1) {
                        var u1 = t5._(r4, e1);
                        return u1.status || (u1.expected = n3), u1;
                    });
                }, u1.fallback = function(n3) {
                    return this.or(X1(n3));
                }, u1.ap = function(n3) {
                    return J1(n3, this, function(n3, t5) {
                        return n3(t5);
                    });
                }, u1.chain = function(n3) {
                    var t5 = this;
                    return e1(function(r4, e1) {
                        var u1 = t5._(r4, e1);
                        return u1.status ? B1(n3(u1.value)._(r4, u1.index), u1) : u1;
                    });
                }, u1.concat = u1.or, u1.empty = rn1, u1.of = X1, u1["fantasy-land/ap"] = u1.ap, u1["fantasy-land/chain"] = u1.chain, u1["fantasy-land/concat"] = u1.concat, u1["fantasy-land/empty"] = u1.empty, u1["fantasy-land/of"] = u1.of, u1["fantasy-land/map"] = u1.map;
                var en1 = e1(function(n3, t5) {
                    return b1(t5, S1(n3, t5));
                }), un1 = e1(function(n3, t5) {
                    return t5 >= n3.length ? x1(t5, "any character/byte") : b1(t5 + 1, L1(n3, t5));
                }), on1 = e1(function(n3, t5) {
                    return b1(n3.length, n3.slice(t5));
                }), an1 = e1(function(n3, t5) {
                    return t5 < n3.length ? x1(t5, "EOF") : b1(t5, null);
                }), fn1 = Q1(/[0-9]/).desc("a digit"), cn1 = Q1(/[0-9]*/).desc("optional digits"), sn1 = Q1(/[a-z]/i).desc("a letter"), ln1 = Q1(/[a-z]*/i).desc("optional letters"), hn1 = Q1(/\s*/).desc("optional whitespace"), pn1 = Q1(/\s+/).desc("whitespace"), dn1 = K1("\r"), vn1 = K1("\n"), gn1 = K1("\r\n"), mn1 = T1(gn1, vn1, dn1).desc("newline"), yn1 = T1(mn1, an1);
                e1.all = on1, e1.alt = T1, e1.any = un1, e1.cr = dn1, e1.createLanguage = function(n3) {
                    var t5 = {};
                    for(var r4 in n3)({}).hasOwnProperty.call(n3, r4) && function(r4) {
                        t5[r4] = tn1(function() {
                            return n3[r4](t5);
                        });
                    }(r4);
                    return t5;
                }, e1.crlf = gn1, e1.custom = function(n3) {
                    return e1(n3(b1, x1));
                }, e1.digit = fn1, e1.digits = cn1, e1.empty = rn1, e1.end = yn1, e1.eof = an1, e1.fail = Y1, e1.formatError = N1, e1.index = en1, e1.isParser = y1, e1.lazy = tn1, e1.letter = sn1, e1.letters = ln1, e1.lf = vn1, e1.lookahead = Z1, e1.makeFailure = x1, e1.makeSuccess = b1, e1.newline = mn1, e1.noneOf = function(n3) {
                    return nn1(function(t5) {
                        return n3.indexOf(t5) < 0;
                    }).desc("none of '" + n3 + "'");
                }, e1.notFollowedBy = $1, e1.of = X1, e1.oneOf = function(n3) {
                    for(var t5 = n3.split(""), r4 = 0; r4 < t5.length; r4++)t5[r4] = "'" + t5[r4] + "'";
                    return nn1(function(t5) {
                        return n3.indexOf(t5) >= 0;
                    }).desc(t5);
                }, e1.optWhitespace = hn1, e1.Parser = e1, e1.range = function(n3, t5) {
                    return nn1(function(r4) {
                        return n3 <= r4 && r4 <= t5;
                    }).desc(n3 + "-" + t5);
                }, e1.regex = Q1, e1.regexp = Q1, e1.sepBy = V1, e1.sepBy1 = H1, e1.seq = C1, e1.seqMap = J1, e1.seqObj = function() {
                    for(var n3, t5 = {}, r4 = 0, u1 = (n3 = arguments, Array.prototype.slice.call(n3)), o4 = u1.length, i1 = 0; i1 < o4; i1 += 1){
                        var a1 = u1[i1];
                        if (!y1(a1)) {
                            if (E1(a1) && 2 === a1.length && "string" == typeof a1[0] && y1(a1[1])) {
                                var f3 = a1[0];
                                if (Object.prototype.hasOwnProperty.call(t5, f3)) throw new Error("seqObj: duplicate key " + f3);
                                t5[f3] = !0, r4++;
                                continue;
                            }
                            throw new Error("seqObj arguments must be parsers or [string, parser] array pairs.");
                        }
                    }
                    if (0 === r4) throw new Error("seqObj expects at least one named parser, found zero");
                    return e1(function(n3, t5) {
                        for(var r4, e1 = {}, i1 = 0; i1 < o4; i1 += 1){
                            var a1, f3;
                            if (E1(u1[i1]) ? (a1 = u1[i1][0], f3 = u1[i1][1]) : (a1 = null, f3 = u1[i1]), !(r4 = B1(f3._(n3, t5), r4)).status) return r4;
                            a1 && (e1[a1] = r4.value), t5 = r4.index;
                        }
                        return B1(b1(t5, e1), r4);
                    });
                }, e1.string = K1, e1.succeed = X1, e1.takeWhile = function(n3) {
                    return k3(n3), e1(function(t5, r4) {
                        for(var e1 = r4; e1 < t5.length && n3(L1(t5, e1));)e1++;
                        return b1(e1, t5.slice(r4, e1));
                    });
                }, e1.test = nn1, e1.whitespace = pn1, e1["fantasy-land/empty"] = rn1, e1["fantasy-land/of"] = X1, e1.Binary = {
                    bitSeq: l1,
                    bitSeqObj: function(n3) {
                        s1();
                        var t5 = {}, r4 = 0, e1 = a1(function(n3) {
                            if (E1(n3)) {
                                var e1 = n3;
                                if (2 !== e1.length) throw new Error("[" + e1.join(", ") + "] should be length 2, got length " + e1.length);
                                if (P1(e1[0]), O1(e1[1]), Object.prototype.hasOwnProperty.call(t5, e1[0])) throw new Error("duplicate key in bitSeqObj: " + e1[0]);
                                return t5[e1[0]] = !0, r4++, e1;
                            }
                            return O1(n3), [
                                null,
                                n3
                            ];
                        }, n3);
                        if (r4 < 1) throw new Error("bitSeqObj expects at least one named pair, got [" + n3.join(", ") + "]");
                        var u1 = a1(function(n3) {
                            return n3[0];
                        }, e1);
                        return l1(a1(function(n3) {
                            return n3[1];
                        }, e1)).map(function(n3) {
                            return i1(function(n3, t5) {
                                return null !== t5[0] && (n3[t5[0]] = t5[1]), n3;
                            }, {}, a1(function(t5, r4) {
                                return [
                                    t5,
                                    n3[r4]
                                ];
                            }, u1));
                        });
                    },
                    byte: function(n3) {
                        if (s1(), O1(n3), n3 > 255) throw new Error("Value specified to byte constructor (" + n3 + "=0x" + n3.toString(16) + ") is larger in value than a single byte.");
                        var t5 = (n3 > 15 ? "0x" : "0x0") + n3.toString(16);
                        return e1(function(r4, e1) {
                            var u1 = L1(r4, e1);
                            return u1 === n3 ? b1(e1 + 1, u1) : x1(e1, t5);
                        });
                    },
                    buffer: function(n3) {
                        return h1("buffer", n3).map(function(n3) {
                            return Buffer.from(n3);
                        });
                    },
                    encodedString: function(n3, t5) {
                        return h1("string", t5).map(function(t5) {
                            return t5.toString(n3);
                        });
                    },
                    uintBE: d1,
                    uint8BE: d1(1),
                    uint16BE: d1(2),
                    uint32BE: d1(4),
                    uintLE: v4,
                    uint8LE: v4(1),
                    uint16LE: v4(2),
                    uint32LE: v4(4),
                    intBE: g1,
                    int8BE: g1(1),
                    int16BE: g1(2),
                    int32BE: g1(4),
                    intLE: m1,
                    int8LE: m1(1),
                    int16LE: m1(2),
                    int32LE: m1(4),
                    floatBE: h1("floatBE", 4).map(function(n3) {
                        return n3.readFloatBE(0);
                    }),
                    floatLE: h1("floatLE", 4).map(function(n3) {
                        return n3.readFloatLE(0);
                    }),
                    doubleBE: h1("doubleBE", 8).map(function(n3) {
                        return n3.readDoubleBE(0);
                    }),
                    doubleLE: h1("doubleLE", 8).map(function(n3) {
                        return n3.readDoubleLE(0);
                    })
                }, n3.exports = e1;
            }
        ]);
    });
})(parsimmon_umd_min);
var emojiRegex = ()=>{
    // https://mths.be/emoji
    return /(?:[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26F9(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC3\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDD-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF6](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC2\uDED0-\uDED9\uDEE0-\uDEE7]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?))/g;
};
/** Normalize a duration to all of the proper units. */ function normalizeDuration(dur1) {
    if (dur1 === undefined || dur1 === null) return dur1;
    return dur1.shiftToAll().normalize();
}
/** Strip the time components of a date time object. */ function stripTime(dt1) {
    if (dt1 === null || dt1 === undefined) return dt1;
    return DateTime.fromObject({
        year: dt1.year,
        month: dt1.month,
        day: dt1.day
    });
}
/** Get the folder containing the given path (i.e., like computing 'path/..'). */ function getParentFolder(path1) {
    return path1.split("/").slice(0, -1).join("/");
}
/** Get the "title" for a file, by stripping other parts of the path as well as the extension. */ function getFileTitle(path1) {
    if (path1.includes("/")) path1 = path1.substring(path1.lastIndexOf("/") + 1);
    if (path1.endsWith(".md")) path1 = path1.substring(0, path1.length - 3);
    return path1;
}
/** Get the extension of a file from the file path. */ function getExtension(path1) {
    if (!path1.includes(".")) return "";
    return path1.substring(path1.lastIndexOf(".") + 1);
}
/** Parse all subtags out of the given tag. I.e., #hello/i/am would yield [#hello/i/am, #hello/i, #hello]. */ function extractSubtags(tag1) {
    let result1 = [
        tag1
    ];
    while(tag1.includes("/")){
        tag1 = tag1.substring(0, tag1.lastIndexOf("/"));
        result1.push(tag1);
    }
    return result1;
}
/** Try calling the given function; on failure, return the error message.  */ function tryOrPropogate(func1) {
    try {
        return func1();
    } catch (error1) {
        return Result.failure("" + error1 + "\n\n" + error1.stack);
    }
}
/** Try asynchronously calling the given function; on failure, return the error message. */ async function asyncTryOrPropogate(func1) {
    try {
        return await func1();
    } catch (error1) {
        return Result.failure("" + error1 + "\n\n" + error1.stack);
    }
}
/**
 * Escape regex characters in a string.
 * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions.
 */ function escapeRegex(str1) {
    return str1.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
/** A parsimmon parser which canonicalizes variable names while properly respecting emoji. */ const VAR_NAME_CANONICALIZER = parsimmon_umd_min.exports.alt(parsimmon_umd_min.exports.regex(new RegExp(emojiRegex(), "")), parsimmon_umd_min.exports.regex(/[0-9\p{Letter}_-]+/u).map((str1)=>str1.toLocaleLowerCase()), parsimmon_umd_min.exports.whitespace.map((_5)=>"-"), parsimmon_umd_min.exports.any.map((_5)=>"")).many().map((result1)=>result1.join(""));
/** Convert an arbitrary variable name into something JS/query friendly. */ function canonicalizeVarName(name1) {
    return VAR_NAME_CANONICALIZER.tryParse(name1);
}
const HEADER_CANONICALIZER = parsimmon_umd_min.exports.alt(parsimmon_umd_min.exports.regex(new RegExp(emojiRegex(), "")), parsimmon_umd_min.exports.regex(/[0-9\p{Letter}_-]+/u), parsimmon_umd_min.exports.whitespace.map((_5)=>" "), parsimmon_umd_min.exports.any.map((_5)=>" ")).many().map((result1)=>{
    return result1.join("").split(/\s+/).join(" ").trim();
});
/**
 * Normalizes the text in a header to be something that is actually linkable to. This mimics
 * how Obsidian does it's normalization, collapsing repeated spaces and stripping out control characters.
 */ function normalizeHeaderForLink(header1) {
    return HEADER_CANONICALIZER.tryParse(header1);
}
/** Render a DateTime in a minimal format to save space. */ function renderMinimalDate(time1, settings1, locale1) {
    // If there is no relevant time specified, fall back to just rendering the date.
    if (time1.second == 0 && time1.minute == 0 && time1.hour == 0) {
        return time1.toLocal().toFormat(settings1.defaultDateFormat, {
            locale: locale1
        });
    }
    return time1.toLocal().toFormat(settings1.defaultDateTimeFormat, {
        locale: locale1
    });
}
/** Render a duration in a minimal format to save space. */ function renderMinimalDuration(dur1) {
    dur1 = normalizeDuration(dur1);
    // toHuman outputs zero quantities e.g. "0 seconds"
    dur1 = Duration.fromObject(Object.fromEntries(Object.entries(dur1.toObject()).filter(([, quantity1])=>quantity1 > 0)));
    return dur1.toHuman();
}
/** Determine if two sets are equal in contents. */ function setsEqual(first1, second1) {
    if (first1.size != second1.size) return false;
    for (let elem3 of first1)if (!second1.has(elem3)) return false;
    return true;
}
var Values;
(function(Values1) {
    /** Convert an arbitrary value into a reasonable, Markdown-friendly string if possible. */ function toString1(field1, setting1 = DEFAULT_QUERY_SETTINGS, recursive1 = false) {
        let wrapped1 = wrapValue1(field1);
        if (!wrapped1) return setting1.renderNullAs;
        switch(wrapped1.type){
            case "null":
                return setting1.renderNullAs;
            case "string":
                return wrapped1.value;
            case "number":
            case "boolean":
                return "" + wrapped1.value;
            case "html":
                return wrapped1.value.outerHTML;
            case "widget":
                return wrapped1.value.markdown();
            case "link":
                return wrapped1.value.markdown();
            case "function":
                return "<function>";
            case "array":
                let result1 = "";
                if (recursive1) result1 += "[";
                result1 += wrapped1.value.map((f3)=>toString1(f3, setting1, true)).join(", ");
                if (recursive1) result1 += "]";
                return result1;
            case "object":
                return "{ " + Object.entries(wrapped1.value).map((e1)=>e1[0] + ": " + toString1(e1[1], setting1, true)).join(", ") + " }";
            case "date":
                if (wrapped1.value.second == 0 && wrapped1.value.hour == 0 && wrapped1.value.minute == 0) {
                    return wrapped1.value.toFormat(setting1.defaultDateFormat);
                }
                return wrapped1.value.toFormat(setting1.defaultDateTimeFormat);
            case "duration":
                return renderMinimalDuration(wrapped1.value);
        }
    }
    Values1.toString = toString1;
    /** Wrap a literal value so you can switch on it easily. */ function wrapValue1(val3) {
        if (isNull1(val3)) return {
            type: "null",
            value: val3
        };
        else if (isNumber1(val3)) return {
            type: "number",
            value: val3
        };
        else if (isString1(val3)) return {
            type: "string",
            value: val3
        };
        else if (isBoolean1(val3)) return {
            type: "boolean",
            value: val3
        };
        else if (isDuration1(val3)) return {
            type: "duration",
            value: val3
        };
        else if (isDate1(val3)) return {
            type: "date",
            value: val3
        };
        else if (isWidget1(val3)) return {
            type: "widget",
            value: val3
        };
        else if (isArray1(val3)) return {
            type: "array",
            value: val3
        };
        else if (isLink1(val3)) return {
            type: "link",
            value: val3
        };
        else if (isFunction1(val3)) return {
            type: "function",
            value: val3
        };
        else if (isHtml1(val3)) return {
            type: "html",
            value: val3
        };
        else if (isObject1(val3)) return {
            type: "object",
            value: val3
        };
        else return undefined;
    }
    Values1.wrapValue = wrapValue1;
    /** Recursively map complex objects at the leaves. */ function mapLeaves1(val3, func1) {
        if (isObject1(val3)) {
            let result1 = {};
            for (let [key1, value1] of Object.entries(val3))result1[key1] = mapLeaves1(value1, func1);
            return result1;
        } else if (isArray1(val3)) {
            let result1 = [];
            for (let value1 of val3)result1.push(mapLeaves1(value1, func1));
            return result1;
        } else {
            return func1(val3);
        }
    }
    Values1.mapLeaves = mapLeaves1;
    /** Compare two arbitrary JavaScript values. Produces a total ordering over ANY possible dataview value. */ function compareValue1(val11, val21, linkNormalizer1) {
        var _a1, _b1;
        // Handle undefined/nulls first.
        if (val11 === undefined) val11 = null;
        if (val21 === undefined) val21 = null;
        if (val11 === null && val21 === null) return 0;
        else if (val11 === null) return -1;
        else if (val21 === null) return 1;
        // A non-null value now which we can wrap & compare on.
        let wrap11 = wrapValue1(val11);
        let wrap21 = wrapValue1(val21);
        if (wrap11 === undefined && wrap21 === undefined) return 0;
        else if (wrap11 === undefined) return -1;
        else if (wrap21 === undefined) return 1;
        // Short-circuit on different types or on reference equality.
        if (wrap11.type != wrap21.type) return wrap11.type.localeCompare(wrap21.type);
        if (wrap11.value === wrap21.value) return 0;
        switch(wrap11.type){
            case "string":
                return wrap11.value.localeCompare(wrap21.value);
            case "number":
                if (wrap11.value < wrap21.value) return -1;
                else if (wrap11.value == wrap21.value) return 0;
                return 1;
            case "null":
                return 0;
            case "boolean":
                if (wrap11.value == wrap21.value) return 0;
                else return wrap11.value ? 1 : -1;
            case "link":
                let link11 = wrap11.value;
                let link21 = wrap21.value;
                let normalize1 = linkNormalizer1 !== null && linkNormalizer1 !== void 0 ? linkNormalizer1 : (x1)=>x1;
                // We can't compare by file name or display, since that would break link equality. Compare by path.
                let pathCompare1 = normalize1(link11.path).localeCompare(normalize1(link21.path));
                if (pathCompare1 != 0) return pathCompare1;
                // Then compare by type.
                let typeCompare1 = link11.type.localeCompare(link21.type);
                if (typeCompare1 != 0) return typeCompare1;
                // Then compare by subpath existence.
                if (link11.subpath && !link21.subpath) return 1;
                if (!link11.subpath && link21.subpath) return -1;
                if (!link11.subpath && !link21.subpath) return 0;
                // Since both have a subpath, compare by subpath.
                return ((_a1 = link11.subpath) !== null && _a1 !== void 0 ? _a1 : "").localeCompare((_b1 = link21.subpath) !== null && _b1 !== void 0 ? _b1 : "");
            case "date":
                return wrap11.value < wrap21.value ? -1 : wrap11.value.equals(wrap21.value) ? 0 : 1;
            case "duration":
                return wrap11.value < wrap21.value ? -1 : wrap11.value.equals(wrap21.value) ? 0 : 1;
            case "array":
                let f11 = wrap11.value;
                let f21 = wrap21.value;
                for(let index1 = 0; index1 < Math.min(f11.length, f21.length); index1++){
                    let comp1 = compareValue1(f11[index1], f21[index1]);
                    if (comp1 != 0) return comp1;
                }
                return f11.length - f21.length;
            case "object":
                let o11 = wrap11.value;
                let o21 = wrap21.value;
                let k11 = Array.from(Object.keys(o11));
                let k21 = Array.from(Object.keys(o21));
                k11.sort();
                k21.sort();
                let keyCompare1 = compareValue1(k11, k21);
                if (keyCompare1 != 0) return keyCompare1;
                for (let key1 of k11){
                    let comp1 = compareValue1(o11[key1], o21[key1]);
                    if (comp1 != 0) return comp1;
                }
                return 0;
            case "widget":
            case "html":
            case "function":
                return 0;
        }
    }
    Values1.compareValue = compareValue1;
    /** Find the corresponding Dataveiw type for an arbitrary value. */ function typeOf1(val3) {
        var _a1;
        return (_a1 = wrapValue1(val3)) === null || _a1 === void 0 ? void 0 : _a1.type;
    }
    Values1.typeOf = typeOf1;
    /** Determine if the given value is "truthy" (i.e., is non-null and has data in it). */ function isTruthy1(field1) {
        let wrapped1 = wrapValue1(field1);
        if (!wrapped1) return false;
        switch(wrapped1.type){
            case "number":
                return wrapped1.value != 0;
            case "string":
                return wrapped1.value.length > 0;
            case "boolean":
                return wrapped1.value;
            case "link":
                return !!wrapped1.value.path;
            case "date":
                return wrapped1.value.toMillis() != 0;
            case "duration":
                return wrapped1.value.as("seconds") != 0;
            case "object":
                return Object.keys(wrapped1.value).length > 0;
            case "array":
                return wrapped1.value.length > 0;
            case "null":
                return false;
            case "html":
            case "widget":
            case "function":
                return true;
        }
    }
    Values1.isTruthy = isTruthy1;
    /** Deep copy a field. */ function deepCopy1(field1) {
        if (field1 === null || field1 === undefined) return field1;
        if (Values1.isArray(field1)) {
            return [].concat(field1.map((v4)=>deepCopy1(v4)));
        } else if (Values1.isObject(field1)) {
            let result1 = {};
            for (let [key1, value1] of Object.entries(field1))result1[key1] = deepCopy1(value1);
            return result1;
        } else {
            return field1;
        }
    }
    Values1.deepCopy = deepCopy1;
    function isString1(val3) {
        return typeof val3 == "string";
    }
    Values1.isString = isString1;
    function isNumber1(val3) {
        return typeof val3 == "number";
    }
    Values1.isNumber = isNumber1;
    function isDate1(val3) {
        return val3 instanceof DateTime;
    }
    Values1.isDate = isDate1;
    function isDuration1(val3) {
        return val3 instanceof Duration;
    }
    Values1.isDuration = isDuration1;
    function isNull1(val3) {
        return val3 === null || val3 === undefined;
    }
    Values1.isNull = isNull1;
    function isArray1(val3) {
        return Array.isArray(val3);
    }
    Values1.isArray = isArray1;
    function isBoolean1(val3) {
        return typeof val3 === "boolean";
    }
    Values1.isBoolean = isBoolean1;
    function isLink1(val3) {
        return val3 instanceof Link;
    }
    Values1.isLink = isLink1;
    function isWidget1(val3) {
        return val3 instanceof Widget;
    }
    Values1.isWidget = isWidget1;
    function isHtml1(val3) {
        if (typeof HTMLElement !== "undefined") {
            return val3 instanceof HTMLElement;
        } else {
            return false;
        }
    }
    Values1.isHtml = isHtml1;
    /** Checks if the given value is an object (and not any other dataview-recognized object-like type). */ function isObject1(val3) {
        return typeof val3 == "object" && !isHtml1(val3) && !isWidget1(val3) && !isArray1(val3) && !isDuration1(val3) && !isDate1(val3) && !isLink1(val3) && val3 !== undefined && !isNull1(val3);
    }
    Values1.isObject = isObject1;
    function isFunction1(val3) {
        return typeof val3 == "function";
    }
    Values1.isFunction = isFunction1;
})(Values || (Values = {}));
///////////////
// Groupings //
///////////////
var Groupings;
(function(Groupings1) {
    /** Determines if the given group entry is a standalone value, or a grouping of sub-entries. */ function isElementGroup1(entry1) {
        return Values.isObject(entry1) && Object.keys(entry1).length == 2 && "key" in entry1 && "rows" in entry1;
    }
    Groupings1.isElementGroup = isElementGroup1;
    /** Determines if the given array is a grouping array. */ function isGrouping1(entry1) {
        for (let element1 of entry1)if (!isElementGroup1(element1)) return false;
        return true;
    }
    Groupings1.isGrouping = isGrouping1;
    /** Count the total number of elements in a recursive grouping. */ function count1(elements1) {
        if (isGrouping1(elements1)) {
            let result1 = 0;
            for (let subgroup1 of elements1)result1 += count1(subgroup1.rows);
            return result1;
        } else {
            return elements1.length;
        }
    }
    Groupings1.count = count1;
})(Groupings || (Groupings = {}));
//////////
// LINK //
//////////
/** The Obsidian 'link', used for uniquely describing a file, header, or block. */ class Link {
    constructor(fields1){
        Object.assign(this, fields1);
    }
    /** Create a link to a specific file. */ static file(path1, embed1 = false, display1) {
        return new Link({
            path: path1,
            embed: embed1,
            display: display1,
            subpath: undefined,
            type: "file"
        });
    }
    static infer(linkpath1, embed1 = false, display1) {
        if (linkpath1.includes("#^")) {
            let split1 = linkpath1.split("#^");
            return Link.block(split1[0], split1[1], embed1, display1);
        } else if (linkpath1.includes("#")) {
            let split1 = linkpath1.split("#");
            return Link.header(split1[0], split1[1], embed1, display1);
        } else return Link.file(linkpath1, embed1, display1);
    }
    /** Create a link to a specific file and header in that file. */ static header(path1, header1, embed1, display1) {
        // Headers need to be normalized to alpha-numeric & with extra spacing removed.
        return new Link({
            path: path1,
            embed: embed1,
            display: display1,
            subpath: normalizeHeaderForLink(header1),
            type: "header"
        });
    }
    /** Create a link to a specific file and block in that file. */ static block(path1, blockId1, embed1, display1) {
        return new Link({
            path: path1,
            embed: embed1,
            display: display1,
            subpath: blockId1,
            type: "block"
        });
    }
    static fromObject(object1) {
        return new Link(object1);
    }
    /** Checks for link equality (i.e., that the links are pointing to the same exact location). */ equals(other1) {
        if (other1 == undefined || other1 == null) return false;
        return this.path == other1.path && this.type == other1.type && this.subpath == other1.subpath;
    }
    /** Convert this link to it's markdown representation. */ toString() {
        return this.markdown();
    }
    /** Convert this link to a raw object which is serialization-friendly. */ toObject() {
        return {
            path: this.path,
            type: this.type,
            subpath: this.subpath,
            display: this.display,
            embed: this.embed
        };
    }
    /** Update this link with a new path. */ //@ts-ignore; error appeared after updating Obsidian to 0.15.4; it also updated other packages but didn't say which
    withPath(path1) {
        return new Link(Object.assign({}, this, {
            path: path1
        }));
    }
    /** Return a new link which points to the same location but with a new display value. */ withDisplay(display1) {
        return new Link(Object.assign({}, this, {
            display: display1
        }));
    }
    /** Convert a file link into a link to a specific header. */ withHeader(header1) {
        return Link.header(this.path, header1, this.embed, this.display);
    }
    /** Convert any link into a link to its file. */ toFile() {
        return Link.file(this.path, this.embed, this.display);
    }
    /** Convert this link into an embedded link. */ toEmbed() {
        if (this.embed) {
            return this;
        } else {
            let link3 = new Link(this);
            link3.embed = true;
            return link3;
        }
    }
    /** Convert this link into a non-embedded link. */ fromEmbed() {
        if (!this.embed) {
            return this;
        } else {
            let link3 = new Link(this);
            link3.embed = false;
            return link3;
        }
    }
    /** Convert this link to markdown so it can be rendered. */ markdown() {
        let result1 = (this.embed ? "!" : "") + "[[" + this.obsidianLink();
        if (this.display) {
            result1 += "|" + this.display;
        } else {
            result1 += "|" + getFileTitle(this.path);
            if (this.type == "header" || this.type == "block") result1 += " > " + this.subpath;
        }
        result1 += "]]";
        return result1;
    }
    /** Convert the inner part of the link to something that Obsidian can open / understand. */ obsidianLink() {
        var _a1, _b1;
        const escaped1 = this.path.replace("|", "\\|");
        if (this.type == "header") return escaped1 + "#" + ((_a1 = this.subpath) === null || _a1 === void 0 ? void 0 : _a1.replace("|", "\\|"));
        if (this.type == "block") return escaped1 + "#^" + ((_b1 = this.subpath) === null || _b1 === void 0 ? void 0 : _b1.replace("|", "\\|"));
        else return escaped1;
    }
    /** The stripped name of the file this link points to. */ fileName() {
        return getFileTitle(this.path).replace(".md", "");
    }
}
/////////////////
// WIDGET BASE //
/////////////////
/**
 * A trivial base class which just defines the '$widget' identifier type. Subtypes of
 * widget are responsible for adding whatever metadata is relevant. If you want your widget
 * to have rendering functionality (which you probably do), you should extend `RenderWidget`.
 */ class Widget {
    constructor($widget1){
        this.$widget = $widget1;
    }
}
/** A trivial widget which renders a (key, value) pair, and allows accessing the key and value. */ class ListPairWidget extends Widget {
    constructor(key1, value1){
        super("dataview:list-pair");
        this.key = key1;
        this.value = value1;
    }
    markdown() {
        return `${Values.toString(this.key)}: ${Values.toString(this.value)}`;
    }
}
/** A simple widget which renders an external link. */ class ExternalLinkWidget extends Widget {
    constructor(url1, display1){
        super("dataview:external-link");
        this.url = url1;
        this.display = display1;
    }
    markdown() {
        var _a1;
        return `[${(_a1 = this.display) !== null && _a1 !== void 0 ? _a1 : this.url}](${this.url})`;
    }
}
var Widgets;
(function(Widgets1) {
    /** Create a list pair widget matching the given key and value. */ function listPair1(key1, value1) {
        return new ListPairWidget(key1, value1);
    }
    Widgets1.listPair = listPair1;
    /** Create an external link widget which renders an external Obsidian link. */ function externalLink1(url1, display1) {
        return new ExternalLinkWidget(url1, display1);
    }
    Widgets1.externalLink = externalLink1;
    /** Checks if the given widget is a list pair widget. */ function isListPair1(widget1) {
        return widget1.$widget === "dataview:list-pair";
    }
    Widgets1.isListPair = isListPair1;
    function isExternalLink1(widget1) {
        return widget1.$widget === "dataview:external-link";
    }
    Widgets1.isExternalLink = isExternalLink1;
    /** Determines if the given widget is any kind of built-in widget with special rendering handling. */ function isBuiltin1(widget1) {
        return isListPair1(widget1) || isExternalLink1(widget1);
    }
    Widgets1.isBuiltin = isBuiltin1;
})(Widgets || (Widgets = {}));
/** Implementation of DataArray, minus the dynamic variable access, which is implemented via proxy. */ class DataArrayImpl {
    constructor(values1, settings1, defaultComparator1 = Values.compareValue){
        this.values = values1;
        this.settings = settings1;
        this.defaultComparator = defaultComparator1;
        this.length = values1.length;
    }
    static wrap(arr1, settings1, defaultComparator1 = Values.compareValue) {
        return new Proxy(new DataArrayImpl(arr1, settings1, defaultComparator1), DataArrayImpl.ARRAY_PROXY);
    }
    lwrap(values1) {
        return DataArrayImpl.wrap(values1, this.settings, this.defaultComparator);
    }
    where(predicate1) {
        return this.lwrap(this.values.filter(predicate1));
    }
    filter(predicate1) {
        return this.where(predicate1);
    }
    map(f3) {
        return this.lwrap(this.values.map(f3));
    }
    flatMap(f3) {
        let result1 = [];
        for(let index1 = 0; index1 < this.length; index1++){
            let value1 = f3(this.values[index1], index1, this.values);
            if (!value1 || value1.length == 0) continue;
            for (let r4 of value1)result1.push(r4);
        }
        return this.lwrap(result1);
    }
    mutate(f3) {
        for(let index1 = 0; index1 < this.values.length; index1++){
            f3(this.values[index1], index1, this.values);
        }
        return this;
    }
    limit(count1) {
        return this.lwrap(this.values.slice(0, count1));
    }
    slice(start1, end1) {
        return this.lwrap(this.values.slice(start1, end1));
    }
    concat(other1) {
        return this.lwrap(this.values.concat(other1.values));
    }
    /** Return the first index of the given (optionally starting the search) */ indexOf(element1, fromIndex1) {
        return this.findIndex((e1)=>this.defaultComparator(e1, element1) == 0, fromIndex1);
    }
    /** Return the first element that satisfies the given predicate. */ find(pred1) {
        let index1 = this.findIndex(pred1);
        if (index1 == -1) return undefined;
        else return this.values[index1];
    }
    findIndex(pred1, fromIndex1) {
        for(let index1 = fromIndex1 !== null && fromIndex1 !== void 0 ? fromIndex1 : 0; index1 < this.length; index1++){
            if (pred1(this.values[index1], index1, this.values)) return index1;
        }
        return -1;
    }
    includes(element1) {
        return this.indexOf(element1, 0) != -1;
    }
    join(sep1) {
        return this.map((s1)=>Values.toString(s1, this.settings)).array().join(sep1 !== null && sep1 !== void 0 ? sep1 : ", ");
    }
    sort(key1, direction1, comparator1) {
        if (this.values.length == 0) return this;
        let realComparator1 = comparator1 !== null && comparator1 !== void 0 ? comparator1 : this.defaultComparator;
        let realKey1 = key1 !== null && key1 !== void 0 ? key1 : (l1)=>l1;
        // Associate each entry with it's index for the key function, and then do a normal sort.
        let copy1 = [].concat(this.array()).map((elem3, index1)=>{
            return {
                index: index1,
                value: elem3
            };
        });
        copy1.sort((a1, b1)=>{
            let aKey1 = realKey1(a1.value, a1.index, this.values);
            let bKey1 = realKey1(b1.value, b1.index, this.values);
            return direction1 === "desc" ? -realComparator1(aKey1, bKey1) : realComparator1(aKey1, bKey1);
        });
        return this.lwrap(copy1.map((e1)=>e1.value));
    }
    sortInPlace(key1, direction1, comparator1) {
        if (this.values.length == 0) return this;
        let realComparator1 = comparator1 !== null && comparator1 !== void 0 ? comparator1 : this.defaultComparator;
        let realKey1 = key1 !== null && key1 !== void 0 ? key1 : (l1)=>l1;
        this.values.sort((a1, b1)=>{
            let aKey1 = realKey1(a1);
            let bKey1 = realKey1(b1);
            return direction1 == "desc" ? -realComparator1(aKey1, bKey1) : realComparator1(aKey1, bKey1);
        });
        return this;
    }
    groupBy(key1, comparator1) {
        if (this.values.length == 0) return this.lwrap([]);
        // JavaScript sucks and we can't make hash maps over arbitrary types (only strings/ints), so
        // we do a poor man algorithm where we SORT, followed by grouping.
        let intermediate1 = this.sort(key1, "asc", comparator1);
        comparator1 = comparator1 !== null && comparator1 !== void 0 ? comparator1 : this.defaultComparator;
        let result1 = [];
        let currentRow1 = [
            intermediate1[0]
        ];
        let current1 = key1(intermediate1[0], 0, intermediate1.values);
        for(let index1 = 1; index1 < intermediate1.length; index1++){
            let newKey1 = key1(intermediate1[index1], index1, intermediate1.values);
            if (comparator1(current1, newKey1) != 0) {
                result1.push({
                    key: current1,
                    rows: this.lwrap(currentRow1)
                });
                current1 = newKey1;
                currentRow1 = [
                    intermediate1[index1]
                ];
            } else {
                currentRow1.push(intermediate1[index1]);
            }
        }
        result1.push({
            key: current1,
            rows: this.lwrap(currentRow1)
        });
        return this.lwrap(result1);
    }
    groupIn(key1, comparator1) {
        if (Groupings.isGrouping(this.values)) {
            return this.map((v4)=>{
                return {
                    key: v4.key,
                    rows: DataArray.wrap(v4.rows, this.settings).groupIn(key1, comparator1)
                };
            });
        } else {
            return this.groupBy(key1, comparator1);
        }
    }
    distinct(key1, comparator1) {
        if (this.values.length == 0) return this;
        let realKey1 = key1 !== null && key1 !== void 0 ? key1 : (x1)=>x1;
        // For similar reasons to groupBy, do a sort and take the first element of each block.
        let intermediate1 = this.map((x1, index1)=>{
            return {
                key: realKey1(x1, index1, this.values),
                value: x1
            };
        }).sort((x1)=>x1.key, "asc", comparator1);
        comparator1 = comparator1 !== null && comparator1 !== void 0 ? comparator1 : this.defaultComparator;
        let result1 = [
            intermediate1[0].value
        ];
        for(let index1 = 1; index1 < intermediate1.length; index1++){
            if (comparator1(intermediate1[index1 - 1].key, intermediate1[index1].key) != 0) {
                result1.push(intermediate1[index1].value);
            }
        }
        return this.lwrap(result1);
    }
    every(f3) {
        return this.values.every(f3);
    }
    some(f3) {
        return this.values.some(f3);
    }
    none(f3) {
        return this.values.every((v4, i1, a1)=>!f3(v4, i1, a1));
    }
    first() {
        return this.values.length > 0 ? this.values[0] : undefined;
    }
    last() {
        return this.values.length > 0 ? this.values[this.values.length - 1] : undefined;
    }
    to(key1) {
        let result1 = [];
        for (let child1 of this.values){
            let value1 = child1[key1];
            if (value1 === undefined || value1 === null) continue;
            if (Array.isArray(value1) || DataArray.isDataArray(value1)) value1.forEach((v4)=>result1.push(v4));
            else result1.push(value1);
        }
        return this.lwrap(result1);
    }
    into(key1) {
        let result1 = [];
        for (let child1 of this.values){
            let value1 = child1[key1];
            if (value1 === undefined || value1 === null) continue;
            result1.push(value1);
        }
        return this.lwrap(result1);
    }
    expand(key1) {
        let result1 = [];
        let queue1 = [].concat(this.values);
        while(queue1.length > 0){
            let next1 = queue1.pop();
            let value1 = next1[key1];
            if (value1 === undefined || value1 === null) continue;
            if (Array.isArray(value1)) value1.forEach((v4)=>queue1.push(v4));
            else if (value1 instanceof DataArrayImpl) value1.forEach((v4)=>queue1.push(v4));
            else queue1.push(value1);
            result1.push(next1);
        }
        return this.lwrap(result1);
    }
    forEach(f3) {
        for(let index1 = 0; index1 < this.values.length; index1++){
            f3(this.values[index1], index1, this.values);
        }
    }
    array() {
        return [].concat(this.values);
    }
    [Symbol.iterator]() {
        return this.values[Symbol.iterator]();
    }
    toString() {
        return "[" + this.values.join(", ") + "]";
    }
}
DataArrayImpl.ARRAY_FUNCTIONS = new Set([
    "where",
    "filter",
    "map",
    "flatMap",
    "mutate",
    "slice",
    "concat",
    "indexOf",
    "limit",
    "find",
    "findIndex",
    "includes",
    "join",
    "sort",
    "sortInPlace",
    "groupBy",
    "groupIn",
    "distinct",
    "every",
    "some",
    "none",
    "first",
    "last",
    "to",
    "into",
    "lwrap",
    "expand",
    "forEach",
    "length",
    "values",
    "array",
    "defaultComparator",
    "toString",
    "settings"
]);
DataArrayImpl.ARRAY_PROXY = {
    get: function(target1, prop1, reciever1) {
        if (typeof prop1 === "symbol") return target1[prop1];
        else if (typeof prop1 === "number") return target1.values[prop1];
        else if (prop1 === "constructor") return target1.values.constructor;
        else if (!isNaN(parseInt(prop1))) return target1.values[parseInt(prop1)];
        else if (DataArrayImpl.ARRAY_FUNCTIONS.has(prop1.toString())) return target1[prop1.toString()];
        return target1.to(prop1);
    }
};
/** Provides utility functions for generating data arrays. */ var DataArray;
(function(DataArray1) {
    /** Create a new Dataview data array. */ function wrap3(raw1, settings1) {
        if (isDataArray1(raw1)) return raw1;
        return DataArrayImpl.wrap(raw1, settings1);
    }
    DataArray1.wrap = wrap3;
    /** Create a new DataArray from an iterable object. */ function from1(raw1, settings1) {
        if (isDataArray1(raw1)) return raw1;
        let data1 = [];
        for (let elem3 of raw1)data1.push(elem3);
        return DataArrayImpl.wrap(data1, settings1);
    }
    DataArray1.from = from1;
    /** Return true if the given object is a data array. */ function isDataArray1(obj1) {
        return obj1 instanceof DataArrayImpl;
    }
    DataArray1.isDataArray = isDataArray1;
})(DataArray || (DataArray = {}));
// A scary looking polyfill, sure, but it fixes up data array/array interop for us.
const oldArrayIsArray = Array.isArray;
Array.isArray = (arg4)=>{
    return oldArrayIsArray(arg4) || DataArray.isDataArray(arg4);
};
/** Test-environment-friendly function which fetches the current system locale. */ function currentLocale() {
    if (true) return "en-US";
    return window.navigator.language;
}
/** Render simple fields compactly, removing wrapping content like paragraph and span. */ async function renderCompactMarkdown(markdown1, container1, sourcePath1, component1) {
    let subcontainer1 = container1.createSpan();
    await obsidian.MarkdownRenderer.renderMarkdown(markdown1, subcontainer1, sourcePath1, component1);
    let paragraph1 = subcontainer1.querySelector(":scope > p");
    if (subcontainer1.children.length == 1 && paragraph1) {
        while(paragraph1.firstChild){
            subcontainer1.appendChild(paragraph1.firstChild);
        }
        subcontainer1.removeChild(paragraph1);
    }
}
/** Render a pre block with an error in it; returns the element to allow for dynamic updating. */ function renderErrorPre(container1, error1) {
    let pre1 = container1.createEl("pre", {
        cls: [
            "dataview",
            "dataview-error"
        ]
    });
    pre1.appendText(error1);
    return pre1;
}
/** Render a static codeblock. */ function renderCodeBlock(container1, source1, language1) {
    let code1 = container1.createEl("code", {
        cls: [
            "dataview"
        ]
    });
    if (language1) code1.classList.add("language-" + language1);
    code1.appendText(source1);
    return code1;
}
/** Prettily render a value into a container with the given settings. */ async function renderValue(field1, container1, originFile1, component1, settings1, expandList1 = false, context1 = "root", depth1 = 0) {
    var _a1, _b1, _c1;
    // Prevent infinite recursion.
    if (depth1 > settings1.maxRecursiveRenderDepth) {
        container1.appendText("...");
        return;
    }
    if (Values.isNull(field1)) {
        await renderCompactMarkdown(settings1.renderNullAs, container1, originFile1, component1);
    } else if (Values.isDate(field1)) {
        container1.appendText(renderMinimalDate(field1, settings1, currentLocale()));
    } else if (Values.isDuration(field1)) {
        container1.appendText(renderMinimalDuration(field1));
    } else if (Values.isString(field1) || Values.isBoolean(field1) || Values.isNumber(field1)) {
        await renderCompactMarkdown("" + field1, container1, originFile1, component1);
    } else if (Values.isLink(field1)) {
        await renderCompactMarkdown(field1.markdown(), container1, originFile1, component1);
    } else if (Values.isHtml(field1)) {
        container1.appendChild(field1);
    } else if (Values.isWidget(field1)) {
        if (Widgets.isListPair(field1)) {
            await renderValue(field1.key, container1, originFile1, component1, settings1, expandList1, context1, depth1);
            container1.appendText(": ");
            await renderValue(field1.value, container1, originFile1, component1, settings1, expandList1, context1, depth1);
        } else if (Widgets.isExternalLink(field1)) {
            let elem3 = document.createElement("a");
            elem3.textContent = (_a1 = field1.display) !== null && _a1 !== void 0 ? _a1 : field1.url;
            elem3.rel = "noopener";
            elem3.target = "_blank";
            elem3.classList.add("external-link");
            elem3.href = field1.url;
            container1.appendChild(elem3);
        } else {
            container1.appendText(`<unknown widget '${field1.$widget}>`);
        }
    } else if (Values.isFunction(field1)) {
        container1.appendText("<function>");
    } else if (Values.isArray(field1) || DataArray.isDataArray(field1)) {
        if (expandList1) {
            let list1 = container1.createEl("ul", {
                cls: [
                    "dataview",
                    "dataview-ul",
                    context1 == "list" ? "dataview-result-list-ul" : "dataview-result-list-root-ul"
                ]
            });
            for (let child1 of field1){
                let li1 = list1.createEl("li", {
                    cls: "dataview-result-list-li"
                });
                await renderValue(child1, li1, originFile1, component1, settings1, expandList1, "list", depth1 + 1);
            }
        } else {
            if (field1.length == 0) {
                container1.appendText("<empty list>");
                return;
            }
            let span2 = container1.createEl("span", {
                cls: [
                    "dataview",
                    "dataview-result-list-span"
                ]
            });
            let first1 = true;
            for (let val3 of field1){
                if (first1) first1 = false;
                else span2.appendText(", ");
                await renderValue(val3, span2, originFile1, component1, settings1, expandList1, "list", depth1 + 1);
            }
        }
    } else if (Values.isObject(field1)) {
        // Don't render classes in case they have recursive references; spoopy.
        if (((_b1 = field1 === null || field1 === void 0 ? void 0 : field1.constructor) === null || _b1 === void 0 ? void 0 : _b1.name) && ((_c1 = field1 === null || field1 === void 0 ? void 0 : field1.constructor) === null || _c1 === void 0 ? void 0 : _c1.name) != "Object") {
            container1.appendText(`<${field1.constructor.name}>`);
            return;
        }
        if (expandList1) {
            let list1 = container1.createEl("ul", {
                cls: [
                    "dataview",
                    "dataview-ul",
                    "dataview-result-object-ul"
                ]
            });
            for (let [key1, value1] of Object.entries(field1)){
                let li1 = list1.createEl("li", {
                    cls: [
                        "dataview",
                        "dataview-li",
                        "dataview-result-object-li"
                    ]
                });
                li1.appendText(key1 + ": ");
                await renderValue(value1, li1, originFile1, component1, settings1, expandList1, "list", depth1 + 1);
            }
        } else {
            if (Object.keys(field1).length == 0) {
                container1.appendText("<empty object>");
                return;
            }
            let span2 = container1.createEl("span", {
                cls: [
                    "dataview",
                    "dataview-result-object-span"
                ]
            });
            let first1 = true;
            for (let [key1, value1] of Object.entries(field1)){
                if (first1) first1 = false;
                else span2.appendText(", ");
                span2.appendText(key1 + ": ");
                await renderValue(value1, span2, originFile1, component1, settings1, expandList1, "list", depth1 + 1);
            }
        }
    } else {
        container1.appendText("Unrecognized: " + JSON.stringify(field1));
    }
}
var papaparse_min = {
    exports: {}
};
/* @license
Papa Parse
v5.3.2
https://github.com/mholt/PapaParse
License: MIT
*/ (function(module1, exports1) {
    !function(e1, t5) {
        module1.exports = t5();
    }(commonjsGlobal, function s1() {
        var f3 = "undefined" != typeof self ? self :  false ? 0 : void 0 !== f3 ? f3 : {};
        var n3 = !f3.document && !!f3.postMessage, o4 = n3 && /blob:/i.test((f3.location || {}).protocol), a1 = {}, h1 = 0, b1 = {
            parse: function(e1, t5) {
                var i1 = (t5 = t5 || {}).dynamicTyping || !1;
                M1(i1) && (t5.dynamicTypingFunction = i1, i1 = {});
                if (t5.dynamicTyping = i1, t5.transform = !!M1(t5.transform) && t5.transform, t5.worker && b1.WORKERS_SUPPORTED) {
                    var r4 = function() {
                        if (!b1.WORKERS_SUPPORTED) return !1;
                        var e1 = (i1 = f3.URL || f3.webkitURL || null, r4 = s1.toString(), b1.BLOB_URL || (b1.BLOB_URL = i1.createObjectURL(new Blob([
                            "(",
                            r4,
                            ")();"
                        ], {
                            type: "text/javascript"
                        })))), t5 = new f3.Worker(e1);
                        var i1, r4;
                        return t5.onmessage = _5, t5.id = h1++, a1[t5.id] = t5;
                    }();
                    return r4.userStep = t5.step, r4.userChunk = t5.chunk, r4.userComplete = t5.complete, r4.userError = t5.error, t5.step = M1(t5.step), t5.chunk = M1(t5.chunk), t5.complete = M1(t5.complete), t5.error = M1(t5.error), delete t5.worker, void r4.postMessage({
                        input: e1,
                        config: t5,
                        workerId: r4.id
                    });
                }
                var n3 = null;
                b1.NODE_STREAM_INPUT, "string" == typeof e1 ? n3 = t5.download ? new l1(t5) : new p3(t5) : !0 === e1.readable && M1(e1.read) && M1(e1.on) ? n3 = new g1(t5) : (f3.File && e1 instanceof File || e1 instanceof Object) && (n3 = new c1(t5));
                return n3.stream(e1);
            },
            unparse: function(e1, t5) {
                var n3 = !1, _5 = !0, m1 = ",", y1 = "\r\n", s1 = '"', a1 = s1 + s1, i1 = !1, r4 = null, o4 = !1;
                !function() {
                    if ("object" != typeof t5) return;
                    "string" != typeof t5.delimiter || b1.BAD_DELIMITERS.filter(function(e1) {
                        return -1 !== t5.delimiter.indexOf(e1);
                    }).length || (m1 = t5.delimiter);
                    ("boolean" == typeof t5.quotes || "function" == typeof t5.quotes || Array.isArray(t5.quotes)) && (n3 = t5.quotes);
                    "boolean" != typeof t5.skipEmptyLines && "string" != typeof t5.skipEmptyLines || (i1 = t5.skipEmptyLines);
                    "string" == typeof t5.newline && (y1 = t5.newline);
                    "string" == typeof t5.quoteChar && (s1 = t5.quoteChar);
                    "boolean" == typeof t5.header && (_5 = t5.header);
                    if (Array.isArray(t5.columns)) {
                        if (0 === t5.columns.length) throw new Error("Option columns is empty");
                        r4 = t5.columns;
                    }
                    void 0 !== t5.escapeChar && (a1 = t5.escapeChar + s1);
                    ("boolean" == typeof t5.escapeFormulae || t5.escapeFormulae instanceof RegExp) && (o4 = t5.escapeFormulae instanceof RegExp ? t5.escapeFormulae : /^[=+\-@\t\r].*$/);
                }();
                var h1 = new RegExp(j1(s1), "g");
                "string" == typeof e1 && (e1 = JSON.parse(e1));
                if (Array.isArray(e1)) {
                    if (!e1.length || Array.isArray(e1[0])) return u1(null, e1, i1);
                    if ("object" == typeof e1[0]) return u1(r4 || Object.keys(e1[0]), e1, i1);
                } else if ("object" == typeof e1) return "string" == typeof e1.data && (e1.data = JSON.parse(e1.data)), Array.isArray(e1.data) && (e1.fields || (e1.fields = e1.meta && e1.meta.fields || r4), e1.fields || (e1.fields = Array.isArray(e1.data[0]) ? e1.fields : "object" == typeof e1.data[0] ? Object.keys(e1.data[0]) : []), Array.isArray(e1.data[0]) || "object" == typeof e1.data[0] || (e1.data = [
                    e1.data
                ])), u1(e1.fields || [], e1.data || [], i1);
                throw new Error("Unable to serialize unrecognized input");
                function u1(e1, t5, i1) {
                    var r4 = "";
                    "string" == typeof e1 && (e1 = JSON.parse(e1)), "string" == typeof t5 && (t5 = JSON.parse(t5));
                    var n3 = Array.isArray(e1) && 0 < e1.length, s1 = !Array.isArray(t5[0]);
                    if (n3 && _5) {
                        for(var a1 = 0; a1 < e1.length; a1++)0 < a1 && (r4 += m1), r4 += v4(e1[a1], a1);
                        0 < t5.length && (r4 += y1);
                    }
                    for(var o4 = 0; o4 < t5.length; o4++){
                        var h1 = n3 ? e1.length : t5[o4].length, u1 = !1, f3 = n3 ? 0 === Object.keys(t5[o4]).length : 0 === t5[o4].length;
                        if (i1 && !n3 && (u1 = "greedy" === i1 ? "" === t5[o4].join("").trim() : 1 === t5[o4].length && 0 === t5[o4][0].length), "greedy" === i1 && n3) {
                            for(var d1 = [], l1 = 0; l1 < h1; l1++){
                                var c1 = s1 ? e1[l1] : l1;
                                d1.push(t5[o4][c1]);
                            }
                            u1 = "" === d1.join("").trim();
                        }
                        if (!u1) {
                            for(var p3 = 0; p3 < h1; p3++){
                                0 < p3 && !f3 && (r4 += m1);
                                var g1 = n3 && s1 ? e1[p3] : p3;
                                r4 += v4(t5[o4][g1], p3);
                            }
                            o4 < t5.length - 1 && (!i1 || 0 < h1 && !f3) && (r4 += y1);
                        }
                    }
                    return r4;
                }
                function v4(e1, t5) {
                    if (null == e1) return "";
                    if (e1.constructor === Date) return JSON.stringify(e1).slice(1, 25);
                    var i1 = !1;
                    o4 && "string" == typeof e1 && o4.test(e1) && (e1 = "'" + e1, i1 = !0);
                    var r4 = e1.toString().replace(h1, a1);
                    return (i1 = i1 || !0 === n3 || "function" == typeof n3 && n3(e1, t5) || Array.isArray(n3) && n3[t5] || function(e1, t5) {
                        for(var i1 = 0; i1 < t5.length; i1++)if (-1 < e1.indexOf(t5[i1])) return !0;
                        return !1;
                    }(r4, b1.BAD_DELIMITERS) || -1 < r4.indexOf(m1) || " " === r4.charAt(0) || " " === r4.charAt(r4.length - 1)) ? s1 + r4 + s1 : r4;
                }
            }
        };
        if (b1.RECORD_SEP = String.fromCharCode(30), b1.UNIT_SEP = String.fromCharCode(31), b1.BYTE_ORDER_MARK = "\uFEFF", b1.BAD_DELIMITERS = [
            "\r",
            "\n",
            '"',
            b1.BYTE_ORDER_MARK
        ], b1.WORKERS_SUPPORTED = !n3 && !!f3.Worker, b1.NODE_STREAM_INPUT = 1, b1.LocalChunkSize = 10485760, b1.RemoteChunkSize = 5242880, b1.DefaultDelimiter = ",", b1.Parser = E1, b1.ParserHandle = i1, b1.NetworkStreamer = l1, b1.FileStreamer = c1, b1.StringStreamer = p3, b1.ReadableStreamStreamer = g1, f3.jQuery) {
            var d1 = f3.jQuery;
            d1.fn.parse = function(o4) {
                var i1 = o4.config || {}, h1 = [];
                return this.each(function(e1) {
                    if (!("INPUT" === d1(this).prop("tagName").toUpperCase() && "file" === d1(this).attr("type").toLowerCase() && f3.FileReader) || !this.files || 0 === this.files.length) return !0;
                    for(var t5 = 0; t5 < this.files.length; t5++)h1.push({
                        file: this.files[t5],
                        inputElem: this,
                        instanceConfig: d1.extend({}, i1)
                    });
                }), e1(), this;
                function e1() {
                    if (0 !== h1.length) {
                        var e1, t5, i1, r4, n3 = h1[0];
                        if (M1(o4.before)) {
                            var s1 = o4.before(n3.file, n3.inputElem);
                            if ("object" == typeof s1) {
                                if ("abort" === s1.action) return e1 = "AbortError", t5 = n3.file, i1 = n3.inputElem, r4 = s1.reason, void (M1(o4.error) && o4.error({
                                    name: e1
                                }, t5, i1, r4));
                                if ("skip" === s1.action) return void u1();
                                "object" == typeof s1.config && (n3.instanceConfig = d1.extend(n3.instanceConfig, s1.config));
                            } else if ("skip" === s1) return void u1();
                        }
                        var a1 = n3.instanceConfig.complete;
                        n3.instanceConfig.complete = function(e1) {
                            M1(a1) && a1(e1, n3.file, n3.inputElem), u1();
                        }, b1.parse(n3.file, n3.instanceConfig);
                    } else M1(o4.complete) && o4.complete();
                }
                function u1() {
                    h1.splice(0, 1), e1();
                }
            };
        }
        function u1(e1) {
            this._handle = null, this._finished = !1, this._completed = !1, this._halted = !1, this._input = null, this._baseIndex = 0, this._partialLine = "", this._rowCount = 0, this._start = 0, this._nextChunk = null, this.isFirstChunk = !0, this._completeResults = {
                data: [],
                errors: [],
                meta: {}
            }, (function(e1) {
                var t5 = w1(e1);
                t5.chunkSize = parseInt(t5.chunkSize), e1.step || e1.chunk || (t5.chunkSize = null);
                this._handle = new i1(t5), (this._handle.streamer = this)._config = t5;
            }).call(this, e1), this.parseChunk = function(e1, t5) {
                if (this.isFirstChunk && M1(this._config.beforeFirstChunk)) {
                    var i1 = this._config.beforeFirstChunk(e1);
                    void 0 !== i1 && (e1 = i1);
                }
                this.isFirstChunk = !1, this._halted = !1;
                var r4 = this._partialLine + e1;
                this._partialLine = "";
                var n3 = this._handle.parse(r4, this._baseIndex, !this._finished);
                if (!this._handle.paused() && !this._handle.aborted()) {
                    var s1 = n3.meta.cursor;
                    this._finished || (this._partialLine = r4.substring(s1 - this._baseIndex), this._baseIndex = s1), n3 && n3.data && (this._rowCount += n3.data.length);
                    var a1 = this._finished || this._config.preview && this._rowCount >= this._config.preview;
                    if (o4) f3.postMessage({
                        results: n3,
                        workerId: b1.WORKER_ID,
                        finished: a1
                    });
                    else if (M1(this._config.chunk) && !t5) {
                        if (this._config.chunk(n3, this._handle), this._handle.paused() || this._handle.aborted()) return void (this._halted = !0);
                        n3 = void 0, this._completeResults = void 0;
                    }
                    return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(n3.data), this._completeResults.errors = this._completeResults.errors.concat(n3.errors), this._completeResults.meta = n3.meta), this._completed || !a1 || !M1(this._config.complete) || n3 && n3.meta.aborted || (this._config.complete(this._completeResults, this._input), this._completed = !0), a1 || n3 && n3.meta.paused || this._nextChunk(), n3;
                }
                this._halted = !0;
            }, this._sendError = function(e1) {
                M1(this._config.error) ? this._config.error(e1) : o4 && this._config.error && f3.postMessage({
                    workerId: b1.WORKER_ID,
                    error: e1,
                    finished: !1
                });
            };
        }
        function l1(e1) {
            var r4;
            (e1 = e1 || {}).chunkSize || (e1.chunkSize = b1.RemoteChunkSize), u1.call(this, e1), this._nextChunk = n3 ? function() {
                this._readChunk(), this._chunkLoaded();
            } : function() {
                this._readChunk();
            }, this.stream = function(e1) {
                this._input = e1, this._nextChunk();
            }, this._readChunk = function() {
                if (this._finished) this._chunkLoaded();
                else {
                    if (r4 = new XMLHttpRequest, this._config.withCredentials && (r4.withCredentials = this._config.withCredentials), n3 || (r4.onload = v4(this._chunkLoaded, this), r4.onerror = v4(this._chunkError, this)), r4.open(this._config.downloadRequestBody ? "POST" : "GET", this._input, !n3), this._config.downloadRequestHeaders) {
                        var e1 = this._config.downloadRequestHeaders;
                        for(var t5 in e1)r4.setRequestHeader(t5, e1[t5]);
                    }
                    if (this._config.chunkSize) {
                        var i1 = this._start + this._config.chunkSize - 1;
                        r4.setRequestHeader("Range", "bytes=" + this._start + "-" + i1);
                    }
                    try {
                        r4.send(this._config.downloadRequestBody);
                    } catch (e1) {
                        this._chunkError(e1.message);
                    }
                    n3 && 0 === r4.status && this._chunkError();
                }
            }, this._chunkLoaded = function() {
                4 === r4.readyState && (r4.status < 200 || 400 <= r4.status ? this._chunkError() : (this._start += this._config.chunkSize ? this._config.chunkSize : r4.responseText.length, this._finished = !this._config.chunkSize || this._start >= function(e1) {
                    var t5 = e1.getResponseHeader("Content-Range");
                    if (null === t5) return -1;
                    return parseInt(t5.substring(t5.lastIndexOf("/") + 1));
                }(r4), this.parseChunk(r4.responseText)));
            }, this._chunkError = function(e1) {
                var t5 = r4.statusText || e1;
                this._sendError(new Error(t5));
            };
        }
        function c1(e1) {
            var r4, n3;
            (e1 = e1 || {}).chunkSize || (e1.chunkSize = b1.LocalChunkSize), u1.call(this, e1);
            var s1 = "undefined" != typeof FileReader;
            this.stream = function(e1) {
                this._input = e1, n3 = e1.slice || e1.webkitSlice || e1.mozSlice, s1 ? ((r4 = new FileReader).onload = v4(this._chunkLoaded, this), r4.onerror = v4(this._chunkError, this)) : r4 = new FileReaderSync, this._nextChunk();
            }, this._nextChunk = function() {
                this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();
            }, this._readChunk = function() {
                var e1 = this._input;
                if (this._config.chunkSize) {
                    var t5 = Math.min(this._start + this._config.chunkSize, this._input.size);
                    e1 = n3.call(e1, this._start, t5);
                }
                var i1 = r4.readAsText(e1, this._config.encoding);
                s1 || this._chunkLoaded({
                    target: {
                        result: i1
                    }
                });
            }, this._chunkLoaded = function(e1) {
                this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, this.parseChunk(e1.target.result);
            }, this._chunkError = function() {
                this._sendError(r4.error);
            };
        }
        function p3(e1) {
            var i1;
            u1.call(this, e1 = e1 || {}), this.stream = function(e1) {
                return i1 = e1, this._nextChunk();
            }, this._nextChunk = function() {
                if (!this._finished) {
                    var e1, t5 = this._config.chunkSize;
                    return t5 ? (e1 = i1.substring(0, t5), i1 = i1.substring(t5)) : (e1 = i1, i1 = ""), this._finished = !i1, this.parseChunk(e1);
                }
            };
        }
        function g1(e1) {
            u1.call(this, e1 = e1 || {});
            var t5 = [], i1 = !0, r4 = !1;
            this.pause = function() {
                u1.prototype.pause.apply(this, arguments), this._input.pause();
            }, this.resume = function() {
                u1.prototype.resume.apply(this, arguments), this._input.resume();
            }, this.stream = function(e1) {
                this._input = e1, this._input.on("data", this._streamData), this._input.on("end", this._streamEnd), this._input.on("error", this._streamError);
            }, this._checkIsFinished = function() {
                r4 && 1 === t5.length && (this._finished = !0);
            }, this._nextChunk = function() {
                this._checkIsFinished(), t5.length ? this.parseChunk(t5.shift()) : i1 = !0;
            }, this._streamData = v4(function(e1) {
                try {
                    t5.push("string" == typeof e1 ? e1 : e1.toString(this._config.encoding)), i1 && (i1 = !1, this._checkIsFinished(), this.parseChunk(t5.shift()));
                } catch (e1) {
                    this._streamError(e1);
                }
            }, this), this._streamError = v4(function(e1) {
                this._streamCleanUp(), this._sendError(e1);
            }, this), this._streamEnd = v4(function() {
                this._streamCleanUp(), r4 = !0, this._streamData("");
            }, this), this._streamCleanUp = v4(function() {
                this._input.removeListener("data", this._streamData), this._input.removeListener("end", this._streamEnd), this._input.removeListener("error", this._streamError);
            }, this);
        }
        function i1(m1) {
            var a1, o4, h1, r4 = Math.pow(2, 53), n3 = -r4, s1 = /^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/, u1 = /^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))$/, t5 = this, i1 = 0, f3 = 0, d1 = !1, e1 = !1, l1 = [], c1 = {
                data: [],
                errors: [],
                meta: {}
            };
            if (M1(m1.step)) {
                var p3 = m1.step;
                m1.step = function(e1) {
                    if (c1 = e1, _5()) g1();
                    else {
                        if (g1(), 0 === c1.data.length) return;
                        i1 += e1.data.length, m1.preview && i1 > m1.preview ? o4.abort() : (c1.data = c1.data[0], p3(c1, t5));
                    }
                };
            }
            function y1(e1) {
                return "greedy" === m1.skipEmptyLines ? "" === e1.join("").trim() : 1 === e1.length && 0 === e1[0].length;
            }
            function g1() {
                return c1 && h1 && (k3("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '" + b1.DefaultDelimiter + "'"), h1 = !1), m1.skipEmptyLines && (c1.data = c1.data.filter(function(e1) {
                    return !y1(e1);
                })), _5() && function() {
                    if (!c1) return;
                    function e1(e1, t5) {
                        M1(m1.transformHeader) && (e1 = m1.transformHeader(e1, t5)), l1.push(e1);
                    }
                    if (Array.isArray(c1.data[0])) {
                        for(var t5 = 0; _5() && t5 < c1.data.length; t5++)c1.data[t5].forEach(e1);
                        c1.data.splice(0, 1);
                    } else c1.data.forEach(e1);
                }(), function() {
                    if (!c1 || !m1.header && !m1.dynamicTyping && !m1.transform) return c1;
                    function e1(e1, t5) {
                        var i1, r4 = m1.header ? {} : [];
                        for(i1 = 0; i1 < e1.length; i1++){
                            var n3 = i1, s1 = e1[i1];
                            m1.header && (n3 = i1 >= l1.length ? "__parsed_extra" : l1[i1]), m1.transform && (s1 = m1.transform(s1, n3)), s1 = v4(n3, s1), "__parsed_extra" === n3 ? (r4[n3] = r4[n3] || [], r4[n3].push(s1)) : r4[n3] = s1;
                        }
                        return m1.header && (i1 > l1.length ? k3("FieldMismatch", "TooManyFields", "Too many fields: expected " + l1.length + " fields but parsed " + i1, f3 + t5) : i1 < l1.length && k3("FieldMismatch", "TooFewFields", "Too few fields: expected " + l1.length + " fields but parsed " + i1, f3 + t5)), r4;
                    }
                    var t5 = 1;
                    !c1.data.length || Array.isArray(c1.data[0]) ? (c1.data = c1.data.map(e1), t5 = c1.data.length) : c1.data = e1(c1.data, 0);
                    m1.header && c1.meta && (c1.meta.fields = l1);
                    return f3 += t5, c1;
                }();
            }
            function _5() {
                return m1.header && 0 === l1.length;
            }
            function v4(e1, t5) {
                return i1 = e1, m1.dynamicTypingFunction && void 0 === m1.dynamicTyping[i1] && (m1.dynamicTyping[i1] = m1.dynamicTypingFunction(i1)), !0 === (m1.dynamicTyping[i1] || m1.dynamicTyping) ? "true" === t5 || "TRUE" === t5 || "false" !== t5 && "FALSE" !== t5 && (function(e1) {
                    if (s1.test(e1)) {
                        var t5 = parseFloat(e1);
                        if (n3 < t5 && t5 < r4) return !0;
                    }
                    return !1;
                }(t5) ? parseFloat(t5) : u1.test(t5) ? new Date(t5) : "" === t5 ? null : t5) : t5;
                var i1;
            }
            function k3(e1, t5, i1, r4) {
                var n3 = {
                    type: e1,
                    code: t5,
                    message: i1
                };
                void 0 !== r4 && (n3.row = r4), c1.errors.push(n3);
            }
            this.parse = function(e1, t5, i1) {
                var r4 = m1.quoteChar || '"';
                if (m1.newline || (m1.newline = function(e1, t5) {
                    e1 = e1.substring(0, 1048576);
                    var i1 = new RegExp(j1(t5) + "([^]*?)" + j1(t5), "gm"), r4 = (e1 = e1.replace(i1, "")).split("\r"), n3 = e1.split("\n"), s1 = 1 < n3.length && n3[0].length < r4[0].length;
                    if (1 === r4.length || s1) return "\n";
                    for(var a1 = 0, o4 = 0; o4 < r4.length; o4++)"\n" === r4[o4][0] && a1++;
                    return a1 >= r4.length / 2 ? "\r\n" : "\r";
                }(e1, r4)), h1 = !1, m1.delimiter) M1(m1.delimiter) && (m1.delimiter = m1.delimiter(e1), c1.meta.delimiter = m1.delimiter);
                else {
                    var n3 = function(e1, t5, i1, r4, n3) {
                        var s1, a1, o4, h1;
                        n3 = n3 || [
                            ",",
                            "	",
                            "|",
                            ";",
                            b1.RECORD_SEP,
                            b1.UNIT_SEP
                        ];
                        for(var u1 = 0; u1 < n3.length; u1++){
                            var f3 = n3[u1], d1 = 0, l1 = 0, c1 = 0;
                            o4 = void 0;
                            for(var p3 = new E1({
                                comments: r4,
                                delimiter: f3,
                                newline: t5,
                                preview: 10
                            }).parse(e1), g1 = 0; g1 < p3.data.length; g1++)if (i1 && y1(p3.data[g1])) c1++;
                            else {
                                var _5 = p3.data[g1].length;
                                l1 += _5, void 0 !== o4 ? 0 < _5 && (d1 += Math.abs(_5 - o4), o4 = _5) : o4 = _5;
                            }
                            0 < p3.data.length && (l1 /= p3.data.length - c1), (void 0 === a1 || d1 <= a1) && (void 0 === h1 || h1 < l1) && 1.99 < l1 && (a1 = d1, s1 = f3, h1 = l1);
                        }
                        return {
                            successful: !!(m1.delimiter = s1),
                            bestDelimiter: s1
                        };
                    }(e1, m1.newline, m1.skipEmptyLines, m1.comments, m1.delimitersToGuess);
                    n3.successful ? m1.delimiter = n3.bestDelimiter : (h1 = !0, m1.delimiter = b1.DefaultDelimiter), c1.meta.delimiter = m1.delimiter;
                }
                var s1 = w1(m1);
                return m1.preview && m1.header && s1.preview++, a1 = e1, o4 = new E1(s1), c1 = o4.parse(a1, t5, i1), g1(), d1 ? {
                    meta: {
                        paused: !0
                    }
                } : c1 || {
                    meta: {
                        paused: !1
                    }
                };
            }, this.paused = function() {
                return d1;
            }, this.pause = function() {
                d1 = !0, o4.abort(), a1 = M1(m1.chunk) ? "" : a1.substring(o4.getCharIndex());
            }, this.resume = function() {
                t5.streamer._halted ? (d1 = !1, t5.streamer.parseChunk(a1, !0)) : setTimeout(t5.resume, 3);
            }, this.aborted = function() {
                return e1;
            }, this.abort = function() {
                e1 = !0, o4.abort(), c1.meta.aborted = !0, M1(m1.complete) && m1.complete(c1), a1 = "";
            };
        }
        function j1(e1) {
            return e1.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        }
        function E1(e1) {
            var S1, O1 = (e1 = e1 || {}).delimiter, x1 = e1.newline, I1 = e1.comments, T1 = e1.step, D1 = e1.preview, A1 = e1.fastMode, L1 = S1 = void 0 === e1.quoteChar || null === e1.quoteChar ? '"' : e1.quoteChar;
            if (void 0 !== e1.escapeChar && (L1 = e1.escapeChar), ("string" != typeof O1 || -1 < b1.BAD_DELIMITERS.indexOf(O1)) && (O1 = ","), I1 === O1) throw new Error("Comment character same as delimiter");
            !0 === I1 ? I1 = "#" : ("string" != typeof I1 || -1 < b1.BAD_DELIMITERS.indexOf(I1)) && (I1 = !1), "\n" !== x1 && "\r" !== x1 && "\r\n" !== x1 && (x1 = "\n");
            var F1 = 0, z1 = !1;
            this.parse = function(r4, t5, i1) {
                if ("string" != typeof r4) throw new Error("Input must be a string");
                var n3 = r4.length, e1 = O1.length, s1 = x1.length, a1 = I1.length, o4 = M1(T1), h1 = [], u1 = [], f3 = [], d1 = F1 = 0;
                if (!r4) return C1();
                if (A1 || !1 !== A1 && -1 === r4.indexOf(S1)) {
                    for(var l1 = r4.split(x1), c1 = 0; c1 < l1.length; c1++){
                        if (f3 = l1[c1], F1 += f3.length, c1 !== l1.length - 1) F1 += x1.length;
                        else if (i1) return C1();
                        if (!I1 || f3.substring(0, a1) !== I1) {
                            if (o4) {
                                if (h1 = [], k3(f3.split(O1)), R1(), z1) return C1();
                            } else k3(f3.split(O1));
                            if (D1 && D1 <= c1) return h1 = h1.slice(0, D1), C1(!0);
                        }
                    }
                    return C1();
                }
                for(var p3 = r4.indexOf(O1, F1), g1 = r4.indexOf(x1, F1), _5 = new RegExp(j1(L1) + j1(S1), "g"), m1 = r4.indexOf(S1, F1);;)if (r4[F1] !== S1) if (I1 && 0 === f3.length && r4.substring(F1, F1 + a1) === I1) {
                    if (-1 === g1) return C1();
                    F1 = g1 + s1, g1 = r4.indexOf(x1, F1), p3 = r4.indexOf(O1, F1);
                } else if (-1 !== p3 && (p3 < g1 || -1 === g1)) f3.push(r4.substring(F1, p3)), F1 = p3 + e1, p3 = r4.indexOf(O1, F1);
                else {
                    if (-1 === g1) break;
                    if (f3.push(r4.substring(F1, g1)), w1(g1 + s1), o4 && (R1(), z1)) return C1();
                    if (D1 && h1.length >= D1) return C1(!0);
                }
                else for(m1 = F1, F1++;;){
                    if (-1 === (m1 = r4.indexOf(S1, m1 + 1))) return i1 || u1.push({
                        type: "Quotes",
                        code: "MissingQuotes",
                        message: "Quoted field unterminated",
                        row: h1.length,
                        index: F1
                    }), E1();
                    if (m1 === n3 - 1) return E1(r4.substring(F1, m1).replace(_5, S1));
                    if (S1 !== L1 || r4[m1 + 1] !== L1) {
                        if (S1 === L1 || 0 === m1 || r4[m1 - 1] !== L1) {
                            -1 !== p3 && p3 < m1 + 1 && (p3 = r4.indexOf(O1, m1 + 1)), -1 !== g1 && g1 < m1 + 1 && (g1 = r4.indexOf(x1, m1 + 1));
                            var y1 = b1(-1 === g1 ? p3 : Math.min(p3, g1));
                            if (r4.substr(m1 + 1 + y1, e1) === O1) {
                                f3.push(r4.substring(F1, m1).replace(_5, S1)), r4[F1 = m1 + 1 + y1 + e1] !== S1 && (m1 = r4.indexOf(S1, F1)), p3 = r4.indexOf(O1, F1), g1 = r4.indexOf(x1, F1);
                                break;
                            }
                            var v4 = b1(g1);
                            if (r4.substring(m1 + 1 + v4, m1 + 1 + v4 + s1) === x1) {
                                if (f3.push(r4.substring(F1, m1).replace(_5, S1)), w1(m1 + 1 + v4 + s1), p3 = r4.indexOf(O1, F1), m1 = r4.indexOf(S1, F1), o4 && (R1(), z1)) return C1();
                                if (D1 && h1.length >= D1) return C1(!0);
                                break;
                            }
                            u1.push({
                                type: "Quotes",
                                code: "InvalidQuotes",
                                message: "Trailing quote on quoted field is malformed",
                                row: h1.length,
                                index: F1
                            }), m1++;
                        }
                    } else m1++;
                }
                return E1();
                function k3(e1) {
                    h1.push(e1), d1 = F1;
                }
                function b1(e1) {
                    var t5 = 0;
                    if (-1 !== e1) {
                        var i1 = r4.substring(m1 + 1, e1);
                        i1 && "" === i1.trim() && (t5 = i1.length);
                    }
                    return t5;
                }
                function E1(e1) {
                    return i1 || (void 0 === e1 && (e1 = r4.substring(F1)), f3.push(e1), F1 = n3, k3(f3), o4 && R1()), C1();
                }
                function w1(e1) {
                    F1 = e1, k3(f3), f3 = [], g1 = r4.indexOf(x1, F1);
                }
                function C1(e1) {
                    return {
                        data: h1,
                        errors: u1,
                        meta: {
                            delimiter: O1,
                            linebreak: x1,
                            aborted: z1,
                            truncated: !!e1,
                            cursor: d1 + (t5 || 0)
                        }
                    };
                }
                function R1() {
                    T1(C1()), h1 = [], u1 = [];
                }
            }, this.abort = function() {
                z1 = !0;
            }, this.getCharIndex = function() {
                return F1;
            };
        }
        function _5(e1) {
            var t5 = e1.data, i1 = a1[t5.workerId], r4 = !1;
            if (t5.error) i1.userError(t5.error, t5.file);
            else if (t5.results && t5.results.data) {
                var n3 = {
                    abort: function() {
                        r4 = !0, m1(t5.workerId, {
                            data: [],
                            errors: [],
                            meta: {
                                aborted: !0
                            }
                        });
                    },
                    pause: y1,
                    resume: y1
                };
                if (M1(i1.userStep)) {
                    for(var s1 = 0; s1 < t5.results.data.length && (i1.userStep({
                        data: t5.results.data[s1],
                        errors: t5.results.errors,
                        meta: t5.results.meta
                    }, n3), !r4); s1++);
                    delete t5.results;
                } else M1(i1.userChunk) && (i1.userChunk(t5.results, n3, t5.file), delete t5.results);
            }
            t5.finished && !r4 && m1(t5.workerId, t5.results);
        }
        function m1(e1, t5) {
            var i1 = a1[e1];
            M1(i1.userComplete) && i1.userComplete(t5), i1.terminate(), delete a1[e1];
        }
        function y1() {
            throw new Error("Not implemented.");
        }
        function w1(e1) {
            if ("object" != typeof e1 || null === e1) return e1;
            var t5 = Array.isArray(e1) ? [] : {};
            for(var i1 in e1)t5[i1] = w1(e1[i1]);
            return t5;
        }
        function v4(e1, t5) {
            return function() {
                e1.apply(t5, arguments);
            };
        }
        function M1(e1) {
            return "function" == typeof e1;
        }
        return o4 && (f3.onmessage = function(e1) {
            var t5 = e1.data;
            void 0 === b1.WORKER_ID && t5 && (b1.WORKER_ID = t5.workerId);
            if ("string" == typeof t5.input) f3.postMessage({
                workerId: b1.WORKER_ID,
                results: b1.parse(t5.input, t5.config),
                finished: !0
            });
            else if (f3.File && t5.input instanceof File || t5.input instanceof Object) {
                var i1 = b1.parse(t5.input, t5.config);
                i1 && f3.postMessage({
                    workerId: b1.WORKER_ID,
                    results: i1,
                    finished: !0
                });
            }
        }), (l1.prototype = Object.create(u1.prototype)).constructor = l1, (c1.prototype = Object.create(u1.prototype)).constructor = c1, (p3.prototype = Object.create(p3.prototype)).constructor = p3, (g1.prototype = Object.create(u1.prototype)).constructor = g1, b1;
    });
})(papaparse_min);
/** Utility methods for creating & comparing fields. */ var Fields;
(function(Fields1) {
    function variable1(name1) {
        return {
            type: "variable",
            name: name1
        };
    }
    Fields1.variable = variable1;
    function literal1(value1) {
        return {
            type: "literal",
            value: value1
        };
    }
    Fields1.literal = literal1;
    function binaryOp1(left1, op1, right1) {
        return {
            type: "binaryop",
            left: left1,
            op: op1,
            right: right1
        };
    }
    Fields1.binaryOp = binaryOp1;
    function index1(obj1, index1) {
        return {
            type: "index",
            object: obj1,
            index: index1
        };
    }
    Fields1.index = index1;
    /** Converts a string in dot-notation-format into a variable which indexes. */ function indexVariable1(name1) {
        let parts1 = name1.split(".");
        let result1 = Fields1.variable(parts1[0]);
        for(let index1 = 1; index1 < parts1.length; index1++){
            result1 = Fields1.index(result1, Fields1.literal(parts1[index1]));
        }
        return result1;
    }
    Fields1.indexVariable = indexVariable1;
    function lambda1(args1, value1) {
        return {
            type: "lambda",
            arguments: args1,
            value: value1
        };
    }
    Fields1.lambda = lambda1;
    function func1(func1, args1) {
        return {
            type: "function",
            func: func1,
            arguments: args1
        };
    }
    Fields1.func = func1;
    function list1(values1) {
        return {
            type: "list",
            values: values1
        };
    }
    Fields1.list = list1;
    function object1(values1) {
        return {
            type: "object",
            values: values1
        };
    }
    Fields1.object = object1;
    function negate1(child1) {
        return {
            type: "negated",
            child: child1
        };
    }
    Fields1.negate = negate1;
    function isCompareOp1(op1) {
        return op1 == "<=" || op1 == "<" || op1 == ">" || op1 == ">=" || op1 == "!=" || op1 == "=";
    }
    Fields1.isCompareOp = isCompareOp1;
    Fields1.NULL = Fields1.literal(null);
})(Fields || (Fields = {}));
/** AST implementation for queries over data sources. */ /** Utility functions for creating and manipulating sources. */ var Sources;
(function(Sources1) {
    /** Create a source which searches from a tag. */ function tag1(tag1) {
        return {
            type: "tag",
            tag: tag1
        };
    }
    Sources1.tag = tag1;
    /** Create a source which fetches from a CSV file. */ function csv1(path1) {
        return {
            type: "csv",
            path: path1
        };
    }
    Sources1.csv = csv1;
    /** Create a source which searches for files under a folder prefix. */ function folder1(prefix1) {
        return {
            type: "folder",
            folder: prefix1
        };
    }
    Sources1.folder = folder1;
    /** Create a source which searches for files which link to/from a given file. */ function link3(file1, incoming1) {
        return {
            type: "link",
            file: file1,
            direction: incoming1 ? "incoming" : "outgoing"
        };
    }
    Sources1.link = link3;
    /** Create a source which joins two sources by a logical operator (and/or). */ function binaryOp1(left1, op1, right1) {
        return {
            type: "binaryop",
            left: left1,
            op: op1,
            right: right1
        };
    }
    Sources1.binaryOp = binaryOp1;
    /** Create a source which takes the intersection of two sources. */ function and1(left1, right1) {
        return {
            type: "binaryop",
            left: left1,
            op: "&",
            right: right1
        };
    }
    Sources1.and = and1;
    /** Create a source which takes the union of two sources. */ function or1(left1, right1) {
        return {
            type: "binaryop",
            left: left1,
            op: "|",
            right: right1
        };
    }
    Sources1.or = or1;
    /** Create a source which negates the underlying source. */ function negate1(child1) {
        return {
            type: "negate",
            child: child1
        };
    }
    Sources1.negate = negate1;
    function empty1() {
        return {
            type: "empty"
        };
    }
    Sources1.empty = empty1;
})(Sources || (Sources = {}));
/** Emoji regex without any additional flags. */ const EMOJI_REGEX = new RegExp(emojiRegex(), "");
/** Provides a lookup table for unit durations of the given type. */ const DURATION_TYPES = {
    year: Duration.fromObject({
        years: 1
    }),
    years: Duration.fromObject({
        years: 1
    }),
    yr: Duration.fromObject({
        years: 1
    }),
    yrs: Duration.fromObject({
        years: 1
    }),
    month: Duration.fromObject({
        months: 1
    }),
    months: Duration.fromObject({
        months: 1
    }),
    mo: Duration.fromObject({
        months: 1
    }),
    mos: Duration.fromObject({
        months: 1
    }),
    week: Duration.fromObject({
        weeks: 1
    }),
    weeks: Duration.fromObject({
        weeks: 1
    }),
    wk: Duration.fromObject({
        weeks: 1
    }),
    wks: Duration.fromObject({
        weeks: 1
    }),
    w: Duration.fromObject({
        weeks: 1
    }),
    day: Duration.fromObject({
        days: 1
    }),
    days: Duration.fromObject({
        days: 1
    }),
    d: Duration.fromObject({
        days: 1
    }),
    hour: Duration.fromObject({
        hours: 1
    }),
    hours: Duration.fromObject({
        hours: 1
    }),
    hr: Duration.fromObject({
        hours: 1
    }),
    hrs: Duration.fromObject({
        hours: 1
    }),
    h: Duration.fromObject({
        hours: 1
    }),
    minute: Duration.fromObject({
        minutes: 1
    }),
    minutes: Duration.fromObject({
        minutes: 1
    }),
    min: Duration.fromObject({
        minutes: 1
    }),
    mins: Duration.fromObject({
        minutes: 1
    }),
    m: Duration.fromObject({
        minutes: 1
    }),
    second: Duration.fromObject({
        seconds: 1
    }),
    seconds: Duration.fromObject({
        seconds: 1
    }),
    sec: Duration.fromObject({
        seconds: 1
    }),
    secs: Duration.fromObject({
        seconds: 1
    }),
    s: Duration.fromObject({
        seconds: 1
    })
};
/** Shorthand for common dates (relative to right now). */ const DATE_SHORTHANDS = {
    now: ()=>DateTime.local(),
    today: ()=>DateTime.local().startOf("day"),
    yesterday: ()=>DateTime.local().startOf("day").minus(Duration.fromObject({
            days: 1
        })),
    tomorrow: ()=>DateTime.local().startOf("day").plus(Duration.fromObject({
            days: 1
        })),
    sow: ()=>DateTime.local().startOf("week"),
    "start-of-week": ()=>DateTime.local().startOf("week"),
    eow: ()=>DateTime.local().endOf("week"),
    "end-of-week": ()=>DateTime.local().endOf("week"),
    soy: ()=>DateTime.local().startOf("year"),
    "start-of-year": ()=>DateTime.local().startOf("year"),
    eoy: ()=>DateTime.local().endOf("year"),
    "end-of-year": ()=>DateTime.local().endOf("year"),
    som: ()=>DateTime.local().startOf("month"),
    "start-of-month": ()=>DateTime.local().startOf("month"),
    eom: ()=>DateTime.local().endOf("month"),
    "end-of-month": ()=>DateTime.local().endOf("month")
};
/**
 * Keywords which cannot be used as variables directly. Use `row.<thing>` if it is a variable you have defined and want
 * to access.
 */ const KEYWORDS = [
    "FROM",
    "WHERE",
    "LIMIT",
    "GROUP",
    "FLATTEN"
];
///////////////
// Utilities //
///////////////
/** Split on unescaped pipes in an inner link. */ function splitOnUnescapedPipe(link3) {
    let pipe1 = -1;
    while((pipe1 = link3.indexOf("|", pipe1 + 1)) >= 0){
        if (pipe1 > 0 && link3[pipe1 - 1] == "\\") continue;
        return [
            link3.substring(0, pipe1).replace(/\\\|/g, "|"),
            link3.substring(pipe1 + 1)
        ];
    }
    return [
        link3.replace(/\\\|/g, "|"),
        undefined
    ];
}
/** Attempt to parse the inside of a link to pull out display name, subpath, etc. */ function parseInnerLink(rawlink1) {
    let [link3, display1] = splitOnUnescapedPipe(rawlink1);
    return Link.infer(link3, false, display1);
}
/** Create a left-associative binary parser which parses the given sub-element and separator. Handles whitespace. */ function createBinaryParser(child1, sep1, combine1) {
    return parsimmon_umd_min.exports.seqMap(child1, parsimmon_umd_min.exports.seq(parsimmon_umd_min.exports.optWhitespace, sep1, parsimmon_umd_min.exports.optWhitespace, child1).many(), (first1, rest1)=>{
        if (rest1.length == 0) return first1;
        let node1 = combine1(first1, rest1[0][1], rest1[0][3]);
        for(let index1 = 1; index1 < rest1.length; index1++){
            node1 = combine1(node1, rest1[index1][1], rest1[index1][3]);
        }
        return node1;
    });
}
function chainOpt(base1, ...funcs1) {
    return parsimmon_umd_min.exports.custom((success1, failure1)=>{
        return (input1, i1)=>{
            let result1 = base1._(input1, i1);
            if (!result1.status) return result1;
            for (let func1 of funcs1){
                let next1 = func1(result1.value)._(input1, result1.index);
                if (!next1.status) return result1;
                result1 = next1;
            }
            return result1;
        };
    });
}
const EXPRESSION = parsimmon_umd_min.exports.createLanguage({
    // A floating point number; the decimal point is optional.
    number: (q1)=>parsimmon_umd_min.exports.regexp(/-?[0-9]+(\.[0-9]+)?/).map((str1)=>Number.parseFloat(str1)).desc("number"),
    // A quote-surrounded string which supports escape characters ('\').
    string: (q1)=>parsimmon_umd_min.exports.string('"').then(parsimmon_umd_min.exports.alt(q1.escapeCharacter, parsimmon_umd_min.exports.noneOf('"\\')).atLeast(0).map((chars1)=>chars1.join(""))).skip(parsimmon_umd_min.exports.string('"')).desc("string"),
    escapeCharacter: (_5)=>parsimmon_umd_min.exports.string("\\").then(parsimmon_umd_min.exports.any).map((escaped1)=>{
            // If we are escaping a backslash or a quote, pass in on in escaped form
            if (escaped1 === '"') return '"';
            if (escaped1 === "\\") return "\\";
            else return "\\" + escaped1;
        }),
    // A boolean true/false value.
    bool: (_5)=>parsimmon_umd_min.exports.regexp(/true|false|True|False/).map((str1)=>str1.toLowerCase() == "true").desc("boolean ('true' or 'false')"),
    // A tag of the form '#stuff/hello-there'.
    tag: (_5)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("#"), parsimmon_umd_min.exports.alt(parsimmon_umd_min.exports.regexp(/[^\u2000-\u206F\u2E00-\u2E7F'!"#$%&()*+,.:;<=>?@^`{|}~\[\]\\\s]/).desc("text")).many(), (start1, rest1)=>start1 + rest1.join("")).desc("tag ('#hello/stuff')"),
    // A variable identifier, which is alphanumeric and must start with a letter or... emoji.
    identifier: (_5)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.alt(parsimmon_umd_min.exports.regexp(/\p{Letter}/u), parsimmon_umd_min.exports.regexp(EMOJI_REGEX).desc("text")), parsimmon_umd_min.exports.alt(parsimmon_umd_min.exports.regexp(/[0-9\p{Letter}_-]/u), parsimmon_umd_min.exports.regexp(EMOJI_REGEX).desc("text")).many(), (first1, rest1)=>first1 + rest1.join("")).desc("variable identifier"),
    // An Obsidian link of the form [[<link>]].
    link: (_5)=>parsimmon_umd_min.exports.regexp(/\[\[([^\[\]]*?)\]\]/u, 1).map((linkInner1)=>parseInnerLink(linkInner1)).desc("file link"),
    // An embeddable link which can start with '!'. This overlaps with the normal negation operator, so it is only
    // provided for metadata parsing.
    embedLink: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("!").atMost(1), q1.link, (p3, l1)=>{
            if (p3.length > 0) l1.embed = true;
            return l1;
        }).desc("file link"),
    // Binary plus or minus operator.
    binaryPlusMinus: (_5)=>parsimmon_umd_min.exports.regexp(/\+|-/).map((str1)=>str1).desc("'+' or '-'"),
    // Binary times or divide operator.
    binaryMulDiv: (_5)=>parsimmon_umd_min.exports.regexp(/\*|\/|%/).map((str1)=>str1).desc("'*' or '/' or '%'"),
    // Binary comparison operator.
    binaryCompareOp: (_5)=>parsimmon_umd_min.exports.regexp(/>=|<=|!=|>|<|=/).map((str1)=>str1).desc("'>=' or '<=' or '!=' or '=' or '>' or '<'"),
    // Binary boolean combination operator.
    binaryBooleanOp: (_5)=>parsimmon_umd_min.exports.regexp(/and|or|&|\|/i).map((str1)=>{
            if (str1.toLowerCase() == "and") return "&";
            else if (str1.toLowerCase() == "or") return "|";
            else return str1;
        }).desc("'and' or 'or'"),
    // A date which can be YYYY-MM[-DDTHH:mm:ss].
    rootDate: (_5)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.regexp(/\d{4}/), parsimmon_umd_min.exports.string("-"), parsimmon_umd_min.exports.regexp(/\d{2}/), (year1, _5, month1)=>{
            return DateTime.fromObject({
                year: Number.parseInt(year1),
                month: Number.parseInt(month1)
            });
        }).desc("date in format YYYY-MM[-DDTHH-MM-SS.MS]"),
    dateShorthand: (_5)=>parsimmon_umd_min.exports.alt(...Object.keys(DATE_SHORTHANDS).sort((a1, b1)=>b1.length - a1.length).map(parsimmon_umd_min.exports.string)),
    date: (q1)=>chainOpt(q1.rootDate, (ym1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("-"), parsimmon_umd_min.exports.regexp(/\d{2}/), (_5, day1)=>ym1.set({
                    day: Number.parseInt(day1)
                })), (ymd1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("T"), parsimmon_umd_min.exports.regexp(/\d{2}/), (_5, hour1)=>ymd1.set({
                    hour: Number.parseInt(hour1)
                })), (ymdh1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string(":"), parsimmon_umd_min.exports.regexp(/\d{2}/), (_5, minute1)=>ymdh1.set({
                    minute: Number.parseInt(minute1)
                })), (ymdhm1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string(":"), parsimmon_umd_min.exports.regexp(/\d{2}/), (_5, second1)=>ymdhm1.set({
                    second: Number.parseInt(second1)
                })), (ymdhms1)=>parsimmon_umd_min.exports.alt(parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("."), parsimmon_umd_min.exports.regexp(/\d{3}/), (_5, millisecond1)=>ymdhms1.set({
                    millisecond: Number.parseInt(millisecond1)
                })), parsimmon_umd_min.exports.succeed(ymdhms1) // pass
            ), (dt1)=>parsimmon_umd_min.exports.alt(parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("+").or(parsimmon_umd_min.exports.string("-")), parsimmon_umd_min.exports.regexp(/\d{1,2}(:\d{2})?/), (pm1, hr1)=>dt1.setZone("UTC" + pm1 + hr1, {
                    keepLocalTime: true
                })), parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("Z"), ()=>dt1.setZone("utc", {
                    keepLocalTime: true
                })), parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("["), parsimmon_umd_min.exports.regexp(/[0-9A-Za-z+-\/]+/u), parsimmon_umd_min.exports.string("]"), (_a1, zone1, _b1)=>dt1.setZone(zone1, {
                    keepLocalTime: true
                })))).assert((dt1)=>dt1.isValid, "valid date").desc("date in format YYYY-MM[-DDTHH-MM-SS.MS]"),
    // A date, plus various shorthand times of day it could be.
    datePlus: (q1)=>parsimmon_umd_min.exports.alt(q1.dateShorthand.map((d1)=>DATE_SHORTHANDS[d1]()), q1.date).desc("date in format YYYY-MM[-DDTHH-MM-SS.MS] or in shorthand"),
    // A duration of time.
    durationType: (_5)=>parsimmon_umd_min.exports.alt(...Object.keys(DURATION_TYPES).sort((a1, b1)=>b1.length - a1.length).map(parsimmon_umd_min.exports.string)),
    duration: (q1)=>parsimmon_umd_min.exports.seqMap(q1.number, parsimmon_umd_min.exports.optWhitespace, q1.durationType, (count1, _5, t5)=>DURATION_TYPES[t5].mapUnits((x1)=>x1 * count1)).sepBy1(parsimmon_umd_min.exports.string(",").trim(parsimmon_umd_min.exports.optWhitespace).or(parsimmon_umd_min.exports.optWhitespace)).map((durations1)=>durations1.reduce((p3, c1)=>p3.plus(c1))).desc("duration like 4hr2min"),
    // A raw null value.
    rawNull: (_5)=>parsimmon_umd_min.exports.string("null"),
    // Source parsing.
    tagSource: (q1)=>q1.tag.map((tag1)=>Sources.tag(tag1)),
    csvSource: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("csv(").skip(parsimmon_umd_min.exports.optWhitespace), q1.string, parsimmon_umd_min.exports.string(")"), (_11, path1, _21)=>Sources.csv(path1)),
    linkIncomingSource: (q1)=>q1.link.map((link3)=>Sources.link(link3.path, true)),
    linkOutgoingSource: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("outgoing(").skip(parsimmon_umd_min.exports.optWhitespace), q1.link, parsimmon_umd_min.exports.string(")"), (_11, link3, _21)=>Sources.link(link3.path, false)),
    folderSource: (q1)=>q1.string.map((str1)=>Sources.folder(str1)),
    parensSource: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("("), parsimmon_umd_min.exports.optWhitespace, q1.source, parsimmon_umd_min.exports.optWhitespace, parsimmon_umd_min.exports.string(")"), (_11, _21, field1, _31, _41)=>field1),
    negateSource: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.alt(parsimmon_umd_min.exports.string("-"), parsimmon_umd_min.exports.string("!")), q1.atomSource, (_5, source1)=>Sources.negate(source1)),
    atomSource: (q1)=>parsimmon_umd_min.exports.alt(q1.parensSource, q1.negateSource, q1.linkOutgoingSource, q1.linkIncomingSource, q1.folderSource, q1.tagSource, q1.csvSource),
    binaryOpSource: (q1)=>createBinaryParser(q1.atomSource, q1.binaryBooleanOp.map((s1)=>s1), Sources.binaryOp),
    source: (q1)=>q1.binaryOpSource,
    // Field parsing.
    variableField: (q1)=>q1.identifier.chain((r4)=>{
            if (KEYWORDS.includes(r4.toUpperCase())) {
                return parsimmon_umd_min.exports.fail("Variable fields cannot be a keyword (" + KEYWORDS.join(" or ") + ")");
            } else {
                return parsimmon_umd_min.exports.succeed(Fields.variable(r4));
            }
        }).desc("variable"),
    numberField: (q1)=>q1.number.map((val3)=>Fields.literal(val3)).desc("number"),
    stringField: (q1)=>q1.string.map((val3)=>Fields.literal(val3)).desc("string"),
    boolField: (q1)=>q1.bool.map((val3)=>Fields.literal(val3)).desc("boolean"),
    dateField: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("date("), parsimmon_umd_min.exports.optWhitespace, q1.datePlus, parsimmon_umd_min.exports.optWhitespace, parsimmon_umd_min.exports.string(")"), (prefix1, _11, date1, _21, postfix1)=>Fields.literal(date1)).desc("date"),
    durationField: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("dur("), parsimmon_umd_min.exports.optWhitespace, q1.duration, parsimmon_umd_min.exports.optWhitespace, parsimmon_umd_min.exports.string(")"), (prefix1, _11, dur1, _21, postfix1)=>Fields.literal(dur1)).desc("duration"),
    nullField: (q1)=>q1.rawNull.map((_5)=>Fields.NULL),
    linkField: (q1)=>q1.link.map((f3)=>Fields.literal(f3)),
    listField: (q1)=>q1.field.sepBy(parsimmon_umd_min.exports.string(",").trim(parsimmon_umd_min.exports.optWhitespace)).wrap(parsimmon_umd_min.exports.string("[").skip(parsimmon_umd_min.exports.optWhitespace), parsimmon_umd_min.exports.optWhitespace.then(parsimmon_umd_min.exports.string("]"))).map((l1)=>Fields.list(l1)).desc("list ('[1, 2, 3]')"),
    objectField: (q1)=>parsimmon_umd_min.exports.seqMap(q1.identifier.or(q1.string), parsimmon_umd_min.exports.string(":").trim(parsimmon_umd_min.exports.optWhitespace), q1.field, (name1, _sep1, value1)=>{
            return {
                name: name1,
                value: value1
            };
        }).sepBy(parsimmon_umd_min.exports.string(",").trim(parsimmon_umd_min.exports.optWhitespace)).wrap(parsimmon_umd_min.exports.string("{").skip(parsimmon_umd_min.exports.optWhitespace), parsimmon_umd_min.exports.optWhitespace.then(parsimmon_umd_min.exports.string("}"))).map((vals1)=>{
            let res1 = {};
            for (let entry1 of vals1)res1[entry1.name] = entry1.value;
            return Fields.object(res1);
        }).desc("object ('{ a: 1, b: 2 }')"),
    atomInlineField: (q1)=>parsimmon_umd_min.exports.alt(q1.date, q1.duration.map((d1)=>normalizeDuration(d1)), q1.string, q1.tag, q1.embedLink, q1.bool, q1.number, q1.rawNull),
    inlineFieldList: (q1)=>q1.atomInlineField.sepBy(parsimmon_umd_min.exports.string(",").trim(parsimmon_umd_min.exports.optWhitespace).lookahead(q1.atomInlineField)),
    inlineField: (q1)=>parsimmon_umd_min.exports.alt(parsimmon_umd_min.exports.seqMap(q1.atomInlineField, parsimmon_umd_min.exports.string(",").trim(parsimmon_umd_min.exports.optWhitespace), q1.inlineFieldList, (f3, _s1, l1)=>[
                f3
            ].concat(l1)), q1.atomInlineField),
    atomField: (q1)=>parsimmon_umd_min.exports.alt(// Place embed links above negated fields as they are the special parser case '![[thing]]' and are generally unambigious.
        q1.embedLink.map((l1)=>Fields.literal(l1)), q1.negatedField, q1.linkField, q1.listField, q1.objectField, q1.lambdaField, q1.parensField, q1.boolField, q1.numberField, q1.stringField, q1.dateField, q1.durationField, q1.nullField, q1.variableField),
    indexField: (q1)=>parsimmon_umd_min.exports.seqMap(q1.atomField, parsimmon_umd_min.exports.alt(q1.dotPostfix, q1.indexPostfix, q1.functionPostfix).many(), (obj1, postfixes1)=>{
            let result1 = obj1;
            for (let post1 of postfixes1){
                switch(post1.type){
                    case "dot":
                        result1 = Fields.index(result1, Fields.literal(post1.field));
                        break;
                    case "index":
                        result1 = Fields.index(result1, post1.field);
                        break;
                    case "function":
                        result1 = Fields.func(result1, post1.fields);
                        break;
                }
            }
            return result1;
        }),
    negatedField: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("!"), q1.indexField, (_5, field1)=>Fields.negate(field1)).desc("negated field"),
    parensField: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("("), parsimmon_umd_min.exports.optWhitespace, q1.field, parsimmon_umd_min.exports.optWhitespace, parsimmon_umd_min.exports.string(")"), (_11, _21, field1, _31, _41)=>field1),
    lambdaField: (q1)=>parsimmon_umd_min.exports.seqMap(q1.identifier.sepBy(parsimmon_umd_min.exports.string(",").trim(parsimmon_umd_min.exports.optWhitespace)).wrap(parsimmon_umd_min.exports.string("(").trim(parsimmon_umd_min.exports.optWhitespace), parsimmon_umd_min.exports.string(")").trim(parsimmon_umd_min.exports.optWhitespace)), parsimmon_umd_min.exports.string("=>").trim(parsimmon_umd_min.exports.optWhitespace), q1.field, (ident1, _ignore1, value1)=>{
            return {
                type: "lambda",
                arguments: ident1,
                value: value1
            };
        }),
    dotPostfix: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("."), q1.identifier, (_5, field1)=>{
            return {
                type: "dot",
                field: field1
            };
        }),
    indexPostfix: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("["), parsimmon_umd_min.exports.optWhitespace, q1.field, parsimmon_umd_min.exports.optWhitespace, parsimmon_umd_min.exports.string("]"), (_5, _21, field1, _31, _41)=>{
            return {
                type: "index",
                field: field1
            };
        }),
    functionPostfix: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.string("("), parsimmon_umd_min.exports.optWhitespace, q1.field.sepBy(parsimmon_umd_min.exports.string(",").trim(parsimmon_umd_min.exports.optWhitespace)), parsimmon_umd_min.exports.optWhitespace, parsimmon_umd_min.exports.string(")"), (_5, _11, fields1, _21, _31)=>{
            return {
                type: "function",
                fields: fields1
            };
        }),
    // The precedence hierarchy of operators - multiply/divide, add/subtract, compare, and then boolean operations.
    binaryMulDivField: (q1)=>createBinaryParser(q1.indexField, q1.binaryMulDiv, Fields.binaryOp),
    binaryPlusMinusField: (q1)=>createBinaryParser(q1.binaryMulDivField, q1.binaryPlusMinus, Fields.binaryOp),
    binaryCompareField: (q1)=>createBinaryParser(q1.binaryPlusMinusField, q1.binaryCompareOp, Fields.binaryOp),
    binaryBooleanField: (q1)=>createBinaryParser(q1.binaryCompareField, q1.binaryBooleanOp, Fields.binaryOp),
    binaryOpField: (q1)=>q1.binaryBooleanField,
    field: (q1)=>q1.binaryOpField
});
/**
 * Attempt to parse a field from the given text, returning a string error if the
 * parse failed.
 */ function parseField(text1) {
    try {
        return Result.success(EXPRESSION.field.tryParse(text1));
    } catch (error1) {
        return Result.failure("" + error1);
    }
}
/** Parse inline fields and other embedded metadata in a line. */ /** The wrapper characters that can be used to define an inline field. */ const INLINE_FIELD_WRAPPERS = Object.freeze({
    "[": "]",
    "(": ")"
});
/**
 * Find a matching closing bracket that occurs at or after `start`, respecting nesting and escapes. If found,
 * returns the value contained within and the string index after the end of the value.
 */ function findClosing(line1, start1, open1, close1) {
    let nesting1 = 0;
    let escaped1 = false;
    for(let index1 = start1; index1 < line1.length; index1++){
        let char1 = line1.charAt(index1);
        // Allows for double escapes like '\\' to be rendered normally.
        if (char1 == "\\") {
            escaped1 = !escaped1;
            continue;
        }
        // If escaped, ignore the next character for computing nesting, regardless of what it is.
        if (escaped1) {
            escaped1 = false;
            continue;
        }
        if (char1 == open1) nesting1++;
        else if (char1 == close1) nesting1--;
        // Only occurs if we are on a close character and trhere is no more nesting.
        if (nesting1 < 0) return {
            value: line1.substring(start1, index1).trim(),
            endIndex: index1 + 1
        };
        escaped1 = false;
    }
    return undefined;
}
/** Find the '::' separator in an inline field. */ function findSeparator(line1, start1) {
    let sep1 = line1.indexOf("::", start1);
    if (sep1 < 0) return undefined;
    return {
        key: line1.substring(start1, sep1).trim(),
        valueIndex: sep1 + 2
    };
}
/** Try to completely parse an inline field starting at the given position. Assuems `start` is on a wrapping character. */ function findSpecificInlineField(line1, start1) {
    let open1 = line1.charAt(start1);
    let key1 = findSeparator(line1, start1 + 1);
    if (key1 === undefined) return undefined;
    // Fail the match if we find any separator characters (not allowed in keys).
    for (let sep1 of Object.keys(INLINE_FIELD_WRAPPERS).concat(Object.values(INLINE_FIELD_WRAPPERS))){
        if (key1.key.includes(sep1)) return undefined;
    }
    let value1 = findClosing(line1, key1.valueIndex, open1, INLINE_FIELD_WRAPPERS[open1]);
    if (value1 === undefined) return undefined;
    return {
        key: key1.key,
        value: value1.value,
        start: start1,
        startValue: key1.valueIndex,
        end: value1.endIndex,
        wrapping: open1
    };
}
/** Parse a textual inline field value into something we can work with. */ function parseInlineValue(value1) {
    // Empty inline values (i.e., no text) should map to null to match long-term Dataview semantics.
    // Null is also a more universal type to deal with than strings, since all functions accept nulls.
    if (value1.trim() == "") return null;
    // The stripped literal field parser understands all of the non-array/non-object fields and can parse them for us.
    // Inline field objects are not currently supported; inline array objects have to be handled by the parser
    // separately.
    let inline1 = EXPRESSION.inlineField.parse(value1);
    if (inline1.status) return inline1.value;
    else return value1;
}
/** Extracts inline fields of the form '[key:: value]' from a line of text. This is done in a relatively
 * "robust" way to avoid failing due to bad nesting or other interfering Markdown symbols:
 *
 * - Look for any wrappers ('[' and '(') in the line, trying to parse whatever comes after it as an inline key::.
 * - If successful, scan until you find a matching end bracket, and parse whatever remains as an inline value.
 */ function extractInlineFields(line1, includeTaskFields1 = false) {
    let fields1 = [];
    for (let wrapper1 of Object.keys(INLINE_FIELD_WRAPPERS)){
        let foundIndex1 = line1.indexOf(wrapper1);
        while(foundIndex1 >= 0){
            let parsedField1 = findSpecificInlineField(line1, foundIndex1);
            if (!parsedField1) {
                foundIndex1 = line1.indexOf(wrapper1, foundIndex1 + 1);
                continue;
            }
            fields1.push(parsedField1);
            foundIndex1 = line1.indexOf(wrapper1, parsedField1.end);
        }
    }
    if (includeTaskFields1) fields1 = fields1.concat(extractSpecialTaskFields(line1));
    fields1.sort((a1, b1)=>a1.start - b1.start);
    let filteredFields1 = [];
    for(let i1 = 0; i1 < fields1.length; i1++){
        if (i1 == 0 || filteredFields1[filteredFields1.length - 1].end < fields1[i1].start) {
            filteredFields1.push(fields1[i1]);
        }
    }
    return filteredFields1;
}
/** Validates that a raw field name has a valid form. */ const FULL_LINE_KEY_PART = parsimmon_umd_min.exports.alt(parsimmon_umd_min.exports.regexp(new RegExp(emojiRegex(), "u")), parsimmon_umd_min.exports.regexp(/[0-9\p{Letter}\w\s_/-]+/u)).many().map((parts1)=>parts1.join(""));
parsimmon_umd_min.exports.regexp(/[^0-9\w\p{Letter}]*/u).then(FULL_LINE_KEY_PART).skip(parsimmon_umd_min.exports.regexp(/[_\*~`]*/u));
const CREATED_DATE_REGEX = /\u{2795}\s*(\d{4}-\d{2}-\d{2})/u;
const DUE_DATE_REGEX = /(?:\u{1F4C5}|\u{1F4C6}|\u{1F5D3}\u{FE0F}?)\s*(\d{4}-\d{2}-\d{2})/u;
const DONE_DATE_REGEX = /\u{2705}\s*(\d{4}-\d{2}-\d{2})/u;
const SCHEDULED_DATE_REGEX = /[\u{23F3}\u{231B}]\s*(\d{4}-\d{2}-\d{2})/u;
const START_DATE_REGEX = /\u{1F6EB}\s*(\d{4}-\d{2}-\d{2})/u;
const EMOJI_REGEXES = [
    {
        regex: CREATED_DATE_REGEX,
        key: "created"
    },
    {
        regex: START_DATE_REGEX,
        key: "start"
    },
    {
        regex: SCHEDULED_DATE_REGEX,
        key: "scheduled"
    },
    {
        regex: DUE_DATE_REGEX,
        key: "due"
    },
    {
        regex: DONE_DATE_REGEX,
        key: "completion"
    }
];
/** Parse special completed/due/done task fields which are marked via emoji. */ function extractSpecialTaskFields(line1) {
    let results1 = [];
    for (let { regex: regex1, key: key1 } of EMOJI_REGEXES){
        const match1 = regex1.exec(line1);
        if (!match1) continue;
        results1.push({
            key: key1,
            value: match1[1],
            start: match1.index,
            startValue: match1.index + 1,
            end: match1.index + match1[0].length,
            wrapping: "emoji-shorthand"
        });
    }
    return results1;
}
/** Sets or replaces the value of an inline field; if the value is 'undefined', deletes the key. */ function setInlineField(source1, key1, value1) {
    let existing1 = extractInlineFields(source1);
    let existingKeys1 = existing1.filter((f3)=>f3.key == key1);
    // Don't do anything if there are duplicate keys OR the key already doesn't exist.
    if (existingKeys1.length > 2 || existingKeys1.length == 0 && !value1) return source1;
    let existingKey1 = existingKeys1[0];
    let annotation1 = value1 ? `[${key1}:: ${value1}]` : "";
    if (existingKey1) {
        let prefix1 = source1.substring(0, existingKey1.start);
        let suffix1 = source1.substring(existingKey1.end);
        if (annotation1) return `${prefix1}${annotation1}${suffix1}`;
        else return `${prefix1}${suffix1.trimStart()}`;
    } else if (annotation1) {
        return `${source1.trimEnd()} ${annotation1}`;
    }
    return source1;
}
function setEmojiShorthandCompletionField(source1, value1) {
    const existing1 = extractInlineFields(source1, true);
    const existingKeys1 = existing1.filter((f3)=>f3.key === "completion" && f3.wrapping === "emoji-shorthand");
    // Don't do anything if there are duplicate keys OR the key already doesn't exist.
    if (existingKeys1.length > 2 || existingKeys1.length == 0 && !value1) return source1;
    /* No wrapper, add own spacing at start */ const annotation1 = value1 ? ` ✅ ${value1}` : "";
    let existingKey1 = existingKeys1[0];
    if (existingKey1) {
        const prefix1 = source1.substring(0, existingKey1.start);
        const suffix1 = source1.substring(existingKey1.end);
        return `${prefix1.trimEnd()}${annotation1}${suffix1}`;
    } else {
        return `${source1.trimEnd()}${annotation1}`;
    }
}
/** All extracted markdown file metadata obtained from a file. */ class PageMetadata {
    constructor(path1, init1){
        this.path = path1;
        this.fields = new Map();
        this.frontmatter = {};
        this.tags = new Set();
        this.aliases = new Set();
        this.links = [];
        Object.assign(this, init1);
        this.lists = (this.lists || []).map((l1)=>new ListItem$1(l1));
    }
    /** Canonicalize raw links and other data in partial data with normalizers, returning a completed object. */ static canonicalize(data1, linkNormalizer1) {
        // Mutate the data for now, which is probably a bad idea but... all well.
        if (data1.frontmatter) {
            data1.frontmatter = Values.mapLeaves(data1.frontmatter, (t5)=>Values.isLink(t5) ? linkNormalizer1(t5) : t5);
        }
        if (data1.fields) {
            for (let [key1, value1] of data1.fields.entries()){
                data1.fields.set(key1, Values.mapLeaves(value1, (t5)=>Values.isLink(t5) ? linkNormalizer1(t5) : t5));
            }
        }
        if (data1.lists) {
            for (let item1 of data1.lists){
                for (let [key1, value1] of item1.fields.entries()){
                    item1.fields.set(key1, value1.map((x1)=>Values.mapLeaves(x1, (t5)=>Values.isLink(t5) ? linkNormalizer1(t5) : t5)));
                }
            }
        }
        if (data1.links) {
            data1.links = data1.links.map((l1)=>linkNormalizer1(l1));
        }
        // This is pretty ugly, but it's not possible to normalize on the worker thread that does parsing.
        // The best way to improve this is to instead just canonicalize the entire data object; I can try to
        // optimize `Values.mapLeaves` to only mutate if it actually changes things.
        return new PageMetadata(data1.path, data1);
    }
    /** The name (based on path) of this file. */ name() {
        return getFileTitle(this.path);
    }
    /** The containing folder (based on path) of this file. */ folder() {
        return getParentFolder(this.path);
    }
    /** The extension of this file (likely 'md'). */ extension() {
        return getExtension(this.path);
    }
    /** Return a set of tags AND all of their parent tags (so #hello/yes would become #hello, #hello/yes). */ fullTags() {
        let result1 = new Set();
        for (let tag1 of this.tags){
            for (let subtag1 of extractSubtags(tag1))result1.add(subtag1);
        }
        return result1;
    }
    /** Convert all links in this file to file links. */ fileLinks() {
        // We want to make them distinct, but where links are not raw links we
        // now keep the additional metadata.
        let distinctLinks1 = new Set(this.links);
        return Array.from(distinctLinks1);
    }
    /** Map this metadata to a full object; uses the index for additional data lookups.  */ serialize(index1, cache1) {
        // Convert list items via the canonicalization cache.
        let realCache1 = cache1 !== null && cache1 !== void 0 ? cache1 : new ListSerializationCache(this.lists);
        let result1 = {
            file: {
                path: this.path,
                folder: this.folder(),
                name: this.name(),
                link: Link.file(this.path),
                outlinks: this.fileLinks(),
                inlinks: Array.from(index1.links.getInverse(this.path)).map((l1)=>Link.file(l1)),
                etags: Array.from(this.tags),
                tags: Array.from(this.fullTags()),
                aliases: Array.from(this.aliases),
                lists: this.lists.map((l1)=>realCache1.get(l1.line)),
                tasks: this.lists.filter((l1)=>!!l1.task).map((l1)=>realCache1.get(l1.line)),
                ctime: this.ctime,
                cday: stripTime(this.ctime),
                mtime: this.mtime,
                mday: stripTime(this.mtime),
                size: this.size,
                starred: index1.starred.starred(this.path),
                frontmatter: Values.deepCopy(this.frontmatter),
                ext: this.extension()
            }
        };
        // Add the current day if present.
        if (this.day) result1.file.day = this.day;
        // Then append the computed fields.
        for (let [key1, value1] of this.fields.entries()){
            if (key1 in result1) continue; // Don't allow fields to override existing keys.
            result1[key1] = value1;
        }
        return result1;
    }
}
/** A list item inside of a list. */ class ListItem$1 {
    constructor(init1){
        Object.assign(this, init1);
        this.fields = this.fields || new Map();
        this.tags = this.tags || new Set();
        this.children = this.children || [];
        this.links = this.links || [];
    }
    id() {
        return `${this.file().path}-${this.line}`;
    }
    file() {
        return this.link.toFile();
    }
    markdown() {
        if (this.task) return `${this.symbol} [${this.task.completed ? "x" : " "}] ${this.text}`;
        else return `${this.symbol} ${this.text}`;
    }
    created() {
        var _a1, _b1, _c1;
        return (_c1 = (_b1 = (_a1 = this.fields.get("created")) !== null && _a1 !== void 0 ? _a1 : this.fields.get("ctime")) !== null && _b1 !== void 0 ? _b1 : this.fields.get("cday")) === null || _c1 === void 0 ? void 0 : _c1[0];
    }
    due() {
        var _a1, _b1, _c1;
        return (_c1 = (_b1 = (_a1 = this.fields.get("due")) !== null && _a1 !== void 0 ? _a1 : this.fields.get("duetime")) !== null && _b1 !== void 0 ? _b1 : this.fields.get("dueday")) === null || _c1 === void 0 ? void 0 : _c1[0];
    }
    completed() {
        var _a1, _b1, _c1, _d1;
        return (_d1 = (_c1 = (_b1 = (_a1 = this.fields.get("completed")) !== null && _a1 !== void 0 ? _a1 : this.fields.get("completion")) !== null && _b1 !== void 0 ? _b1 : this.fields.get("comptime")) !== null && _c1 !== void 0 ? _c1 : this.fields.get("compday")) === null || _d1 === void 0 ? void 0 : _d1[0];
    }
    start() {
        var _a1;
        return (_a1 = this.fields.get("start")) === null || _a1 === void 0 ? void 0 : _a1[0];
    }
    scheduled() {
        var _a1;
        return (_a1 = this.fields.get("scheduled")) === null || _a1 === void 0 ? void 0 : _a1[0];
    }
    /** Create an API-friendly copy of this list item. De-duplication is done via the provided cache. */ serialize(cache1) {
        // Map children to their serialized/de-duplicated equivalents right away.
        let children1 = this.children.map((l1)=>cache1.get(l1)).filter((l1)=>l1 !== undefined);
        let result1 = {
            symbol: this.symbol,
            link: this.link,
            section: this.section,
            text: this.text,
            tags: Array.from(this.tags),
            line: this.line,
            lineCount: this.lineCount,
            list: this.list,
            outlinks: Array.from(this.links),
            path: this.link.path,
            children: children1,
            task: !!this.task,
            annotated: this.fields.size > 0,
            position: Values.deepCopy(this.position),
            subtasks: children1,
            real: !!this.task,
            header: this.section
        };
        if (this.parent || this.parent === 0) result1.parent = this.parent;
        if (this.blockId) result1.blockId = this.blockId;
        addFields(this.fields, result1);
        if (this.task) {
            result1.status = this.task.status;
            result1.checked = this.task.checked;
            result1.completed = this.task.completed;
            result1.fullyCompleted = this.task.fullyCompleted;
            let created1 = this.created(), due1 = this.due(), completed1 = this.completed(), start1 = this.start(), scheduled1 = this.scheduled();
            if (created1) result1.created = Values.deepCopy(created1);
            if (due1) result1.due = Values.deepCopy(due1);
            if (completed1) result1.completion = Values.deepCopy(completed1);
            if (start1) result1.start = Values.deepCopy(start1);
            if (scheduled1) result1.scheduled = Values.deepCopy(scheduled1);
        }
        return result1;
    }
}
//////////////////////////////////////////
// Conversion / Serialization Utilities //
//////////////////////////////////////////
/** De-duplicates list items across section metadata and page metadata. */ class ListSerializationCache {
    constructor(listItems1){
        this.listItems = {};
        this.cache = {};
        this.seen = new Set();
        for (let item1 of listItems1)this.listItems[item1.line] = item1;
    }
    get(lineno1) {
        if (lineno1 in this.cache) return this.cache[lineno1];
        else if (this.seen.has(lineno1)) {
            console.log(`Dataview: Encountered a circular list (line number ${lineno1}; children ${this.listItems[lineno1].children.join(", ")})`);
            return undefined;
        }
        this.seen.add(lineno1);
        let result1 = this.listItems[lineno1].serialize(this);
        this.cache[lineno1] = result1;
        return result1;
    }
}
function addFields(fields1, target1) {
    for (let [key1, values1] of fields1.entries()){
        if (key1 in target1) continue;
        target1[key1] = values1.length == 1 ? values1[0] : values1;
    }
    return target1;
}
/** Importer for markdown documents. */ // TODO: Consider using an actual parser in leiu of a more expensive regex.
const LIST_ITEM_REGEX = /^[\s>]*(\d+\.|\d+\)|\*|-|\+)\s*(\[.{0,1}\])?\s*(.*)$/mu;
/** Recursively convert frontmatter into fields. We have to dance around YAML structure. */ function parseFrontmatter(value1) {
    if (value1 == null) {
        return null;
    } else if (typeof value1 === "object") {
        if (Array.isArray(value1)) {
            let result1 = [];
            for (let child1 of value1){
                result1.push(parseFrontmatter(child1));
            }
            return result1;
        } else if (value1 instanceof Date) {
            let dateParse1 = DateTime.fromJSDate(value1);
            return dateParse1;
        } else {
            let object1 = value1;
            let result1 = {};
            for(let key1 in object1){
                result1[key1] = parseFrontmatter(object1[key1]);
            }
            return result1;
        }
    } else if (typeof value1 === "number") {
        return value1;
    } else if (typeof value1 === "boolean") {
        return value1;
    } else if (typeof value1 === "string") {
        let dateParse1 = EXPRESSION.date.parse(value1);
        if (dateParse1.status) return dateParse1.value;
        let durationParse1 = EXPRESSION.duration.parse(value1);
        if (durationParse1.status) return durationParse1.value;
        let linkParse1 = EXPRESSION.embedLink.parse(value1);
        if (linkParse1.status) return linkParse1.value;
        return value1;
    }
    // Backup if we don't understand the type.
    return null;
}
/** Parse a CSV file into a collection of data rows. */ function parseCsv(content1) {
    let parsed1 = papaparse_min.exports.parse(content1, {
        header: true,
        skipEmptyLines: true,
        comments: "#",
        dynamicTyping: true
    });
    let rows1 = [];
    for (let parsedRow1 of parsed1.data){
        let fields1 = parseFrontmatter(parsedRow1);
        let result1 = {};
        for (let [key1, value1] of Object.entries(fields1)){
            result1[key1] = value1;
            result1[canonicalizeVarName(key1)] = value1;
        }
        rows1.push(result1);
    }
    return rows1;
}
/** Simplifies passing dataview values across the JS web worker barrier. */ var Transferable;
(function(Transferable1) {
    /** Convert a literal value to a serializer-friendly transferable value. */ function transferable1(value1) {
        // Handle simple universal types first.
        if (value1 instanceof Map) {
            let copied1 = new Map();
            for (let [key1, val3] of value1.entries())copied1.set(transferable1(key1), transferable1(val3));
            return copied1;
        } else if (value1 instanceof Set) {
            let copied1 = new Set();
            for (let val3 of value1)copied1.add(transferable1(val3));
            return copied1;
        }
        let wrapped1 = Values.wrapValue(value1);
        if (wrapped1 === undefined) throw Error("Unrecognized transferable value: " + value1);
        switch(wrapped1.type){
            case "null":
            case "number":
            case "string":
            case "boolean":
                return wrapped1.value;
            case "date":
                return {
                    "___transfer-type": "date",
                    value: transferable1(wrapped1.value.toObject()),
                    options: {
                        zone: wrapped1.value.zone.equals(SystemZone.instance) ? undefined : wrapped1.value.zoneName
                    }
                };
            case "duration":
                return {
                    "___transfer-type": "duration",
                    value: transferable1(wrapped1.value.toObject())
                };
            case "array":
                return wrapped1.value.map((v4)=>transferable1(v4));
            case "link":
                return {
                    "___transfer-type": "link",
                    value: transferable1(wrapped1.value.toObject())
                };
            case "object":
                let result1 = {};
                for (let [key1, value1] of Object.entries(wrapped1.value))result1[key1] = transferable1(value1);
                return result1;
        }
    }
    Transferable1.transferable = transferable1;
    /** Convert a transferable value back to a literal value we can work with. */ function value1(transferable1) {
        if (transferable1 === null) {
            return null;
        } else if (transferable1 === undefined) {
            return undefined;
        } else if (transferable1 instanceof Map) {
            let real1 = new Map();
            for (let [key1, val3] of transferable1.entries())real1.set(value1(key1), value1(val3));
            return real1;
        } else if (transferable1 instanceof Set) {
            let real1 = new Set();
            for (let val3 of transferable1)real1.add(value1(val3));
            return real1;
        } else if (Array.isArray(transferable1)) {
            return transferable1.map((v4)=>value1(v4));
        } else if (typeof transferable1 === "object") {
            if ("___transfer-type" in transferable1) {
                switch(transferable1["___transfer-type"]){
                    case "date":
                        let dateOpts1 = value1(transferable1.options);
                        let dateData1 = value1(transferable1.value);
                        return DateTime.fromObject(dateData1, {
                            zone: dateOpts1.zone
                        });
                    case "duration":
                        return Duration.fromObject(value1(transferable1.value));
                    case "link":
                        return Link.fromObject(value1(transferable1.value));
                    default:
                        throw Error(`Unrecognized transfer type '${transferable1["___transfer-type"]}'`);
                }
            }
            let result1 = {};
            for (let [key1, val3] of Object.entries(transferable1))result1[key1] = value1(val3);
            return result1;
        }
        return transferable1;
    }
    Transferable1.value = value1;
})(Transferable || (Transferable = {}));
var localforage$1 = {
    exports: {}
};
/*!
    localForage -- Offline Storage, Improved
    Version 1.10.0
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/ (function(module1, exports1) {
    (function(f3) {
        {
            module1.exports = f3();
        }
    })(function() {
        return (function e1(t5, n3, r4) {
            function s1(o4, u1) {
                if (!n3[o4]) {
                    if (!t5[o4]) {
                        var a1 = typeof commonjsRequire == "function" && commonjsRequire;
                        if (!u1 && a1) return a1(o4, !0);
                        if (i1) return i1(o4, !0);
                        var f3 = new Error("Cannot find module '" + o4 + "'");
                        throw f3.code = "MODULE_NOT_FOUND", f3;
                    }
                    var l1 = n3[o4] = {
                        exports: {}
                    };
                    t5[o4][0].call(l1.exports, function(e1) {
                        var n3 = t5[o4][1][e1];
                        return s1(n3 ? n3 : e1);
                    }, l1, l1.exports, e1, t5, n3, r4);
                }
                return n3[o4].exports;
            }
            var i1 = typeof commonjsRequire == "function" && commonjsRequire;
            for(var o4 = 0; o4 < r4.length; o4++)s1(r4[o4]);
            return s1;
        })({
            1: [
                function(_dereq_1, module1, exports1) {
                    (function(global1) {
                        var Mutation1 = global1.MutationObserver || global1.WebKitMutationObserver;
                        var scheduleDrain1;
                        {
                            if (Mutation1) {
                                var called1 = 0;
                                var observer1 = new Mutation1(nextTick1);
                                var element1 = global1.document.createTextNode("");
                                observer1.observe(element1, {
                                    characterData: true
                                });
                                scheduleDrain1 = function() {
                                    element1.data = called1 = ++called1 % 2;
                                };
                            } else if (!global1.setImmediate && typeof global1.MessageChannel !== "undefined") {
                                var channel1 = new global1.MessageChannel();
                                channel1.port1.onmessage = nextTick1;
                                scheduleDrain1 = function() {
                                    channel1.port2.postMessage(0);
                                };
                            } else if ("document" in global1 && "onreadystatechange" in global1.document.createElement("script")) {
                                scheduleDrain1 = function() {
                                    // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
                                    // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
                                    var scriptEl1 = global1.document.createElement("script");
                                    scriptEl1.onreadystatechange = function() {
                                        nextTick1();
                                        scriptEl1.onreadystatechange = null;
                                        scriptEl1.parentNode.removeChild(scriptEl1);
                                        scriptEl1 = null;
                                    };
                                    global1.document.documentElement.appendChild(scriptEl1);
                                };
                            } else {
                                scheduleDrain1 = function() {
                                    setTimeout(nextTick1, 0);
                                };
                            }
                        }
                        var draining1;
                        var queue1 = [];
                        //named nextTick for less confusing stack traces
                        function nextTick1() {
                            draining1 = true;
                            var i1, oldQueue1;
                            var len1 = queue1.length;
                            while(len1){
                                oldQueue1 = queue1;
                                queue1 = [];
                                i1 = -1;
                                while(++i1 < len1){
                                    oldQueue1[i1]();
                                }
                                len1 = queue1.length;
                            }
                            draining1 = false;
                        }
                        module1.exports = immediate1;
                        function immediate1(task1) {
                            if (queue1.push(task1) === 1 && !draining1) {
                                scheduleDrain1();
                            }
                        }
                    }).call(this, typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self :  false ? 0 : {});
                },
                {}
            ],
            2: [
                function(_dereq_1, module1, exports1) {
                    var immediate1 = _dereq_1(1);
                    /* istanbul ignore next */ function INTERNAL1() {}
                    var handlers1 = {};
                    var REJECTED1 = [
                        "REJECTED"
                    ];
                    var FULFILLED1 = [
                        "FULFILLED"
                    ];
                    var PENDING1 = [
                        "PENDING"
                    ];
                    module1.exports = Promise1;
                    function Promise1(resolver1) {
                        if (typeof resolver1 !== "function") {
                            throw new TypeError("resolver must be a function");
                        }
                        this.state = PENDING1;
                        this.queue = [];
                        this.outcome = void 0;
                        if (resolver1 !== INTERNAL1) {
                            safelyResolveThenable1(this, resolver1);
                        }
                    }
                    Promise1.prototype["catch"] = function(onRejected1) {
                        return this.then(null, onRejected1);
                    };
                    Promise1.prototype.then = function(onFulfilled1, onRejected1) {
                        if (typeof onFulfilled1 !== "function" && this.state === FULFILLED1 || typeof onRejected1 !== "function" && this.state === REJECTED1) {
                            return this;
                        }
                        var promise1 = new this.constructor(INTERNAL1);
                        if (this.state !== PENDING1) {
                            var resolver1 = this.state === FULFILLED1 ? onFulfilled1 : onRejected1;
                            unwrap1(promise1, resolver1, this.outcome);
                        } else {
                            this.queue.push(new QueueItem1(promise1, onFulfilled1, onRejected1));
                        }
                        return promise1;
                    };
                    function QueueItem1(promise1, onFulfilled1, onRejected1) {
                        this.promise = promise1;
                        if (typeof onFulfilled1 === "function") {
                            this.onFulfilled = onFulfilled1;
                            this.callFulfilled = this.otherCallFulfilled;
                        }
                        if (typeof onRejected1 === "function") {
                            this.onRejected = onRejected1;
                            this.callRejected = this.otherCallRejected;
                        }
                    }
                    QueueItem1.prototype.callFulfilled = function(value1) {
                        handlers1.resolve(this.promise, value1);
                    };
                    QueueItem1.prototype.otherCallFulfilled = function(value1) {
                        unwrap1(this.promise, this.onFulfilled, value1);
                    };
                    QueueItem1.prototype.callRejected = function(value1) {
                        handlers1.reject(this.promise, value1);
                    };
                    QueueItem1.prototype.otherCallRejected = function(value1) {
                        unwrap1(this.promise, this.onRejected, value1);
                    };
                    function unwrap1(promise1, func1, value1) {
                        immediate1(function() {
                            var returnValue1;
                            try {
                                returnValue1 = func1(value1);
                            } catch (e1) {
                                return handlers1.reject(promise1, e1);
                            }
                            if (returnValue1 === promise1) {
                                handlers1.reject(promise1, new TypeError("Cannot resolve promise with itself"));
                            } else {
                                handlers1.resolve(promise1, returnValue1);
                            }
                        });
                    }
                    handlers1.resolve = function(self1, value1) {
                        var result1 = tryCatch1(getThen1, value1);
                        if (result1.status === "error") {
                            return handlers1.reject(self1, result1.value);
                        }
                        var thenable1 = result1.value;
                        if (thenable1) {
                            safelyResolveThenable1(self1, thenable1);
                        } else {
                            self1.state = FULFILLED1;
                            self1.outcome = value1;
                            var i1 = -1;
                            var len1 = self1.queue.length;
                            while(++i1 < len1){
                                self1.queue[i1].callFulfilled(value1);
                            }
                        }
                        return self1;
                    };
                    handlers1.reject = function(self1, error1) {
                        self1.state = REJECTED1;
                        self1.outcome = error1;
                        var i1 = -1;
                        var len1 = self1.queue.length;
                        while(++i1 < len1){
                            self1.queue[i1].callRejected(error1);
                        }
                        return self1;
                    };
                    function getThen1(obj1) {
                        // Make sure we only access the accessor once as required by the spec
                        var then1 = obj1 && obj1.then;
                        if (obj1 && (typeof obj1 === "object" || typeof obj1 === "function") && typeof then1 === "function") {
                            return function appyThen1() {
                                then1.apply(obj1, arguments);
                            };
                        }
                    }
                    function safelyResolveThenable1(self1, thenable1) {
                        // Either fulfill, reject or reject with error
                        var called1 = false;
                        function onError1(value1) {
                            if (called1) {
                                return;
                            }
                            called1 = true;
                            handlers1.reject(self1, value1);
                        }
                        function onSuccess1(value1) {
                            if (called1) {
                                return;
                            }
                            called1 = true;
                            handlers1.resolve(self1, value1);
                        }
                        function tryToUnwrap1() {
                            thenable1(onSuccess1, onError1);
                        }
                        var result1 = tryCatch1(tryToUnwrap1);
                        if (result1.status === "error") {
                            onError1(result1.value);
                        }
                    }
                    function tryCatch1(func1, value1) {
                        var out1 = {};
                        try {
                            out1.value = func1(value1);
                            out1.status = "success";
                        } catch (e1) {
                            out1.status = "error";
                            out1.value = e1;
                        }
                        return out1;
                    }
                    Promise1.resolve = resolve1;
                    function resolve1(value1) {
                        if (value1 instanceof this) {
                            return value1;
                        }
                        return handlers1.resolve(new this(INTERNAL1), value1);
                    }
                    Promise1.reject = reject1;
                    function reject1(reason1) {
                        var promise1 = new this(INTERNAL1);
                        return handlers1.reject(promise1, reason1);
                    }
                    Promise1.all = all1;
                    function all1(iterable1) {
                        var self1 = this;
                        if (Object.prototype.toString.call(iterable1) !== "[object Array]") {
                            return this.reject(new TypeError("must be an array"));
                        }
                        var len1 = iterable1.length;
                        var called1 = false;
                        if (!len1) {
                            return this.resolve([]);
                        }
                        var values1 = new Array(len1);
                        var resolved1 = 0;
                        var i1 = -1;
                        var promise1 = new this(INTERNAL1);
                        while(++i1 < len1){
                            allResolver1(iterable1[i1], i1);
                        }
                        return promise1;
                        function allResolver1(value1, i1) {
                            self1.resolve(value1).then(resolveFromAll1, function(error1) {
                                if (!called1) {
                                    called1 = true;
                                    handlers1.reject(promise1, error1);
                                }
                            });
                            function resolveFromAll1(outValue1) {
                                values1[i1] = outValue1;
                                if (++resolved1 === len1 && !called1) {
                                    called1 = true;
                                    handlers1.resolve(promise1, values1);
                                }
                            }
                        }
                    }
                    Promise1.race = race1;
                    function race1(iterable1) {
                        var self1 = this;
                        if (Object.prototype.toString.call(iterable1) !== "[object Array]") {
                            return this.reject(new TypeError("must be an array"));
                        }
                        var len1 = iterable1.length;
                        var called1 = false;
                        if (!len1) {
                            return this.resolve([]);
                        }
                        var i1 = -1;
                        var promise1 = new this(INTERNAL1);
                        while(++i1 < len1){
                            resolver1(iterable1[i1]);
                        }
                        return promise1;
                        function resolver1(value1) {
                            self1.resolve(value1).then(function(response1) {
                                if (!called1) {
                                    called1 = true;
                                    handlers1.resolve(promise1, response1);
                                }
                            }, function(error1) {
                                if (!called1) {
                                    called1 = true;
                                    handlers1.reject(promise1, error1);
                                }
                            });
                        }
                    }
                },
                {
                    "1": 1
                }
            ],
            3: [
                function(_dereq_1, module1, exports1) {
                    (function(global1) {
                        if (typeof global1.Promise !== "function") {
                            global1.Promise = _dereq_1(2);
                        }
                    }).call(this, typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self :  false ? 0 : {});
                },
                {
                    "2": 2
                }
            ],
            4: [
                function(_dereq_1, module1, exports1) {
                    var _typeof1 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj1) {
                        return typeof obj1;
                    } : function(obj1) {
                        return obj1 && typeof Symbol === "function" && obj1.constructor === Symbol && obj1 !== Symbol.prototype ? "symbol" : typeof obj1;
                    };
                    function _classCallCheck1(instance1, Constructor1) {
                        if (!(instance1 instanceof Constructor1)) {
                            throw new TypeError("Cannot call a class as a function");
                        }
                    }
                    function getIDB1() {
                        /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */ try {
                            if (typeof indexedDB !== "undefined") {
                                return indexedDB;
                            }
                            if (typeof webkitIndexedDB !== "undefined") {
                                return webkitIndexedDB;
                            }
                            if (typeof mozIndexedDB !== "undefined") {
                                return mozIndexedDB;
                            }
                            if (typeof OIndexedDB !== "undefined") {
                                return OIndexedDB;
                            }
                            if (typeof msIndexedDB !== "undefined") {
                                return msIndexedDB;
                            }
                        } catch (e1) {
                            return;
                        }
                    }
                    var idb1 = getIDB1();
                    function isIndexedDBValid1() {
                        try {
                            // Initialize IndexedDB; fall back to vendor-prefixed versions
                            // if needed.
                            if (!idb1 || !idb1.open) {
                                return false;
                            }
                            // We mimic PouchDB here;
                            //
                            // We test for openDatabase because IE Mobile identifies itself
                            // as Safari. Oh the lulz...
                            var isSafari1 = typeof openDatabase !== "undefined" && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);
                            var hasFetch1 = typeof fetch === "function" && fetch.toString().indexOf("[native code") !== -1;
                            // Safari <10.1 does not meet our requirements for IDB support
                            // (see: https://github.com/pouchdb/pouchdb/issues/5572).
                            // Safari 10.1 shipped with fetch, we can use that to detect it.
                            // Note: this creates issues with `window.fetch` polyfills and
                            // overrides; see:
                            // https://github.com/localForage/localForage/issues/856
                            return (!isSafari1 || hasFetch1) && typeof indexedDB !== "undefined" && // some outdated implementations of IDB that appear on Samsung
                            // and HTC Android devices <4.4 are missing IDBKeyRange
                            // See: https://github.com/mozilla/localForage/issues/128
                            // See: https://github.com/mozilla/localForage/issues/272
                            typeof IDBKeyRange !== "undefined";
                        } catch (e1) {
                            return false;
                        }
                    }
                    // Abstracts constructing a Blob object, so it also works in older
                    // browsers that don't support the native Blob constructor. (i.e.
                    // old QtWebKit versions, at least).
                    // Abstracts constructing a Blob object, so it also works in older
                    // browsers that don't support the native Blob constructor. (i.e.
                    // old QtWebKit versions, at least).
                    function createBlob1(parts1, properties1) {
                        /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */ parts1 = parts1 || [];
                        properties1 = properties1 || {};
                        try {
                            return new Blob(parts1, properties1);
                        } catch (e1) {
                            if (e1.name !== "TypeError") {
                                throw e1;
                            }
                            var Builder1 = typeof BlobBuilder !== "undefined" ? BlobBuilder : typeof MSBlobBuilder !== "undefined" ? MSBlobBuilder : typeof MozBlobBuilder !== "undefined" ? MozBlobBuilder : WebKitBlobBuilder;
                            var builder1 = new Builder1();
                            for(var i1 = 0; i1 < parts1.length; i1 += 1){
                                builder1.append(parts1[i1]);
                            }
                            return builder1.getBlob(properties1.type);
                        }
                    }
                    // This is CommonJS because lie is an external dependency, so Rollup
                    // can just ignore it.
                    if (typeof Promise === "undefined") {
                        // In the "nopromises" build this will just throw if you don't have
                        // a global promise object, but it would throw anyway later.
                        _dereq_1(3);
                    }
                    var Promise$11 = Promise;
                    function executeCallback1(promise1, callback1) {
                        if (callback1) {
                            promise1.then(function(result1) {
                                callback1(null, result1);
                            }, function(error1) {
                                callback1(error1);
                            });
                        }
                    }
                    function executeTwoCallbacks1(promise1, callback1, errorCallback1) {
                        if (typeof callback1 === "function") {
                            promise1.then(callback1);
                        }
                        if (typeof errorCallback1 === "function") {
                            promise1["catch"](errorCallback1);
                        }
                    }
                    function normalizeKey1(key1) {
                        // Cast the key to a string, as that's all we can set as a key.
                        if (typeof key1 !== "string") {
                            console.warn(key1 + " used as a key, but it is not a string.");
                            key1 = String(key1);
                        }
                        return key1;
                    }
                    function getCallback1() {
                        if (arguments.length && typeof arguments[arguments.length - 1] === "function") {
                            return arguments[arguments.length - 1];
                        }
                    }
                    // Some code originally from async_storage.js in
                    // [Gaia](https://github.com/mozilla-b2g/gaia).
                    var DETECT_BLOB_SUPPORT_STORE1 = "local-forage-detect-blob-support";
                    var supportsBlobs1 = void 0;
                    var dbContexts1 = {};
                    var toString1 = Object.prototype.toString;
                    // Transaction Modes
                    var READ_ONLY1 = "readonly";
                    var READ_WRITE1 = "readwrite";
                    // Transform a binary string to an array buffer, because otherwise
                    // weird stuff happens when you try to work with the binary string directly.
                    // It is known.
                    // From http://stackoverflow.com/questions/14967647/ (continues on next line)
                    // encode-decode-image-with-base64-breaks-image (2013-04-21)
                    function _binStringToArrayBuffer1(bin1) {
                        var length1 = bin1.length;
                        var buf1 = new ArrayBuffer(length1);
                        var arr1 = new Uint8Array(buf1);
                        for(var i1 = 0; i1 < length1; i1++){
                            arr1[i1] = bin1.charCodeAt(i1);
                        }
                        return buf1;
                    }
                    //
                    // Blobs are not supported in all versions of IndexedDB, notably
                    // Chrome <37 and Android <5. In those versions, storing a blob will throw.
                    //
                    // Various other blob bugs exist in Chrome v37-42 (inclusive).
                    // Detecting them is expensive and confusing to users, and Chrome 37-42
                    // is at very low usage worldwide, so we do a hacky userAgent check instead.
                    //
                    // content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
                    // 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
                    // FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
                    //
                    // Code borrowed from PouchDB. See:
                    // https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js
                    //
                    function _checkBlobSupportWithoutCaching1(idb1) {
                        return new Promise$11(function(resolve1) {
                            var txn1 = idb1.transaction(DETECT_BLOB_SUPPORT_STORE1, READ_WRITE1);
                            var blob1 = createBlob1([
                                ""
                            ]);
                            txn1.objectStore(DETECT_BLOB_SUPPORT_STORE1).put(blob1, "key");
                            txn1.onabort = function(e1) {
                                // If the transaction aborts now its due to not being able to
                                // write to the database, likely due to the disk being full
                                e1.preventDefault();
                                e1.stopPropagation();
                                resolve1(false);
                            };
                            txn1.oncomplete = function() {
                                var matchedChrome1 = navigator.userAgent.match(/Chrome\/(\d+)/);
                                var matchedEdge1 = navigator.userAgent.match(/Edge\//);
                                // MS Edge pretends to be Chrome 42:
                                // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
                                resolve1(matchedEdge1 || !matchedChrome1 || parseInt(matchedChrome1[1], 10) >= 43);
                            };
                        })["catch"](function() {
                            return false; // error, so assume unsupported
                        });
                    }
                    function _checkBlobSupport1(idb1) {
                        if (typeof supportsBlobs1 === "boolean") {
                            return Promise$11.resolve(supportsBlobs1);
                        }
                        return _checkBlobSupportWithoutCaching1(idb1).then(function(value1) {
                            supportsBlobs1 = value1;
                            return supportsBlobs1;
                        });
                    }
                    function _deferReadiness1(dbInfo1) {
                        var dbContext1 = dbContexts1[dbInfo1.name];
                        // Create a deferred object representing the current database operation.
                        var deferredOperation1 = {};
                        deferredOperation1.promise = new Promise$11(function(resolve1, reject1) {
                            deferredOperation1.resolve = resolve1;
                            deferredOperation1.reject = reject1;
                        });
                        // Enqueue the deferred operation.
                        dbContext1.deferredOperations.push(deferredOperation1);
                        // Chain its promise to the database readiness.
                        if (!dbContext1.dbReady) {
                            dbContext1.dbReady = deferredOperation1.promise;
                        } else {
                            dbContext1.dbReady = dbContext1.dbReady.then(function() {
                                return deferredOperation1.promise;
                            });
                        }
                    }
                    function _advanceReadiness1(dbInfo1) {
                        var dbContext1 = dbContexts1[dbInfo1.name];
                        // Dequeue a deferred operation.
                        var deferredOperation1 = dbContext1.deferredOperations.pop();
                        // Resolve its promise (which is part of the database readiness
                        // chain of promises).
                        if (deferredOperation1) {
                            deferredOperation1.resolve();
                            return deferredOperation1.promise;
                        }
                    }
                    function _rejectReadiness1(dbInfo1, err1) {
                        var dbContext1 = dbContexts1[dbInfo1.name];
                        // Dequeue a deferred operation.
                        var deferredOperation1 = dbContext1.deferredOperations.pop();
                        // Reject its promise (which is part of the database readiness
                        // chain of promises).
                        if (deferredOperation1) {
                            deferredOperation1.reject(err1);
                            return deferredOperation1.promise;
                        }
                    }
                    function _getConnection1(dbInfo1, upgradeNeeded1) {
                        return new Promise$11(function(resolve1, reject1) {
                            dbContexts1[dbInfo1.name] = dbContexts1[dbInfo1.name] || createDbContext1();
                            if (dbInfo1.db) {
                                if (upgradeNeeded1) {
                                    _deferReadiness1(dbInfo1);
                                    dbInfo1.db.close();
                                } else {
                                    return resolve1(dbInfo1.db);
                                }
                            }
                            var dbArgs1 = [
                                dbInfo1.name
                            ];
                            if (upgradeNeeded1) {
                                dbArgs1.push(dbInfo1.version);
                            }
                            var openreq1 = idb1.open.apply(idb1, dbArgs1);
                            if (upgradeNeeded1) {
                                openreq1.onupgradeneeded = function(e1) {
                                    var db1 = openreq1.result;
                                    try {
                                        db1.createObjectStore(dbInfo1.storeName);
                                        if (e1.oldVersion <= 1) {
                                            // Added when support for blob shims was added
                                            db1.createObjectStore(DETECT_BLOB_SUPPORT_STORE1);
                                        }
                                    } catch (ex1) {
                                        if (ex1.name === "ConstraintError") {
                                            console.warn('The database "' + dbInfo1.name + '"' + " has been upgraded from version " + e1.oldVersion + " to version " + e1.newVersion + ', but the storage "' + dbInfo1.storeName + '" already exists.');
                                        } else {
                                            throw ex1;
                                        }
                                    }
                                };
                            }
                            openreq1.onerror = function(e1) {
                                e1.preventDefault();
                                reject1(openreq1.error);
                            };
                            openreq1.onsuccess = function() {
                                var db1 = openreq1.result;
                                db1.onversionchange = function(e1) {
                                    // Triggered when the database is modified (e.g. adding an objectStore) or
                                    // deleted (even when initiated by other sessions in different tabs).
                                    // Closing the connection here prevents those operations from being blocked.
                                    // If the database is accessed again later by this instance, the connection
                                    // will be reopened or the database recreated as needed.
                                    e1.target.close();
                                };
                                resolve1(db1);
                                _advanceReadiness1(dbInfo1);
                            };
                        });
                    }
                    function _getOriginalConnection1(dbInfo1) {
                        return _getConnection1(dbInfo1, false);
                    }
                    function _getUpgradedConnection1(dbInfo1) {
                        return _getConnection1(dbInfo1, true);
                    }
                    function _isUpgradeNeeded1(dbInfo1, defaultVersion1) {
                        if (!dbInfo1.db) {
                            return true;
                        }
                        var isNewStore1 = !dbInfo1.db.objectStoreNames.contains(dbInfo1.storeName);
                        var isDowngrade1 = dbInfo1.version < dbInfo1.db.version;
                        var isUpgrade1 = dbInfo1.version > dbInfo1.db.version;
                        if (isDowngrade1) {
                            // If the version is not the default one
                            // then warn for impossible downgrade.
                            if (dbInfo1.version !== defaultVersion1) {
                                console.warn('The database "' + dbInfo1.name + '"' + " can't be downgraded from version " + dbInfo1.db.version + " to version " + dbInfo1.version + ".");
                            }
                            // Align the versions to prevent errors.
                            dbInfo1.version = dbInfo1.db.version;
                        }
                        if (isUpgrade1 || isNewStore1) {
                            // If the store is new then increment the version (if needed).
                            // This will trigger an "upgradeneeded" event which is required
                            // for creating a store.
                            if (isNewStore1) {
                                var incVersion1 = dbInfo1.db.version + 1;
                                if (incVersion1 > dbInfo1.version) {
                                    dbInfo1.version = incVersion1;
                                }
                            }
                            return true;
                        }
                        return false;
                    }
                    // encode a blob for indexeddb engines that don't support blobs
                    function _encodeBlob1(blob1) {
                        return new Promise$11(function(resolve1, reject1) {
                            var reader1 = new FileReader();
                            reader1.onerror = reject1;
                            reader1.onloadend = function(e1) {
                                var base641 = btoa(e1.target.result || "");
                                resolve1({
                                    __local_forage_encoded_blob: true,
                                    data: base641,
                                    type: blob1.type
                                });
                            };
                            reader1.readAsBinaryString(blob1);
                        });
                    }
                    // decode an encoded blob
                    function _decodeBlob1(encodedBlob1) {
                        var arrayBuff1 = _binStringToArrayBuffer1(atob(encodedBlob1.data));
                        return createBlob1([
                            arrayBuff1
                        ], {
                            type: encodedBlob1.type
                        });
                    }
                    // is this one of our fancy encoded blobs?
                    function _isEncodedBlob1(value1) {
                        return value1 && value1.__local_forage_encoded_blob;
                    }
                    // Specialize the default `ready()` function by making it dependent
                    // on the current database operations. Thus, the driver will be actually
                    // ready when it's been initialized (default) *and* there are no pending
                    // operations on the database (initiated by some other instances).
                    function _fullyReady1(callback1) {
                        var self1 = this;
                        var promise1 = self1._initReady().then(function() {
                            var dbContext1 = dbContexts1[self1._dbInfo.name];
                            if (dbContext1 && dbContext1.dbReady) {
                                return dbContext1.dbReady;
                            }
                        });
                        executeTwoCallbacks1(promise1, callback1, callback1);
                        return promise1;
                    }
                    // Try to establish a new db connection to replace the
                    // current one which is broken (i.e. experiencing
                    // InvalidStateError while creating a transaction).
                    function _tryReconnect1(dbInfo1) {
                        _deferReadiness1(dbInfo1);
                        var dbContext1 = dbContexts1[dbInfo1.name];
                        var forages1 = dbContext1.forages;
                        for(var i1 = 0; i1 < forages1.length; i1++){
                            var forage1 = forages1[i1];
                            if (forage1._dbInfo.db) {
                                forage1._dbInfo.db.close();
                                forage1._dbInfo.db = null;
                            }
                        }
                        dbInfo1.db = null;
                        return _getOriginalConnection1(dbInfo1).then(function(db1) {
                            dbInfo1.db = db1;
                            if (_isUpgradeNeeded1(dbInfo1)) {
                                // Reopen the database for upgrading.
                                return _getUpgradedConnection1(dbInfo1);
                            }
                            return db1;
                        }).then(function(db1) {
                            // store the latest db reference
                            // in case the db was upgraded
                            dbInfo1.db = dbContext1.db = db1;
                            for(var i1 = 0; i1 < forages1.length; i1++){
                                forages1[i1]._dbInfo.db = db1;
                            }
                        })["catch"](function(err1) {
                            _rejectReadiness1(dbInfo1, err1);
                            throw err1;
                        });
                    }
                    // FF doesn't like Promises (micro-tasks) and IDDB store operations,
                    // so we have to do it with callbacks
                    function createTransaction1(dbInfo1, mode1, callback1, retries1) {
                        if (retries1 === undefined) {
                            retries1 = 1;
                        }
                        try {
                            var tx1 = dbInfo1.db.transaction(dbInfo1.storeName, mode1);
                            callback1(null, tx1);
                        } catch (err1) {
                            if (retries1 > 0 && (!dbInfo1.db || err1.name === "InvalidStateError" || err1.name === "NotFoundError")) {
                                return Promise$11.resolve().then(function() {
                                    if (!dbInfo1.db || err1.name === "NotFoundError" && !dbInfo1.db.objectStoreNames.contains(dbInfo1.storeName) && dbInfo1.version <= dbInfo1.db.version) {
                                        // increase the db version, to create the new ObjectStore
                                        if (dbInfo1.db) {
                                            dbInfo1.version = dbInfo1.db.version + 1;
                                        }
                                        // Reopen the database for upgrading.
                                        return _getUpgradedConnection1(dbInfo1);
                                    }
                                }).then(function() {
                                    return _tryReconnect1(dbInfo1).then(function() {
                                        createTransaction1(dbInfo1, mode1, callback1, retries1 - 1);
                                    });
                                })["catch"](callback1);
                            }
                            callback1(err1);
                        }
                    }
                    function createDbContext1() {
                        return {
                            // Running localForages sharing a database.
                            forages: [],
                            // Shared database.
                            db: null,
                            // Database readiness (promise).
                            dbReady: null,
                            // Deferred operations on the database.
                            deferredOperations: []
                        };
                    }
                    // Open the IndexedDB database (automatically creates one if one didn't
                    // previously exist), using any options set in the config.
                    function _initStorage1(options1) {
                        var self1 = this;
                        var dbInfo1 = {
                            db: null
                        };
                        if (options1) {
                            for(var i1 in options1){
                                dbInfo1[i1] = options1[i1];
                            }
                        }
                        // Get the current context of the database;
                        var dbContext1 = dbContexts1[dbInfo1.name];
                        // ...or create a new context.
                        if (!dbContext1) {
                            dbContext1 = createDbContext1();
                            // Register the new context in the global container.
                            dbContexts1[dbInfo1.name] = dbContext1;
                        }
                        // Register itself as a running localForage in the current context.
                        dbContext1.forages.push(self1);
                        // Replace the default `ready()` function with the specialized one.
                        if (!self1._initReady) {
                            self1._initReady = self1.ready;
                            self1.ready = _fullyReady1;
                        }
                        // Create an array of initialization states of the related localForages.
                        var initPromises1 = [];
                        function ignoreErrors1() {
                            // Don't handle errors here,
                            // just makes sure related localForages aren't pending.
                            return Promise$11.resolve();
                        }
                        for(var j1 = 0; j1 < dbContext1.forages.length; j1++){
                            var forage1 = dbContext1.forages[j1];
                            if (forage1 !== self1) {
                                // Don't wait for itself...
                                initPromises1.push(forage1._initReady()["catch"](ignoreErrors1));
                            }
                        }
                        // Take a snapshot of the related localForages.
                        var forages1 = dbContext1.forages.slice(0);
                        // Initialize the connection process only when
                        // all the related localForages aren't pending.
                        return Promise$11.all(initPromises1).then(function() {
                            dbInfo1.db = dbContext1.db;
                            // Get the connection or open a new one without upgrade.
                            return _getOriginalConnection1(dbInfo1);
                        }).then(function(db1) {
                            dbInfo1.db = db1;
                            if (_isUpgradeNeeded1(dbInfo1, self1._defaultConfig.version)) {
                                // Reopen the database for upgrading.
                                return _getUpgradedConnection1(dbInfo1);
                            }
                            return db1;
                        }).then(function(db1) {
                            dbInfo1.db = dbContext1.db = db1;
                            self1._dbInfo = dbInfo1;
                            // Share the final connection amongst related localForages.
                            for(var k3 = 0; k3 < forages1.length; k3++){
                                var forage1 = forages1[k3];
                                if (forage1 !== self1) {
                                    // Self is already up-to-date.
                                    forage1._dbInfo.db = dbInfo1.db;
                                    forage1._dbInfo.version = dbInfo1.version;
                                }
                            }
                        });
                    }
                    function getItem1(key1, callback1) {
                        var self1 = this;
                        key1 = normalizeKey1(key1);
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            self1.ready().then(function() {
                                createTransaction1(self1._dbInfo, READ_ONLY1, function(err1, transaction1) {
                                    if (err1) {
                                        return reject1(err1);
                                    }
                                    try {
                                        var store1 = transaction1.objectStore(self1._dbInfo.storeName);
                                        var req1 = store1.get(key1);
                                        req1.onsuccess = function() {
                                            var value1 = req1.result;
                                            if (value1 === undefined) {
                                                value1 = null;
                                            }
                                            if (_isEncodedBlob1(value1)) {
                                                value1 = _decodeBlob1(value1);
                                            }
                                            resolve1(value1);
                                        };
                                        req1.onerror = function() {
                                            reject1(req1.error);
                                        };
                                    } catch (e1) {
                                        reject1(e1);
                                    }
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    // Iterate over all items stored in database.
                    function iterate1(iterator1, callback1) {
                        var self1 = this;
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            self1.ready().then(function() {
                                createTransaction1(self1._dbInfo, READ_ONLY1, function(err1, transaction1) {
                                    if (err1) {
                                        return reject1(err1);
                                    }
                                    try {
                                        var store1 = transaction1.objectStore(self1._dbInfo.storeName);
                                        var req1 = store1.openCursor();
                                        var iterationNumber1 = 1;
                                        req1.onsuccess = function() {
                                            var cursor1 = req1.result;
                                            if (cursor1) {
                                                var value1 = cursor1.value;
                                                if (_isEncodedBlob1(value1)) {
                                                    value1 = _decodeBlob1(value1);
                                                }
                                                var result1 = iterator1(value1, cursor1.key, iterationNumber1++);
                                                // when the iterator callback returns any
                                                // (non-`undefined`) value, then we stop
                                                // the iteration immediately
                                                if (result1 !== void 0) {
                                                    resolve1(result1);
                                                } else {
                                                    cursor1["continue"]();
                                                }
                                            } else {
                                                resolve1();
                                            }
                                        };
                                        req1.onerror = function() {
                                            reject1(req1.error);
                                        };
                                    } catch (e1) {
                                        reject1(e1);
                                    }
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    function setItem1(key1, value1, callback1) {
                        var self1 = this;
                        key1 = normalizeKey1(key1);
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            var dbInfo1;
                            self1.ready().then(function() {
                                dbInfo1 = self1._dbInfo;
                                if (toString1.call(value1) === "[object Blob]") {
                                    return _checkBlobSupport1(dbInfo1.db).then(function(blobSupport1) {
                                        if (blobSupport1) {
                                            return value1;
                                        }
                                        return _encodeBlob1(value1);
                                    });
                                }
                                return value1;
                            }).then(function(value1) {
                                createTransaction1(self1._dbInfo, READ_WRITE1, function(err1, transaction1) {
                                    if (err1) {
                                        return reject1(err1);
                                    }
                                    try {
                                        var store1 = transaction1.objectStore(self1._dbInfo.storeName);
                                        // The reason we don't _save_ null is because IE 10 does
                                        // not support saving the `null` type in IndexedDB. How
                                        // ironic, given the bug below!
                                        // See: https://github.com/mozilla/localForage/issues/161
                                        if (value1 === null) {
                                            value1 = undefined;
                                        }
                                        var req1 = store1.put(value1, key1);
                                        transaction1.oncomplete = function() {
                                            // Cast to undefined so the value passed to
                                            // callback/promise is the same as what one would get out
                                            // of `getItem()` later. This leads to some weirdness
                                            // (setItem('foo', undefined) will return `null`), but
                                            // it's not my fault localStorage is our baseline and that
                                            // it's weird.
                                            if (value1 === undefined) {
                                                value1 = null;
                                            }
                                            resolve1(value1);
                                        };
                                        transaction1.onabort = transaction1.onerror = function() {
                                            var err1 = req1.error ? req1.error : req1.transaction.error;
                                            reject1(err1);
                                        };
                                    } catch (e1) {
                                        reject1(e1);
                                    }
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    function removeItem1(key1, callback1) {
                        var self1 = this;
                        key1 = normalizeKey1(key1);
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            self1.ready().then(function() {
                                createTransaction1(self1._dbInfo, READ_WRITE1, function(err1, transaction1) {
                                    if (err1) {
                                        return reject1(err1);
                                    }
                                    try {
                                        var store1 = transaction1.objectStore(self1._dbInfo.storeName);
                                        // We use a Grunt task to make this safe for IE and some
                                        // versions of Android (including those used by Cordova).
                                        // Normally IE won't like `.delete()` and will insist on
                                        // using `['delete']()`, but we have a build step that
                                        // fixes this for us now.
                                        var req1 = store1["delete"](key1);
                                        transaction1.oncomplete = function() {
                                            resolve1();
                                        };
                                        transaction1.onerror = function() {
                                            reject1(req1.error);
                                        };
                                        // The request will be also be aborted if we've exceeded our storage
                                        // space.
                                        transaction1.onabort = function() {
                                            var err1 = req1.error ? req1.error : req1.transaction.error;
                                            reject1(err1);
                                        };
                                    } catch (e1) {
                                        reject1(e1);
                                    }
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    function clear1(callback1) {
                        var self1 = this;
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            self1.ready().then(function() {
                                createTransaction1(self1._dbInfo, READ_WRITE1, function(err1, transaction1) {
                                    if (err1) {
                                        return reject1(err1);
                                    }
                                    try {
                                        var store1 = transaction1.objectStore(self1._dbInfo.storeName);
                                        var req1 = store1.clear();
                                        transaction1.oncomplete = function() {
                                            resolve1();
                                        };
                                        transaction1.onabort = transaction1.onerror = function() {
                                            var err1 = req1.error ? req1.error : req1.transaction.error;
                                            reject1(err1);
                                        };
                                    } catch (e1) {
                                        reject1(e1);
                                    }
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    function length1(callback1) {
                        var self1 = this;
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            self1.ready().then(function() {
                                createTransaction1(self1._dbInfo, READ_ONLY1, function(err1, transaction1) {
                                    if (err1) {
                                        return reject1(err1);
                                    }
                                    try {
                                        var store1 = transaction1.objectStore(self1._dbInfo.storeName);
                                        var req1 = store1.count();
                                        req1.onsuccess = function() {
                                            resolve1(req1.result);
                                        };
                                        req1.onerror = function() {
                                            reject1(req1.error);
                                        };
                                    } catch (e1) {
                                        reject1(e1);
                                    }
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    function key1(n3, callback1) {
                        var self1 = this;
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            if (n3 < 0) {
                                resolve1(null);
                                return;
                            }
                            self1.ready().then(function() {
                                createTransaction1(self1._dbInfo, READ_ONLY1, function(err1, transaction1) {
                                    if (err1) {
                                        return reject1(err1);
                                    }
                                    try {
                                        var store1 = transaction1.objectStore(self1._dbInfo.storeName);
                                        var advanced1 = false;
                                        var req1 = store1.openKeyCursor();
                                        req1.onsuccess = function() {
                                            var cursor1 = req1.result;
                                            if (!cursor1) {
                                                // this means there weren't enough keys
                                                resolve1(null);
                                                return;
                                            }
                                            if (n3 === 0) {
                                                // We have the first key, return it if that's what they
                                                // wanted.
                                                resolve1(cursor1.key);
                                            } else {
                                                if (!advanced1) {
                                                    // Otherwise, ask the cursor to skip ahead n
                                                    // records.
                                                    advanced1 = true;
                                                    cursor1.advance(n3);
                                                } else {
                                                    // When we get here, we've got the nth key.
                                                    resolve1(cursor1.key);
                                                }
                                            }
                                        };
                                        req1.onerror = function() {
                                            reject1(req1.error);
                                        };
                                    } catch (e1) {
                                        reject1(e1);
                                    }
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    function keys1(callback1) {
                        var self1 = this;
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            self1.ready().then(function() {
                                createTransaction1(self1._dbInfo, READ_ONLY1, function(err1, transaction1) {
                                    if (err1) {
                                        return reject1(err1);
                                    }
                                    try {
                                        var store1 = transaction1.objectStore(self1._dbInfo.storeName);
                                        var req1 = store1.openKeyCursor();
                                        var keys1 = [];
                                        req1.onsuccess = function() {
                                            var cursor1 = req1.result;
                                            if (!cursor1) {
                                                resolve1(keys1);
                                                return;
                                            }
                                            keys1.push(cursor1.key);
                                            cursor1["continue"]();
                                        };
                                        req1.onerror = function() {
                                            reject1(req1.error);
                                        };
                                    } catch (e1) {
                                        reject1(e1);
                                    }
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    function dropInstance1(options1, callback1) {
                        callback1 = getCallback1.apply(this, arguments);
                        var currentConfig1 = this.config();
                        options1 = typeof options1 !== "function" && options1 || {};
                        if (!options1.name) {
                            options1.name = options1.name || currentConfig1.name;
                            options1.storeName = options1.storeName || currentConfig1.storeName;
                        }
                        var self1 = this;
                        var promise1;
                        if (!options1.name) {
                            promise1 = Promise$11.reject("Invalid arguments");
                        } else {
                            var isCurrentDb1 = options1.name === currentConfig1.name && self1._dbInfo.db;
                            var dbPromise1 = isCurrentDb1 ? Promise$11.resolve(self1._dbInfo.db) : _getOriginalConnection1(options1).then(function(db1) {
                                var dbContext1 = dbContexts1[options1.name];
                                var forages1 = dbContext1.forages;
                                dbContext1.db = db1;
                                for(var i1 = 0; i1 < forages1.length; i1++){
                                    forages1[i1]._dbInfo.db = db1;
                                }
                                return db1;
                            });
                            if (!options1.storeName) {
                                promise1 = dbPromise1.then(function(db1) {
                                    _deferReadiness1(options1);
                                    var dbContext1 = dbContexts1[options1.name];
                                    var forages1 = dbContext1.forages;
                                    db1.close();
                                    for(var i1 = 0; i1 < forages1.length; i1++){
                                        var forage1 = forages1[i1];
                                        forage1._dbInfo.db = null;
                                    }
                                    var dropDBPromise1 = new Promise$11(function(resolve1, reject1) {
                                        var req1 = idb1.deleteDatabase(options1.name);
                                        req1.onerror = function() {
                                            var db1 = req1.result;
                                            if (db1) {
                                                db1.close();
                                            }
                                            reject1(req1.error);
                                        };
                                        req1.onblocked = function() {
                                            // Closing all open connections in onversionchange handler should prevent this situation, but if
                                            // we do get here, it just means the request remains pending - eventually it will succeed or error
                                            console.warn('dropInstance blocked for database "' + options1.name + '" until all open connections are closed');
                                        };
                                        req1.onsuccess = function() {
                                            var db1 = req1.result;
                                            if (db1) {
                                                db1.close();
                                            }
                                            resolve1(db1);
                                        };
                                    });
                                    return dropDBPromise1.then(function(db1) {
                                        dbContext1.db = db1;
                                        for(var i1 = 0; i1 < forages1.length; i1++){
                                            var _forage1 = forages1[i1];
                                            _advanceReadiness1(_forage1._dbInfo);
                                        }
                                    })["catch"](function(err1) {
                                        (_rejectReadiness1(options1, err1) || Promise$11.resolve())["catch"](function() {});
                                        throw err1;
                                    });
                                });
                            } else {
                                promise1 = dbPromise1.then(function(db1) {
                                    if (!db1.objectStoreNames.contains(options1.storeName)) {
                                        return;
                                    }
                                    var newVersion1 = db1.version + 1;
                                    _deferReadiness1(options1);
                                    var dbContext1 = dbContexts1[options1.name];
                                    var forages1 = dbContext1.forages;
                                    db1.close();
                                    for(var i1 = 0; i1 < forages1.length; i1++){
                                        var forage1 = forages1[i1];
                                        forage1._dbInfo.db = null;
                                        forage1._dbInfo.version = newVersion1;
                                    }
                                    var dropObjectPromise1 = new Promise$11(function(resolve1, reject1) {
                                        var req1 = idb1.open(options1.name, newVersion1);
                                        req1.onerror = function(err1) {
                                            var db1 = req1.result;
                                            db1.close();
                                            reject1(err1);
                                        };
                                        req1.onupgradeneeded = function() {
                                            var db1 = req1.result;
                                            db1.deleteObjectStore(options1.storeName);
                                        };
                                        req1.onsuccess = function() {
                                            var db1 = req1.result;
                                            db1.close();
                                            resolve1(db1);
                                        };
                                    });
                                    return dropObjectPromise1.then(function(db1) {
                                        dbContext1.db = db1;
                                        for(var j1 = 0; j1 < forages1.length; j1++){
                                            var _forage21 = forages1[j1];
                                            _forage21._dbInfo.db = db1;
                                            _advanceReadiness1(_forage21._dbInfo);
                                        }
                                    })["catch"](function(err1) {
                                        (_rejectReadiness1(options1, err1) || Promise$11.resolve())["catch"](function() {});
                                        throw err1;
                                    });
                                });
                            }
                        }
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    var asyncStorage1 = {
                        _driver: "asyncStorage",
                        _initStorage: _initStorage1,
                        _support: isIndexedDBValid1(),
                        iterate: iterate1,
                        getItem: getItem1,
                        setItem: setItem1,
                        removeItem: removeItem1,
                        clear: clear1,
                        length: length1,
                        key: key1,
                        keys: keys1,
                        dropInstance: dropInstance1
                    };
                    function isWebSQLValid1() {
                        return typeof openDatabase === "function";
                    }
                    // Sadly, the best way to save binary data in WebSQL/localStorage is serializing
                    // it to Base64, so this is how we store it to prevent very strange errors with less
                    // verbose ways of binary <-> string data storage.
                    var BASE_CHARS1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                    var BLOB_TYPE_PREFIX1 = "~~local_forage_type~";
                    var BLOB_TYPE_PREFIX_REGEX1 = /^~~local_forage_type~([^~]+)~/;
                    var SERIALIZED_MARKER1 = "__lfsc__:";
                    var SERIALIZED_MARKER_LENGTH1 = SERIALIZED_MARKER1.length;
                    // OMG the serializations!
                    var TYPE_ARRAYBUFFER1 = "arbf";
                    var TYPE_BLOB1 = "blob";
                    var TYPE_INT8ARRAY1 = "si08";
                    var TYPE_UINT8ARRAY1 = "ui08";
                    var TYPE_UINT8CLAMPEDARRAY1 = "uic8";
                    var TYPE_INT16ARRAY1 = "si16";
                    var TYPE_INT32ARRAY1 = "si32";
                    var TYPE_UINT16ARRAY1 = "ur16";
                    var TYPE_UINT32ARRAY1 = "ui32";
                    var TYPE_FLOAT32ARRAY1 = "fl32";
                    var TYPE_FLOAT64ARRAY1 = "fl64";
                    var TYPE_SERIALIZED_MARKER_LENGTH1 = SERIALIZED_MARKER_LENGTH1 + TYPE_ARRAYBUFFER1.length;
                    var toString$11 = Object.prototype.toString;
                    function stringToBuffer1(serializedString1) {
                        // Fill the string into a ArrayBuffer.
                        var bufferLength1 = serializedString1.length * 0.75;
                        var len1 = serializedString1.length;
                        var i1;
                        var p3 = 0;
                        var encoded11, encoded21, encoded31, encoded41;
                        if (serializedString1[serializedString1.length - 1] === "=") {
                            bufferLength1--;
                            if (serializedString1[serializedString1.length - 2] === "=") {
                                bufferLength1--;
                            }
                        }
                        var buffer1 = new ArrayBuffer(bufferLength1);
                        var bytes1 = new Uint8Array(buffer1);
                        for(i1 = 0; i1 < len1; i1 += 4){
                            encoded11 = BASE_CHARS1.indexOf(serializedString1[i1]);
                            encoded21 = BASE_CHARS1.indexOf(serializedString1[i1 + 1]);
                            encoded31 = BASE_CHARS1.indexOf(serializedString1[i1 + 2]);
                            encoded41 = BASE_CHARS1.indexOf(serializedString1[i1 + 3]);
                            /*jslint bitwise: true */ bytes1[p3++] = encoded11 << 2 | encoded21 >> 4;
                            bytes1[p3++] = (encoded21 & 15) << 4 | encoded31 >> 2;
                            bytes1[p3++] = (encoded31 & 3) << 6 | encoded41 & 63;
                        }
                        return buffer1;
                    }
                    // Converts a buffer to a string to store, serialized, in the backend
                    // storage library.
                    function bufferToString1(buffer1) {
                        // base64-arraybuffer
                        var bytes1 = new Uint8Array(buffer1);
                        var base64String1 = "";
                        var i1;
                        for(i1 = 0; i1 < bytes1.length; i1 += 3){
                            /*jslint bitwise: true */ base64String1 += BASE_CHARS1[bytes1[i1] >> 2];
                            base64String1 += BASE_CHARS1[(bytes1[i1] & 3) << 4 | bytes1[i1 + 1] >> 4];
                            base64String1 += BASE_CHARS1[(bytes1[i1 + 1] & 15) << 2 | bytes1[i1 + 2] >> 6];
                            base64String1 += BASE_CHARS1[bytes1[i1 + 2] & 63];
                        }
                        if (bytes1.length % 3 === 2) {
                            base64String1 = base64String1.substring(0, base64String1.length - 1) + "=";
                        } else if (bytes1.length % 3 === 1) {
                            base64String1 = base64String1.substring(0, base64String1.length - 2) + "==";
                        }
                        return base64String1;
                    }
                    // Serialize a value, afterwards executing a callback (which usually
                    // instructs the `setItem()` callback/promise to be executed). This is how
                    // we store binary data with localStorage.
                    function serialize1(value1, callback1) {
                        var valueType1 = "";
                        if (value1) {
                            valueType1 = toString$11.call(value1);
                        }
                        // Cannot use `value instanceof ArrayBuffer` or such here, as these
                        // checks fail when running the tests using casper.js...
                        //
                        // TODO: See why those tests fail and use a better solution.
                        if (value1 && (valueType1 === "[object ArrayBuffer]" || value1.buffer && toString$11.call(value1.buffer) === "[object ArrayBuffer]")) {
                            // Convert binary arrays to a string and prefix the string with
                            // a special marker.
                            var buffer1;
                            var marker1 = SERIALIZED_MARKER1;
                            if (value1 instanceof ArrayBuffer) {
                                buffer1 = value1;
                                marker1 += TYPE_ARRAYBUFFER1;
                            } else {
                                buffer1 = value1.buffer;
                                if (valueType1 === "[object Int8Array]") {
                                    marker1 += TYPE_INT8ARRAY1;
                                } else if (valueType1 === "[object Uint8Array]") {
                                    marker1 += TYPE_UINT8ARRAY1;
                                } else if (valueType1 === "[object Uint8ClampedArray]") {
                                    marker1 += TYPE_UINT8CLAMPEDARRAY1;
                                } else if (valueType1 === "[object Int16Array]") {
                                    marker1 += TYPE_INT16ARRAY1;
                                } else if (valueType1 === "[object Uint16Array]") {
                                    marker1 += TYPE_UINT16ARRAY1;
                                } else if (valueType1 === "[object Int32Array]") {
                                    marker1 += TYPE_INT32ARRAY1;
                                } else if (valueType1 === "[object Uint32Array]") {
                                    marker1 += TYPE_UINT32ARRAY1;
                                } else if (valueType1 === "[object Float32Array]") {
                                    marker1 += TYPE_FLOAT32ARRAY1;
                                } else if (valueType1 === "[object Float64Array]") {
                                    marker1 += TYPE_FLOAT64ARRAY1;
                                } else {
                                    callback1(new Error("Failed to get type for BinaryArray"));
                                }
                            }
                            callback1(marker1 + bufferToString1(buffer1));
                        } else if (valueType1 === "[object Blob]") {
                            // Conver the blob to a binaryArray and then to a string.
                            var fileReader1 = new FileReader();
                            fileReader1.onload = function() {
                                // Backwards-compatible prefix for the blob type.
                                var str1 = BLOB_TYPE_PREFIX1 + value1.type + "~" + bufferToString1(this.result);
                                callback1(SERIALIZED_MARKER1 + TYPE_BLOB1 + str1);
                            };
                            fileReader1.readAsArrayBuffer(value1);
                        } else {
                            try {
                                callback1(JSON.stringify(value1));
                            } catch (e1) {
                                console.error("Couldn't convert value into a JSON string: ", value1);
                                callback1(null, e1);
                            }
                        }
                    }
                    // Deserialize data we've inserted into a value column/field. We place
                    // special markers into our strings to mark them as encoded; this isn't
                    // as nice as a meta field, but it's the only sane thing we can do whilst
                    // keeping localStorage support intact.
                    //
                    // Oftentimes this will just deserialize JSON content, but if we have a
                    // special marker (SERIALIZED_MARKER, defined above), we will extract
                    // some kind of arraybuffer/binary data/typed array out of the string.
                    function deserialize1(value1) {
                        // If we haven't marked this string as being specially serialized (i.e.
                        // something other than serialized JSON), we can just return it and be
                        // done with it.
                        if (value1.substring(0, SERIALIZED_MARKER_LENGTH1) !== SERIALIZED_MARKER1) {
                            return JSON.parse(value1);
                        }
                        // The following code deals with deserializing some kind of Blob or
                        // TypedArray. First we separate out the type of data we're dealing
                        // with from the data itself.
                        var serializedString1 = value1.substring(TYPE_SERIALIZED_MARKER_LENGTH1);
                        var type1 = value1.substring(SERIALIZED_MARKER_LENGTH1, TYPE_SERIALIZED_MARKER_LENGTH1);
                        var blobType1;
                        // Backwards-compatible blob type serialization strategy.
                        // DBs created with older versions of localForage will simply not have the blob type.
                        if (type1 === TYPE_BLOB1 && BLOB_TYPE_PREFIX_REGEX1.test(serializedString1)) {
                            var matcher1 = serializedString1.match(BLOB_TYPE_PREFIX_REGEX1);
                            blobType1 = matcher1[1];
                            serializedString1 = serializedString1.substring(matcher1[0].length);
                        }
                        var buffer1 = stringToBuffer1(serializedString1);
                        // Return the right type based on the code/type set during
                        // serialization.
                        switch(type1){
                            case TYPE_ARRAYBUFFER1:
                                return buffer1;
                            case TYPE_BLOB1:
                                return createBlob1([
                                    buffer1
                                ], {
                                    type: blobType1
                                });
                            case TYPE_INT8ARRAY1:
                                return new Int8Array(buffer1);
                            case TYPE_UINT8ARRAY1:
                                return new Uint8Array(buffer1);
                            case TYPE_UINT8CLAMPEDARRAY1:
                                return new Uint8ClampedArray(buffer1);
                            case TYPE_INT16ARRAY1:
                                return new Int16Array(buffer1);
                            case TYPE_UINT16ARRAY1:
                                return new Uint16Array(buffer1);
                            case TYPE_INT32ARRAY1:
                                return new Int32Array(buffer1);
                            case TYPE_UINT32ARRAY1:
                                return new Uint32Array(buffer1);
                            case TYPE_FLOAT32ARRAY1:
                                return new Float32Array(buffer1);
                            case TYPE_FLOAT64ARRAY1:
                                return new Float64Array(buffer1);
                            default:
                                throw new Error("Unkown type: " + type1);
                        }
                    }
                    var localforageSerializer1 = {
                        serialize: serialize1,
                        deserialize: deserialize1,
                        stringToBuffer: stringToBuffer1,
                        bufferToString: bufferToString1
                    };
                    /*
 * Includes code from:
 *
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */ function createDbTable1(t5, dbInfo1, callback1, errorCallback1) {
                        t5.executeSql("CREATE TABLE IF NOT EXISTS " + dbInfo1.storeName + " " + "(id INTEGER PRIMARY KEY, key unique, value)", [], callback1, errorCallback1);
                    }
                    // Open the WebSQL database (automatically creates one if one didn't
                    // previously exist), using any options set in the config.
                    function _initStorage$11(options1) {
                        var self1 = this;
                        var dbInfo1 = {
                            db: null
                        };
                        if (options1) {
                            for(var i1 in options1){
                                dbInfo1[i1] = typeof options1[i1] !== "string" ? options1[i1].toString() : options1[i1];
                            }
                        }
                        var dbInfoPromise1 = new Promise$11(function(resolve1, reject1) {
                            // Open the database; the openDatabase API will automatically
                            // create it for us if it doesn't exist.
                            try {
                                dbInfo1.db = openDatabase(dbInfo1.name, String(dbInfo1.version), dbInfo1.description, dbInfo1.size);
                            } catch (e1) {
                                return reject1(e1);
                            }
                            // Create our key/value table if it doesn't exist.
                            dbInfo1.db.transaction(function(t5) {
                                createDbTable1(t5, dbInfo1, function() {
                                    self1._dbInfo = dbInfo1;
                                    resolve1();
                                }, function(t5, error1) {
                                    reject1(error1);
                                });
                            }, reject1);
                        });
                        dbInfo1.serializer = localforageSerializer1;
                        return dbInfoPromise1;
                    }
                    function tryExecuteSql1(t5, dbInfo1, sqlStatement1, args1, callback1, errorCallback1) {
                        t5.executeSql(sqlStatement1, args1, callback1, function(t5, error1) {
                            if (error1.code === error1.SYNTAX_ERR) {
                                t5.executeSql("SELECT name FROM sqlite_master " + "WHERE type='table' AND name = ?", [
                                    dbInfo1.storeName
                                ], function(t5, results1) {
                                    if (!results1.rows.length) {
                                        // if the table is missing (was deleted)
                                        // re-create it table and retry
                                        createDbTable1(t5, dbInfo1, function() {
                                            t5.executeSql(sqlStatement1, args1, callback1, errorCallback1);
                                        }, errorCallback1);
                                    } else {
                                        errorCallback1(t5, error1);
                                    }
                                }, errorCallback1);
                            } else {
                                errorCallback1(t5, error1);
                            }
                        }, errorCallback1);
                    }
                    function getItem$11(key1, callback1) {
                        var self1 = this;
                        key1 = normalizeKey1(key1);
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            self1.ready().then(function() {
                                var dbInfo1 = self1._dbInfo;
                                dbInfo1.db.transaction(function(t5) {
                                    tryExecuteSql1(t5, dbInfo1, "SELECT * FROM " + dbInfo1.storeName + " WHERE key = ? LIMIT 1", [
                                        key1
                                    ], function(t5, results1) {
                                        var result1 = results1.rows.length ? results1.rows.item(0).value : null;
                                        // Check to see if this is serialized content we need to
                                        // unpack.
                                        if (result1) {
                                            result1 = dbInfo1.serializer.deserialize(result1);
                                        }
                                        resolve1(result1);
                                    }, function(t5, error1) {
                                        reject1(error1);
                                    });
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    function iterate$11(iterator1, callback1) {
                        var self1 = this;
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            self1.ready().then(function() {
                                var dbInfo1 = self1._dbInfo;
                                dbInfo1.db.transaction(function(t5) {
                                    tryExecuteSql1(t5, dbInfo1, "SELECT * FROM " + dbInfo1.storeName, [], function(t5, results1) {
                                        var rows1 = results1.rows;
                                        var length1 = rows1.length;
                                        for(var i1 = 0; i1 < length1; i1++){
                                            var item1 = rows1.item(i1);
                                            var result1 = item1.value;
                                            // Check to see if this is serialized content
                                            // we need to unpack.
                                            if (result1) {
                                                result1 = dbInfo1.serializer.deserialize(result1);
                                            }
                                            result1 = iterator1(result1, item1.key, i1 + 1);
                                            // void(0) prevents problems with redefinition
                                            // of `undefined`.
                                            if (result1 !== void 0) {
                                                resolve1(result1);
                                                return;
                                            }
                                        }
                                        resolve1();
                                    }, function(t5, error1) {
                                        reject1(error1);
                                    });
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    function _setItem1(key1, value1, callback1, retriesLeft1) {
                        var self1 = this;
                        key1 = normalizeKey1(key1);
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            self1.ready().then(function() {
                                // The localStorage API doesn't return undefined values in an
                                // "expected" way, so undefined is always cast to null in all
                                // drivers. See: https://github.com/mozilla/localForage/pull/42
                                if (value1 === undefined) {
                                    value1 = null;
                                }
                                // Save the original value to pass to the callback.
                                var originalValue1 = value1;
                                var dbInfo1 = self1._dbInfo;
                                dbInfo1.serializer.serialize(value1, function(value1, error1) {
                                    if (error1) {
                                        reject1(error1);
                                    } else {
                                        dbInfo1.db.transaction(function(t5) {
                                            tryExecuteSql1(t5, dbInfo1, "INSERT OR REPLACE INTO " + dbInfo1.storeName + " " + "(key, value) VALUES (?, ?)", [
                                                key1,
                                                value1
                                            ], function() {
                                                resolve1(originalValue1);
                                            }, function(t5, error1) {
                                                reject1(error1);
                                            });
                                        }, function(sqlError1) {
                                            // The transaction failed; check
                                            // to see if it's a quota error.
                                            if (sqlError1.code === sqlError1.QUOTA_ERR) {
                                                // We reject the callback outright for now, but
                                                // it's worth trying to re-run the transaction.
                                                // Even if the user accepts the prompt to use
                                                // more storage on Safari, this error will
                                                // be called.
                                                //
                                                // Try to re-run the transaction.
                                                if (retriesLeft1 > 0) {
                                                    resolve1(_setItem1.apply(self1, [
                                                        key1,
                                                        originalValue1,
                                                        callback1,
                                                        retriesLeft1 - 1
                                                    ]));
                                                    return;
                                                }
                                                reject1(sqlError1);
                                            }
                                        });
                                    }
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    function setItem$11(key1, value1, callback1) {
                        return _setItem1.apply(this, [
                            key1,
                            value1,
                            callback1,
                            1
                        ]);
                    }
                    function removeItem$11(key1, callback1) {
                        var self1 = this;
                        key1 = normalizeKey1(key1);
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            self1.ready().then(function() {
                                var dbInfo1 = self1._dbInfo;
                                dbInfo1.db.transaction(function(t5) {
                                    tryExecuteSql1(t5, dbInfo1, "DELETE FROM " + dbInfo1.storeName + " WHERE key = ?", [
                                        key1
                                    ], function() {
                                        resolve1();
                                    }, function(t5, error1) {
                                        reject1(error1);
                                    });
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    // Deletes every item in the table.
                    // TODO: Find out if this resets the AUTO_INCREMENT number.
                    function clear$11(callback1) {
                        var self1 = this;
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            self1.ready().then(function() {
                                var dbInfo1 = self1._dbInfo;
                                dbInfo1.db.transaction(function(t5) {
                                    tryExecuteSql1(t5, dbInfo1, "DELETE FROM " + dbInfo1.storeName, [], function() {
                                        resolve1();
                                    }, function(t5, error1) {
                                        reject1(error1);
                                    });
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    // Does a simple `COUNT(key)` to get the number of items stored in
                    // localForage.
                    function length$11(callback1) {
                        var self1 = this;
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            self1.ready().then(function() {
                                var dbInfo1 = self1._dbInfo;
                                dbInfo1.db.transaction(function(t5) {
                                    // Ahhh, SQL makes this one soooooo easy.
                                    tryExecuteSql1(t5, dbInfo1, "SELECT COUNT(key) as c FROM " + dbInfo1.storeName, [], function(t5, results1) {
                                        var result1 = results1.rows.item(0).c;
                                        resolve1(result1);
                                    }, function(t5, error1) {
                                        reject1(error1);
                                    });
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    // Return the key located at key index X; essentially gets the key from a
                    // `WHERE id = ?`. This is the most efficient way I can think to implement
                    // this rarely-used (in my experience) part of the API, but it can seem
                    // inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
                    // the ID of each key will change every time it's updated. Perhaps a stored
                    // procedure for the `setItem()` SQL would solve this problem?
                    // TODO: Don't change ID on `setItem()`.
                    function key$11(n3, callback1) {
                        var self1 = this;
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            self1.ready().then(function() {
                                var dbInfo1 = self1._dbInfo;
                                dbInfo1.db.transaction(function(t5) {
                                    tryExecuteSql1(t5, dbInfo1, "SELECT key FROM " + dbInfo1.storeName + " WHERE id = ? LIMIT 1", [
                                        n3 + 1
                                    ], function(t5, results1) {
                                        var result1 = results1.rows.length ? results1.rows.item(0).key : null;
                                        resolve1(result1);
                                    }, function(t5, error1) {
                                        reject1(error1);
                                    });
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    function keys$11(callback1) {
                        var self1 = this;
                        var promise1 = new Promise$11(function(resolve1, reject1) {
                            self1.ready().then(function() {
                                var dbInfo1 = self1._dbInfo;
                                dbInfo1.db.transaction(function(t5) {
                                    tryExecuteSql1(t5, dbInfo1, "SELECT key FROM " + dbInfo1.storeName, [], function(t5, results1) {
                                        var keys1 = [];
                                        for(var i1 = 0; i1 < results1.rows.length; i1++){
                                            keys1.push(results1.rows.item(i1).key);
                                        }
                                        resolve1(keys1);
                                    }, function(t5, error1) {
                                        reject1(error1);
                                    });
                                });
                            })["catch"](reject1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    // https://www.w3.org/TR/webdatabase/#databases
                    // > There is no way to enumerate or delete the databases available for an origin from this API.
                    function getAllStoreNames1(db1) {
                        return new Promise$11(function(resolve1, reject1) {
                            db1.transaction(function(t5) {
                                t5.executeSql("SELECT name FROM sqlite_master " + "WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function(t5, results1) {
                                    var storeNames1 = [];
                                    for(var i1 = 0; i1 < results1.rows.length; i1++){
                                        storeNames1.push(results1.rows.item(i1).name);
                                    }
                                    resolve1({
                                        db: db1,
                                        storeNames: storeNames1
                                    });
                                }, function(t5, error1) {
                                    reject1(error1);
                                });
                            }, function(sqlError1) {
                                reject1(sqlError1);
                            });
                        });
                    }
                    function dropInstance$11(options1, callback1) {
                        callback1 = getCallback1.apply(this, arguments);
                        var currentConfig1 = this.config();
                        options1 = typeof options1 !== "function" && options1 || {};
                        if (!options1.name) {
                            options1.name = options1.name || currentConfig1.name;
                            options1.storeName = options1.storeName || currentConfig1.storeName;
                        }
                        var self1 = this;
                        var promise1;
                        if (!options1.name) {
                            promise1 = Promise$11.reject("Invalid arguments");
                        } else {
                            promise1 = new Promise$11(function(resolve1) {
                                var db1;
                                if (options1.name === currentConfig1.name) {
                                    // use the db reference of the current instance
                                    db1 = self1._dbInfo.db;
                                } else {
                                    db1 = openDatabase(options1.name, "", "", 0);
                                }
                                if (!options1.storeName) {
                                    // drop all database tables
                                    resolve1(getAllStoreNames1(db1));
                                } else {
                                    resolve1({
                                        db: db1,
                                        storeNames: [
                                            options1.storeName
                                        ]
                                    });
                                }
                            }).then(function(operationInfo1) {
                                return new Promise$11(function(resolve1, reject1) {
                                    operationInfo1.db.transaction(function(t5) {
                                        function dropTable1(storeName1) {
                                            return new Promise$11(function(resolve1, reject1) {
                                                t5.executeSql("DROP TABLE IF EXISTS " + storeName1, [], function() {
                                                    resolve1();
                                                }, function(t5, error1) {
                                                    reject1(error1);
                                                });
                                            });
                                        }
                                        var operations1 = [];
                                        for(var i1 = 0, len1 = operationInfo1.storeNames.length; i1 < len1; i1++){
                                            operations1.push(dropTable1(operationInfo1.storeNames[i1]));
                                        }
                                        Promise$11.all(operations1).then(function() {
                                            resolve1();
                                        })["catch"](function(e1) {
                                            reject1(e1);
                                        });
                                    }, function(sqlError1) {
                                        reject1(sqlError1);
                                    });
                                });
                            });
                        }
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    var webSQLStorage1 = {
                        _driver: "webSQLStorage",
                        _initStorage: _initStorage$11,
                        _support: isWebSQLValid1(),
                        iterate: iterate$11,
                        getItem: getItem$11,
                        setItem: setItem$11,
                        removeItem: removeItem$11,
                        clear: clear$11,
                        length: length$11,
                        key: key$11,
                        keys: keys$11,
                        dropInstance: dropInstance$11
                    };
                    function isLocalStorageValid1() {
                        try {
                            return typeof localStorage !== "undefined" && "setItem" in localStorage && // in IE8 typeof localStorage.setItem === 'object'
                            !!localStorage.setItem;
                        } catch (e1) {
                            return false;
                        }
                    }
                    function _getKeyPrefix1(options1, defaultConfig1) {
                        var keyPrefix1 = options1.name + "/";
                        if (options1.storeName !== defaultConfig1.storeName) {
                            keyPrefix1 += options1.storeName + "/";
                        }
                        return keyPrefix1;
                    }
                    // Check if localStorage throws when saving an item
                    function checkIfLocalStorageThrows1() {
                        var localStorageTestKey1 = "_localforage_support_test";
                        try {
                            localStorage.setItem(localStorageTestKey1, true);
                            localStorage.removeItem(localStorageTestKey1);
                            return false;
                        } catch (e1) {
                            return true;
                        }
                    }
                    // Check if localStorage is usable and allows to save an item
                    // This method checks if localStorage is usable in Safari Private Browsing
                    // mode, or in any other case where the available quota for localStorage
                    // is 0 and there wasn't any saved items yet.
                    function _isLocalStorageUsable1() {
                        return !checkIfLocalStorageThrows1() || localStorage.length > 0;
                    }
                    // Config the localStorage backend, using options set in the config.
                    function _initStorage$21(options1) {
                        var self1 = this;
                        var dbInfo1 = {};
                        if (options1) {
                            for(var i1 in options1){
                                dbInfo1[i1] = options1[i1];
                            }
                        }
                        dbInfo1.keyPrefix = _getKeyPrefix1(options1, self1._defaultConfig);
                        if (!_isLocalStorageUsable1()) {
                            return Promise$11.reject();
                        }
                        self1._dbInfo = dbInfo1;
                        dbInfo1.serializer = localforageSerializer1;
                        return Promise$11.resolve();
                    }
                    // Remove all keys from the datastore, effectively destroying all data in
                    // the app's key/value store!
                    function clear$21(callback1) {
                        var self1 = this;
                        var promise1 = self1.ready().then(function() {
                            var keyPrefix1 = self1._dbInfo.keyPrefix;
                            for(var i1 = localStorage.length - 1; i1 >= 0; i1--){
                                var key1 = localStorage.key(i1);
                                if (key1.indexOf(keyPrefix1) === 0) {
                                    localStorage.removeItem(key1);
                                }
                            }
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    // Retrieve an item from the store. Unlike the original async_storage
                    // library in Gaia, we don't modify return values at all. If a key's value
                    // is `undefined`, we pass that value to the callback function.
                    function getItem$21(key1, callback1) {
                        var self1 = this;
                        key1 = normalizeKey1(key1);
                        var promise1 = self1.ready().then(function() {
                            var dbInfo1 = self1._dbInfo;
                            var result1 = localStorage.getItem(dbInfo1.keyPrefix + key1);
                            // If a result was found, parse it from the serialized
                            // string into a JS object. If result isn't truthy, the key
                            // is likely undefined and we'll pass it straight to the
                            // callback.
                            if (result1) {
                                result1 = dbInfo1.serializer.deserialize(result1);
                            }
                            return result1;
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    // Iterate over all items in the store.
                    function iterate$21(iterator1, callback1) {
                        var self1 = this;
                        var promise1 = self1.ready().then(function() {
                            var dbInfo1 = self1._dbInfo;
                            var keyPrefix1 = dbInfo1.keyPrefix;
                            var keyPrefixLength1 = keyPrefix1.length;
                            var length1 = localStorage.length;
                            // We use a dedicated iterator instead of the `i` variable below
                            // so other keys we fetch in localStorage aren't counted in
                            // the `iterationNumber` argument passed to the `iterate()`
                            // callback.
                            //
                            // See: github.com/mozilla/localForage/pull/435#discussion_r38061530
                            var iterationNumber1 = 1;
                            for(var i1 = 0; i1 < length1; i1++){
                                var key1 = localStorage.key(i1);
                                if (key1.indexOf(keyPrefix1) !== 0) {
                                    continue;
                                }
                                var value1 = localStorage.getItem(key1);
                                // If a result was found, parse it from the serialized
                                // string into a JS object. If result isn't truthy, the
                                // key is likely undefined and we'll pass it straight
                                // to the iterator.
                                if (value1) {
                                    value1 = dbInfo1.serializer.deserialize(value1);
                                }
                                value1 = iterator1(value1, key1.substring(keyPrefixLength1), iterationNumber1++);
                                if (value1 !== void 0) {
                                    return value1;
                                }
                            }
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    // Same as localStorage's key() method, except takes a callback.
                    function key$21(n3, callback1) {
                        var self1 = this;
                        var promise1 = self1.ready().then(function() {
                            var dbInfo1 = self1._dbInfo;
                            var result1;
                            try {
                                result1 = localStorage.key(n3);
                            } catch (error1) {
                                result1 = null;
                            }
                            // Remove the prefix from the key, if a key is found.
                            if (result1) {
                                result1 = result1.substring(dbInfo1.keyPrefix.length);
                            }
                            return result1;
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    function keys$21(callback1) {
                        var self1 = this;
                        var promise1 = self1.ready().then(function() {
                            var dbInfo1 = self1._dbInfo;
                            var length1 = localStorage.length;
                            var keys1 = [];
                            for(var i1 = 0; i1 < length1; i1++){
                                var itemKey1 = localStorage.key(i1);
                                if (itemKey1.indexOf(dbInfo1.keyPrefix) === 0) {
                                    keys1.push(itemKey1.substring(dbInfo1.keyPrefix.length));
                                }
                            }
                            return keys1;
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    // Supply the number of keys in the datastore to the callback function.
                    function length$21(callback1) {
                        var self1 = this;
                        var promise1 = self1.keys().then(function(keys1) {
                            return keys1.length;
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    // Remove an item from the store, nice and simple.
                    function removeItem$21(key1, callback1) {
                        var self1 = this;
                        key1 = normalizeKey1(key1);
                        var promise1 = self1.ready().then(function() {
                            var dbInfo1 = self1._dbInfo;
                            localStorage.removeItem(dbInfo1.keyPrefix + key1);
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    // Set a key's value and run an optional callback once the value is set.
                    // Unlike Gaia's implementation, the callback function is passed the value,
                    // in case you want to operate on that value only after you're sure it
                    // saved, or something like that.
                    function setItem$21(key1, value1, callback1) {
                        var self1 = this;
                        key1 = normalizeKey1(key1);
                        var promise1 = self1.ready().then(function() {
                            // Convert undefined values to null.
                            // https://github.com/mozilla/localForage/pull/42
                            if (value1 === undefined) {
                                value1 = null;
                            }
                            // Save the original value to pass to the callback.
                            var originalValue1 = value1;
                            return new Promise$11(function(resolve1, reject1) {
                                var dbInfo1 = self1._dbInfo;
                                dbInfo1.serializer.serialize(value1, function(value1, error1) {
                                    if (error1) {
                                        reject1(error1);
                                    } else {
                                        try {
                                            localStorage.setItem(dbInfo1.keyPrefix + key1, value1);
                                            resolve1(originalValue1);
                                        } catch (e1) {
                                            // localStorage capacity exceeded.
                                            // TODO: Make this a specific error/event.
                                            if (e1.name === "QuotaExceededError" || e1.name === "NS_ERROR_DOM_QUOTA_REACHED") {
                                                reject1(e1);
                                            }
                                            reject1(e1);
                                        }
                                    }
                                });
                            });
                        });
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    function dropInstance$21(options1, callback1) {
                        callback1 = getCallback1.apply(this, arguments);
                        options1 = typeof options1 !== "function" && options1 || {};
                        if (!options1.name) {
                            var currentConfig1 = this.config();
                            options1.name = options1.name || currentConfig1.name;
                            options1.storeName = options1.storeName || currentConfig1.storeName;
                        }
                        var self1 = this;
                        var promise1;
                        if (!options1.name) {
                            promise1 = Promise$11.reject("Invalid arguments");
                        } else {
                            promise1 = new Promise$11(function(resolve1) {
                                if (!options1.storeName) {
                                    resolve1(options1.name + "/");
                                } else {
                                    resolve1(_getKeyPrefix1(options1, self1._defaultConfig));
                                }
                            }).then(function(keyPrefix1) {
                                for(var i1 = localStorage.length - 1; i1 >= 0; i1--){
                                    var key1 = localStorage.key(i1);
                                    if (key1.indexOf(keyPrefix1) === 0) {
                                        localStorage.removeItem(key1);
                                    }
                                }
                            });
                        }
                        executeCallback1(promise1, callback1);
                        return promise1;
                    }
                    var localStorageWrapper1 = {
                        _driver: "localStorageWrapper",
                        _initStorage: _initStorage$21,
                        _support: isLocalStorageValid1(),
                        iterate: iterate$21,
                        getItem: getItem$21,
                        setItem: setItem$21,
                        removeItem: removeItem$21,
                        clear: clear$21,
                        length: length$21,
                        key: key$21,
                        keys: keys$21,
                        dropInstance: dropInstance$21
                    };
                    var sameValue1 = function sameValue1(x1, y1) {
                        return x1 === y1 || typeof x1 === "number" && typeof y1 === "number" && isNaN(x1) && isNaN(y1);
                    };
                    var includes1 = function includes1(array1, searchElement1) {
                        var len1 = array1.length;
                        var i1 = 0;
                        while(i1 < len1){
                            if (sameValue1(array1[i1], searchElement1)) {
                                return true;
                            }
                            i1++;
                        }
                        return false;
                    };
                    var isArray1 = Array.isArray || function(arg4) {
                        return Object.prototype.toString.call(arg4) === "[object Array]";
                    };
                    // Drivers are stored here when `defineDriver()` is called.
                    // They are shared across all instances of localForage.
                    var DefinedDrivers1 = {};
                    var DriverSupport1 = {};
                    var DefaultDrivers1 = {
                        INDEXEDDB: asyncStorage1,
                        WEBSQL: webSQLStorage1,
                        LOCALSTORAGE: localStorageWrapper1
                    };
                    var DefaultDriverOrder1 = [
                        DefaultDrivers1.INDEXEDDB._driver,
                        DefaultDrivers1.WEBSQL._driver,
                        DefaultDrivers1.LOCALSTORAGE._driver
                    ];
                    var OptionalDriverMethods1 = [
                        "dropInstance"
                    ];
                    var LibraryMethods1 = [
                        "clear",
                        "getItem",
                        "iterate",
                        "key",
                        "keys",
                        "length",
                        "removeItem",
                        "setItem"
                    ].concat(OptionalDriverMethods1);
                    var DefaultConfig1 = {
                        description: "",
                        driver: DefaultDriverOrder1.slice(),
                        name: "localforage",
                        // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
                        // we can use without a prompt.
                        size: 4980736,
                        storeName: "keyvaluepairs",
                        version: 1.0
                    };
                    function callWhenReady1(localForageInstance1, libraryMethod1) {
                        localForageInstance1[libraryMethod1] = function() {
                            var _args1 = arguments;
                            return localForageInstance1.ready().then(function() {
                                return localForageInstance1[libraryMethod1].apply(localForageInstance1, _args1);
                            });
                        };
                    }
                    function extend1() {
                        for(var i1 = 1; i1 < arguments.length; i1++){
                            var arg4 = arguments[i1];
                            if (arg4) {
                                for(var _key1 in arg4){
                                    if (arg4.hasOwnProperty(_key1)) {
                                        if (isArray1(arg4[_key1])) {
                                            arguments[0][_key1] = arg4[_key1].slice();
                                        } else {
                                            arguments[0][_key1] = arg4[_key1];
                                        }
                                    }
                                }
                            }
                        }
                        return arguments[0];
                    }
                    var LocalForage1 = function() {
                        function LocalForage1(options1) {
                            _classCallCheck1(this, LocalForage1);
                            for(var driverTypeKey1 in DefaultDrivers1){
                                if (DefaultDrivers1.hasOwnProperty(driverTypeKey1)) {
                                    var driver1 = DefaultDrivers1[driverTypeKey1];
                                    var driverName1 = driver1._driver;
                                    this[driverTypeKey1] = driverName1;
                                    if (!DefinedDrivers1[driverName1]) {
                                        // we don't need to wait for the promise,
                                        // since the default drivers can be defined
                                        // in a blocking manner
                                        this.defineDriver(driver1);
                                    }
                                }
                            }
                            this._defaultConfig = extend1({}, DefaultConfig1);
                            this._config = extend1({}, this._defaultConfig, options1);
                            this._driverSet = null;
                            this._initDriver = null;
                            this._ready = false;
                            this._dbInfo = null;
                            this._wrapLibraryMethodsWithReady();
                            this.setDriver(this._config.driver)["catch"](function() {});
                        }
                        // Set any config values for localForage; can be called anytime before
                        // the first API call (e.g. `getItem`, `setItem`).
                        // We loop through options so we don't overwrite existing config
                        // values.
                        LocalForage1.prototype.config = function config1(options1) {
                            // If the options argument is an object, we use it to set values.
                            // Otherwise, we return either a specified config value or all
                            // config values.
                            if ((typeof options1 === "undefined" ? "undefined" : _typeof1(options1)) === "object") {
                                // If localforage is ready and fully initialized, we can't set
                                // any new configuration values. Instead, we return an error.
                                if (this._ready) {
                                    return new Error("Can't call config() after localforage " + "has been used.");
                                }
                                for(var i1 in options1){
                                    if (i1 === "storeName") {
                                        options1[i1] = options1[i1].replace(/\W/g, "_");
                                    }
                                    if (i1 === "version" && typeof options1[i1] !== "number") {
                                        return new Error("Database version must be a number.");
                                    }
                                    this._config[i1] = options1[i1];
                                }
                                // after all config options are set and
                                // the driver option is used, try setting it
                                if ("driver" in options1 && options1.driver) {
                                    return this.setDriver(this._config.driver);
                                }
                                return true;
                            } else if (typeof options1 === "string") {
                                return this._config[options1];
                            } else {
                                return this._config;
                            }
                        };
                        // Used to define a custom driver, shared across all instances of
                        // localForage.
                        LocalForage1.prototype.defineDriver = function defineDriver1(driverObject1, callback1, errorCallback1) {
                            var promise1 = new Promise$11(function(resolve1, reject1) {
                                try {
                                    var driverName1 = driverObject1._driver;
                                    var complianceError1 = new Error("Custom driver not compliant; see " + "https://mozilla.github.io/localForage/#definedriver");
                                    // A driver name should be defined and not overlap with the
                                    // library-defined, default drivers.
                                    if (!driverObject1._driver) {
                                        reject1(complianceError1);
                                        return;
                                    }
                                    var driverMethods1 = LibraryMethods1.concat("_initStorage");
                                    for(var i1 = 0, len1 = driverMethods1.length; i1 < len1; i1++){
                                        var driverMethodName1 = driverMethods1[i1];
                                        // when the property is there,
                                        // it should be a method even when optional
                                        var isRequired1 = !includes1(OptionalDriverMethods1, driverMethodName1);
                                        if ((isRequired1 || driverObject1[driverMethodName1]) && typeof driverObject1[driverMethodName1] !== "function") {
                                            reject1(complianceError1);
                                            return;
                                        }
                                    }
                                    var configureMissingMethods1 = function configureMissingMethods1() {
                                        var methodNotImplementedFactory1 = function methodNotImplementedFactory1(methodName1) {
                                            return function() {
                                                var error1 = new Error("Method " + methodName1 + " is not implemented by the current driver");
                                                var promise1 = Promise$11.reject(error1);
                                                executeCallback1(promise1, arguments[arguments.length - 1]);
                                                return promise1;
                                            };
                                        };
                                        for(var _i1 = 0, _len1 = OptionalDriverMethods1.length; _i1 < _len1; _i1++){
                                            var optionalDriverMethod1 = OptionalDriverMethods1[_i1];
                                            if (!driverObject1[optionalDriverMethod1]) {
                                                driverObject1[optionalDriverMethod1] = methodNotImplementedFactory1(optionalDriverMethod1);
                                            }
                                        }
                                    };
                                    configureMissingMethods1();
                                    var setDriverSupport1 = function setDriverSupport1(support1) {
                                        if (DefinedDrivers1[driverName1]) {
                                            console.info("Redefining LocalForage driver: " + driverName1);
                                        }
                                        DefinedDrivers1[driverName1] = driverObject1;
                                        DriverSupport1[driverName1] = support1;
                                        // don't use a then, so that we can define
                                        // drivers that have simple _support methods
                                        // in a blocking manner
                                        resolve1();
                                    };
                                    if ("_support" in driverObject1) {
                                        if (driverObject1._support && typeof driverObject1._support === "function") {
                                            driverObject1._support().then(setDriverSupport1, reject1);
                                        } else {
                                            setDriverSupport1(!!driverObject1._support);
                                        }
                                    } else {
                                        setDriverSupport1(true);
                                    }
                                } catch (e1) {
                                    reject1(e1);
                                }
                            });
                            executeTwoCallbacks1(promise1, callback1, errorCallback1);
                            return promise1;
                        };
                        LocalForage1.prototype.driver = function driver1() {
                            return this._driver || null;
                        };
                        LocalForage1.prototype.getDriver = function getDriver1(driverName1, callback1, errorCallback1) {
                            var getDriverPromise1 = DefinedDrivers1[driverName1] ? Promise$11.resolve(DefinedDrivers1[driverName1]) : Promise$11.reject(new Error("Driver not found."));
                            executeTwoCallbacks1(getDriverPromise1, callback1, errorCallback1);
                            return getDriverPromise1;
                        };
                        LocalForage1.prototype.getSerializer = function getSerializer1(callback1) {
                            var serializerPromise1 = Promise$11.resolve(localforageSerializer1);
                            executeTwoCallbacks1(serializerPromise1, callback1);
                            return serializerPromise1;
                        };
                        LocalForage1.prototype.ready = function ready1(callback1) {
                            var self1 = this;
                            var promise1 = self1._driverSet.then(function() {
                                if (self1._ready === null) {
                                    self1._ready = self1._initDriver();
                                }
                                return self1._ready;
                            });
                            executeTwoCallbacks1(promise1, callback1, callback1);
                            return promise1;
                        };
                        LocalForage1.prototype.setDriver = function setDriver1(drivers1, callback1, errorCallback1) {
                            var self1 = this;
                            if (!isArray1(drivers1)) {
                                drivers1 = [
                                    drivers1
                                ];
                            }
                            var supportedDrivers1 = this._getSupportedDrivers(drivers1);
                            function setDriverToConfig1() {
                                self1._config.driver = self1.driver();
                            }
                            function extendSelfWithDriver1(driver1) {
                                self1._extend(driver1);
                                setDriverToConfig1();
                                self1._ready = self1._initStorage(self1._config);
                                return self1._ready;
                            }
                            function initDriver1(supportedDrivers1) {
                                return function() {
                                    var currentDriverIndex1 = 0;
                                    function driverPromiseLoop1() {
                                        while(currentDriverIndex1 < supportedDrivers1.length){
                                            var driverName1 = supportedDrivers1[currentDriverIndex1];
                                            currentDriverIndex1++;
                                            self1._dbInfo = null;
                                            self1._ready = null;
                                            return self1.getDriver(driverName1).then(extendSelfWithDriver1)["catch"](driverPromiseLoop1);
                                        }
                                        setDriverToConfig1();
                                        var error1 = new Error("No available storage method found.");
                                        self1._driverSet = Promise$11.reject(error1);
                                        return self1._driverSet;
                                    }
                                    return driverPromiseLoop1();
                                };
                            }
                            // There might be a driver initialization in progress
                            // so wait for it to finish in order to avoid a possible
                            // race condition to set _dbInfo
                            var oldDriverSetDone1 = this._driverSet !== null ? this._driverSet["catch"](function() {
                                return Promise$11.resolve();
                            }) : Promise$11.resolve();
                            this._driverSet = oldDriverSetDone1.then(function() {
                                var driverName1 = supportedDrivers1[0];
                                self1._dbInfo = null;
                                self1._ready = null;
                                return self1.getDriver(driverName1).then(function(driver1) {
                                    self1._driver = driver1._driver;
                                    setDriverToConfig1();
                                    self1._wrapLibraryMethodsWithReady();
                                    self1._initDriver = initDriver1(supportedDrivers1);
                                });
                            })["catch"](function() {
                                setDriverToConfig1();
                                var error1 = new Error("No available storage method found.");
                                self1._driverSet = Promise$11.reject(error1);
                                return self1._driverSet;
                            });
                            executeTwoCallbacks1(this._driverSet, callback1, errorCallback1);
                            return this._driverSet;
                        };
                        LocalForage1.prototype.supports = function supports1(driverName1) {
                            return !!DriverSupport1[driverName1];
                        };
                        LocalForage1.prototype._extend = function _extend1(libraryMethodsAndProperties1) {
                            extend1(this, libraryMethodsAndProperties1);
                        };
                        LocalForage1.prototype._getSupportedDrivers = function _getSupportedDrivers1(drivers1) {
                            var supportedDrivers1 = [];
                            for(var i1 = 0, len1 = drivers1.length; i1 < len1; i1++){
                                var driverName1 = drivers1[i1];
                                if (this.supports(driverName1)) {
                                    supportedDrivers1.push(driverName1);
                                }
                            }
                            return supportedDrivers1;
                        };
                        LocalForage1.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady1() {
                            // Add a stub for each driver API method that delays the call to the
                            // corresponding driver method until localForage is ready. These stubs
                            // will be replaced by the driver methods as soon as the driver is
                            // loaded, so there is no performance impact.
                            for(var i1 = 0, len1 = LibraryMethods1.length; i1 < len1; i1++){
                                callWhenReady1(this, LibraryMethods1[i1]);
                            }
                        };
                        LocalForage1.prototype.createInstance = function createInstance1(options1) {
                            return new LocalForage1(options1);
                        };
                        return LocalForage1;
                    }();
                    // The actual localForage object that we expose as a module or via a
                    // global. It's extended by pulling in one of our other libraries.
                    var localforage_js1 = new LocalForage1();
                    module1.exports = localforage_js1;
                },
                {
                    "3": 3
                }
            ]
        }, {}, [
            4
        ])(4);
    });
})(localforage$1);
var localforage = localforage$1.exports;
/** Simpler wrapper for a file-backed cache for arbitrary metadata. */ class LocalStorageCache {
    constructor(appId1, version1){
        this.appId = appId1;
        this.version = version1;
        this.persister = localforage.createInstance({
            name: "dataview/cache/" + appId1,
            driver: [
                localforage.INDEXEDDB
            ],
            description: "Cache metadata about files and sections in the dataview index."
        });
    }
    /** Drop the entire cache instance and re-create a new fresh instance. */ async recreate() {
        await localforage.dropInstance({
            name: "dataview/cache/" + this.appId
        });
        this.persister = localforage.createInstance({
            name: "dataview/cache/" + this.appId,
            driver: [
                localforage.INDEXEDDB
            ],
            description: "Cache metadata about files and sections in the dataview index."
        });
    }
    /** Load file metadata by path. */ async loadFile(path1) {
        return this.persister.getItem(this.fileKey(path1)).then((raw1)=>{
            let result1 = raw1;
            if (result1) result1.data = Transferable.value(result1.data);
            return result1;
        });
    }
    /** Store file metadata by path. */ async storeFile(path1, data1) {
        await this.persister.setItem(this.fileKey(path1), {
            version: this.version,
            time: Date.now(),
            data: Transferable.transferable(data1)
        });
    }
    /** Drop old file keys that no longer exist. */ async synchronize(existing1) {
        let keys1 = new Set(await this.allFiles());
        for (let exist1 of existing1)keys1.delete(exist1);
        // Any keys remaining after deleting existing keys are non-existent keys that should be cleared from cache.
        for (let key1 of keys1)await this.persister.removeItem(this.fileKey(key1));
        return keys1;
    }
    /** Obtain a list of all metadata keys. */ async allKeys() {
        return this.persister.keys();
    }
    /** Obtain a list of all persisted files. */ async allFiles() {
        let keys1 = await this.allKeys();
        return keys1.filter((k3)=>k3.startsWith("file:")).map((k3)=>k3.substring(5));
    }
    fileKey(path1) {
        return "file:" + path1;
    }
}
function decodeBase64(base641, enableUnicode1) {
    var binaryString1 = atob(base641);
    if (enableUnicode1) {
        var binaryView1 = new Uint8Array(binaryString1.length);
        for(var i1 = 0, n3 = binaryString1.length; i1 < n3; ++i1){
            binaryView1[i1] = binaryString1.charCodeAt(i1);
        }
        return String.fromCharCode.apply(null, new Uint16Array(binaryView1.buffer));
    }
    return binaryString1;
}
function createURL(base641, sourcemapArg1, enableUnicodeArg1) {
    var sourcemap1 = sourcemapArg1 === undefined ? null : sourcemapArg1;
    var enableUnicode1 = enableUnicodeArg1 === undefined ? false : enableUnicodeArg1;
    var source1 = decodeBase64(base641, enableUnicode1);
    var start1 = source1.indexOf("\n", 10) + 1;
    var body1 = source1.substring(start1) + (sourcemap1 ? "//# sourceMappingURL=" + sourcemap1 : "");
    var blob1 = new Blob([
        body1
    ], {
        type: "application/javascript"
    });
    return URL.createObjectURL(blob1);
}
function createBase64WorkerFactory(base641, sourcemapArg1, enableUnicodeArg1) {
    var url1;
    return function WorkerFactory1(options1) {
        url1 = url1 || createURL(base641, sourcemapArg1, enableUnicodeArg1);
        return new Worker(url1, options1);
    };
}
var WorkerFactory = createBase64WorkerFactory("", null, false);
/* eslint-enable */ /** Controls and creates Dataview file importers, allowing for asynchronous loading and parsing of files. */ /** Multi-threaded file parser which debounces rapid file requests automatically. */ class FileImporter extends obsidian.Component {
    constructor(numWorkers1, vault1, metadataCache1){
        super();
        this.numWorkers = numWorkers1;
        this.vault = vault1;
        this.metadataCache = metadataCache1;
        this.workers = [];
        this.busy = [];
        this.reloadQueue = [];
        this.reloadSet = new Set();
        this.callbacks = new Map();
        for(let index1 = 0; index1 < numWorkers1; index1++){
            let worker1 = new WorkerFactory({
                name: "Dataview Indexer " + (index1 + 1)
            });
            worker1.onmessage = (evt1)=>this.finish(evt1.data.path, Transferable.value(evt1.data.result), index1);
            this.workers.push(worker1);
            this.register(()=>worker1.terminate());
            this.busy.push(false);
        }
    }
    /**
     * Queue the given file for reloading. Multiple reload requests for the same file in a short time period will be de-bounced
     * and all be resolved by a single actual file reload.
     */ reload(file1) {
        let promise1 = new Promise((resolve1, reject1)=>{
            var _a1;
            if (this.callbacks.has(file1.path)) (_a1 = this.callbacks.get(file1.path)) === null || _a1 === void 0 ? void 0 : _a1.push([
                resolve1,
                reject1
            ]);
            else this.callbacks.set(file1.path, [
                [
                    resolve1,
                    reject1
                ]
            ]);
        });
        // De-bounce repeated requests for the same file.
        if (this.reloadSet.has(file1.path)) return promise1;
        this.reloadSet.add(file1.path);
        // Immediately run this task if there are available workers; otherwise, add it to the queue.
        let workerId1 = this.nextAvailableWorker();
        if (workerId1 !== undefined) {
            this.send(file1, workerId1);
        } else {
            this.reloadQueue.push(file1);
        }
        return promise1;
    }
    /** Finish the parsing of a file, potentially queueing a new file. */ finish(path1, data1, index1) {
        var _a1;
        // Cache the callbacks before we do book-keeping.
        let calls1 = [].concat((_a1 = this.callbacks.get(path1)) !== null && _a1 !== void 0 ? _a1 : []);
        // Book-keeping to clear metadata & allow the file to be re-loaded again.
        this.reloadSet.delete(path1);
        this.callbacks.delete(path1);
        // Notify the queue this file is available for new work.
        this.busy[index1] = false;
        // Queue a new job onto this worker.
        let job1 = this.reloadQueue.shift();
        if (job1 !== undefined) this.send(job1, index1);
        // Resolve promises to let users know this file has finished.
        if ("$error" in data1) {
            for (let [_5, reject1] of calls1)reject1(data1["$error"]);
        } else {
            for (let [callback1, _5] of calls1)callback1(data1);
        }
    }
    /** Send a new task to the given worker ID. */ send(file1, workerId1) {
        this.busy[workerId1] = true;
        this.vault.cachedRead(file1).then((c1)=>this.workers[workerId1].postMessage({
                path: file1.path,
                contents: c1,
                stat: file1.stat,
                metadata: this.metadataCache.getFileCache(file1)
            }));
    }
    /** Find the next available, non-busy worker; return undefined if all workers are busy. */ nextAvailableWorker() {
        let index1 = this.busy.indexOf(false);
        return index1 == -1 ? undefined : index1;
    }
}
/** Stores various indices on all files in the vault to make dataview generation fast. */ /** Aggregate index which has several sub-indices and will initialize all of them. */ class FullIndex extends obsidian.Component {
    /** Construct a new index using the app data and a current data version. */ constructor(app1, indexVersion1, onChange1){
        super();
        this.app = app1;
        this.indexVersion = indexVersion1;
        this.onChange = onChange1;
        this.initialized = false;
        this.vault = app1.vault;
        this.metadataCache = app1.metadataCache;
        this.pages = new Map();
        this.tags = new ValueCaseInsensitiveIndexMap();
        this.etags = new ValueCaseInsensitiveIndexMap();
        this.links = new IndexMap();
        this.revision = 0;
        // Caches metadata via durable storage to speed up cache initialization when Obsidian restarts.
        this.persister = new LocalStorageCache(app1.appId || "shared", indexVersion1);
        // Handles asynchronous reloading of files on web workers.
        this.addChild(this.importer = new FileImporter(2, this.vault, this.metadataCache));
        // Prefix listens to file creation/deletion/rename, and not modifies, so we let it set up it's own listeners.
        this.addChild(this.prefix = PrefixIndex.create(this.vault, ()=>this.touch()));
        // The CSV cache also needs to listen to filesystem events for cache invalidation.
        this.addChild(this.csv = new CsvCache(this.vault));
        // The starred cache fetches starred entries semi-regularly via an interval.
        this.addChild(this.starred = new StarredCache(this.app, ()=>this.touch()));
    }
    /** Generate a full index from the given vault. */ static create(app1, indexVersion1, onChange1) {
        return new FullIndex(app1, indexVersion1, onChange1);
    }
    /** Trigger a metadata event on the metadata cache. */ trigger(...args1) {
        this.metadataCache.trigger("dataview:metadata-change", ...args1);
    }
    /** "Touch" the index, incrementing the revision number and causing downstream views to reload. */ touch() {
        this.revision += 1;
        this.onChange();
    }
    /** Runs through the whole vault to set up initial file metadata. */ initialize() {
        // The metadata cache is updated on initial file index and file loads.
        this.registerEvent(this.metadataCache.on("resolve", (file1)=>this.reload(file1)));
        // Renames do not set off the metadata cache; catch these explicitly.
        this.registerEvent(this.vault.on("rename", this.rename, this));
        // File creation does cause a metadata change, but deletes do not. Clear the caches for this.
        this.registerEvent(this.vault.on("delete", (af1)=>{
            if (!(af1 instanceof obsidian.TFile) || !PathFilters.markdown(af1.path)) return;
            let file1 = af1;
            this.pages.delete(file1.path);
            this.tags.delete(file1.path);
            this.etags.delete(file1.path);
            this.links.delete(file1.path);
            this.touch();
            this.trigger("delete", file1);
        }));
        // Asynchronously initialize actual content in the background.
        this._initialize(this.vault.getMarkdownFiles());
    }
    /** Drops the local storage cache and re-indexes all files; this should generally be used if you expect cache issues. */ async reinitialize() {
        await this.persister.recreate();
        const files1 = this.vault.getMarkdownFiles();
        const start1 = Date.now();
        let promises1 = files1.map((file1)=>this.reload(file1));
        await Promise.all(promises1);
        console.log(`Dataview: re-initialized index with ${files1.length} files (${(Date.now() - start1) / 1000.0}s)`);
    }
    /** Internal asynchronous initializer. */ async _initialize(files1) {
        let reloadStart1 = Date.now();
        let promises1 = files1.map((l1)=>this.reload(l1));
        let results1 = await Promise.all(promises1);
        let cached1 = 0, skipped1 = 0;
        for (let item1 of results1){
            if (item1.skipped) {
                skipped1 += 1;
                continue;
            }
            if (item1.cached) cached1 += 1;
        }
        this.initialized = true;
        this.metadataCache.trigger("dataview:index-ready");
        console.log(`Dataview: all ${files1.length} files have been indexed in ${(Date.now() - reloadStart1) / 1000.0}s (${cached1} cached, ${skipped1} skipped).`);
        // Drop keys for files which do not exist anymore.
        let remaining1 = await this.persister.synchronize(files1.map((l1)=>l1.path));
        if (remaining1.size > 0) {
            console.log(`Dataview: Dropped cache entries for ${remaining1.size} deleted files.`);
        }
    }
    rename(file1, oldPath1) {
        if (!(file1 instanceof obsidian.TFile) || !PathFilters.markdown(file1.path)) return;
        if (this.pages.has(oldPath1)) {
            const oldMeta1 = this.pages.get(oldPath1);
            this.pages.delete(oldPath1);
            if (oldMeta1) {
                oldMeta1.path = file1.path;
                this.pages.set(file1.path, oldMeta1);
            }
        }
        this.tags.rename(oldPath1, file1.path);
        this.links.rename(oldPath1, file1.path);
        this.etags.rename(oldPath1, file1.path);
        this.touch();
        this.trigger("rename", file1, oldPath1);
    }
    /** Queue a file for reloading; this is done asynchronously in the background and may take a few seconds. */ async reload(file1) {
        if (!PathFilters.markdown(file1.path)) return {
            cached: false,
            skipped: true
        };
        // The first load of a file is attempted from persisted cache; subsequent loads just use the importer.
        if (this.pages.has(file1.path) || this.initialized) {
            await this.import(file1);
            return {
                cached: false,
                skipped: false
            };
        } else {
            // Check the cache for the latest data; if it is out of date or non-existent, then reload.
            return this.persister.loadFile(file1.path).then(async (cached1)=>{
                if (!cached1 || cached1.time < file1.stat.mtime || cached1.version != this.indexVersion) {
                    // This cache value is out of data, reload via the importer and update the cache.
                    // We will skip files with no active file metadata - they will be caught by a later reload
                    // via the 'resolve' metadata event.
                    let fileCache1 = this.metadataCache.getFileCache(file1);
                    if (fileCache1 === undefined || fileCache1 === null) return {
                        cached: false,
                        skipped: true
                    };
                    await this.import(file1);
                    return {
                        cached: false,
                        skipped: false
                    };
                } else {
                    // Use the cached data since it is up to date and on the same version.
                    this.finish(file1, cached1.data);
                    return {
                        cached: true,
                        skipped: false
                    };
                }
            });
        }
    }
    /** Import a file directly from disk, skipping the cache. */ async import(file1) {
        return this.importer.reload(file1).then((r4)=>{
            this.finish(file1, r4);
            this.persister.storeFile(file1.path, r4);
        });
    }
    /** Finish the reloading of file metadata by adding it to in memory indexes. */ finish(file1, parsed1) {
        let meta1 = PageMetadata.canonicalize(parsed1, (link3)=>{
            let realPath1 = this.metadataCache.getFirstLinkpathDest(link3.path, file1.path);
            if (realPath1) return link3.withPath(realPath1.path);
            else return link3;
        });
        this.pages.set(file1.path, meta1);
        this.tags.set(file1.path, meta1.fullTags());
        this.etags.set(file1.path, meta1.tags);
        this.links.set(file1.path, new Set(meta1.links.map((l1)=>l1.path)));
        this.touch();
        this.trigger("update", file1);
    }
}
/** Indexes files by their full prefix - essentially a simple prefix tree. */ class PrefixIndex extends obsidian.Component {
    constructor(vault1, updateRevision1){
        super();
        this.vault = vault1;
        this.updateRevision = updateRevision1;
    }
    static create(vault1, updateRevision1) {
        return new PrefixIndex(vault1, updateRevision1);
    }
    *walk(folder1, filter1) {
        for (const file1 of folder1.children){
            if (file1 instanceof obsidian.TFolder) {
                yield* this.walk(file1, filter1);
            } else if (filter1 ? filter1(file1.path) : true) {
                yield file1.path;
            }
        }
    }
    /** Get the list of all files under the given path. */ get(prefix1, filter1) {
        let folder1 = this.vault.getAbstractFileByPath(prefix1 || "/");
        return new Set(folder1 instanceof obsidian.TFolder ? this.walk(folder1, filter1) : []);
    }
    /** Determines if the given path exists in the prefix index. */ pathExists(path1) {
        return this.vault.getAbstractFileByPath(path1 || "/") != null;
    }
    /** Determines if the given prefix exists in the prefix index. */ nodeExists(prefix1) {
        return this.vault.getAbstractFileByPath(prefix1 || "/") instanceof obsidian.TFolder;
    }
    /**
     * Use the in-memory prefix index to convert a relative path to an absolute one.
     */ resolveRelative(path1, origin1) {
        if (!origin1) return path1;
        else if (path1.startsWith("/")) return path1.substring(1);
        let relativePath1 = getParentFolder(origin1) + "/" + path1;
        if (this.pathExists(relativePath1)) return relativePath1;
        else return path1;
    }
}
/** Simple path filters which filter file types. */ var PathFilters;
(function(PathFilters1) {
    function csv1(path1) {
        return path1.toLowerCase().endsWith(".csv");
    }
    PathFilters1.csv = csv1;
    function markdown1(path1) {
        let lcPath1 = path1.toLowerCase();
        return lcPath1.endsWith(".md") || lcPath1.endsWith(".markdown");
    }
    PathFilters1.markdown = markdown1;
})(PathFilters || (PathFilters = {}));
/**
 * Caches in-use CSVs to make high-frequency reloads (such as actively looking at a document
 * that uses CSV) fast.
 */ class CsvCache extends obsidian.Component {
    constructor(vault1){
        super();
        this.vault = vault1;
        this.cache = new Map();
        // Force-flush the cache on CSV file deletions or modifications.
        this.registerEvent(this.vault.on("modify", (file1)=>{
            if (file1 instanceof obsidian.TFile && PathFilters.csv(file1.path)) this.cache.delete(file1.path);
        }));
        this.registerEvent(this.vault.on("delete", (file1)=>{
            if (file1 instanceof obsidian.TFile && PathFilters.csv(file1.path)) this.cache.delete(file1.path);
        }));
    }
    /** Load a CSV file from the cache, doing a fresh load if it has not been loaded. */ async get(path1) {
        // Clear old entries on every fresh load, since the path being loaded may be stale.
        this.clearOldEntries();
        let existing1 = this.cache.get(path1);
        if (existing1) return Result.success(existing1.data);
        else {
            let value1 = await this.loadInternal(path1);
            if (value1.successful) this.cache.set(path1, {
                data: value1.value,
                loadTime: DateTime.now()
            });
            return value1;
        }
    }
    /** Do the actual raw loading of a CSV path (which is either local or an HTTP request). */ async loadInternal(path1) {
        // Allow http://, https://, and file:// prefixes which use AJAX.
        if (path1.startsWith("http://") || path1.startsWith("https://") || path1.startsWith("file://")) {
            try {
                let result1 = await fetch(path1, {
                    method: "GET",
                    mode: "no-cors",
                    redirect: "follow"
                });
                return Result.success(parseCsv(await result1.text()));
            } catch (ex1) {
                return Result.failure("" + ex1 + "\n\n" + ex1.stack);
            }
        }
        // Otherwise, assume it is a fully-qualified file path.
        try {
            let fileData1 = await this.vault.adapter.read(path1);
            return Result.success(parseCsv(fileData1));
        } catch (ex1) {
            return Result.failure(`Failed to load data from path '${path1}'.`);
        }
    }
    /** Clear old entries in the cache (as measured by insertion time). */ clearOldEntries() {
        let currentTime1 = DateTime.now();
        let keysToRemove1 = new Set();
        for (let [key1, value1] of this.cache.entries()){
            let entryAge1 = Math.abs(currentTime1.diff(value1.loadTime, "seconds").seconds);
            if (entryAge1 > CsvCache.CACHE_EXPIRY_SECONDS) keysToRemove1.add(key1);
        }
        keysToRemove1.forEach((key1)=>this.cache.delete(key1));
    }
}
CsvCache.CACHE_EXPIRY_SECONDS = 5 * 60;
/** Optional connector to the Obsidian 'Starred' plugin which allows for efficiently querying if a file is starred or not. */ class StarredCache extends obsidian.Component {
    constructor(app1, onUpdate1){
        super();
        this.app = app1;
        this.onUpdate = onUpdate1;
        this.stars = StarredCache.fetch(this.app);
        this.registerInterval(window.setInterval(()=>this.reload(), StarredCache.REFRESH_INTERVAL));
        const initialHandler1 = window.setTimeout(()=>this.reload(), StarredCache.INITIAL_DELAY);
        this.register(()=>window.clearTimeout(initialHandler1));
    }
    /** Determines if the given path is starred. */ starred(path1) {
        return this.stars.has(path1);
    }
    reload() {
        let newStars1 = StarredCache.fetch(this.app);
        if (!setsEqual(this.stars, newStars1)) {
            this.stars = newStars1;
            this.onUpdate();
        }
    }
    /** Fetch all starred files from the stars plugin, if present. */ static fetch(app1) {
        var _a1, _b1, _c1, _d1;
        let items1 = (_d1 = (_c1 = (_b1 = (_a1 = app1 === null || app1 === void 0 ? void 0 : app1.internalPlugins) === null || _a1 === void 0 ? void 0 : _a1.plugins) === null || _b1 === void 0 ? void 0 : _b1.starred) === null || _c1 === void 0 ? void 0 : _c1.instance) === null || _d1 === void 0 ? void 0 : _d1.items;
        if (items1 == undefined) return new Set();
        return new Set(items1.filter((l1)=>l1.type === "file").map((l1)=>l1.path));
    }
}
/** Initial delay before checking the cache; we need to wait for it to asynchronously load the initial stars. */ StarredCache.INITIAL_DELAY = 4 * 1000;
/** How frequently to check for star updates. */ StarredCache.REFRESH_INTERVAL = 30 * 1000;
/** A generic index which indexes variables of the form key -> value[], allowing both forward and reverse lookups. */ class IndexMap {
    /** Create a new, empty index map. */ constructor(){
        this.map = new Map();
        this.invMap = new Map();
    }
    /** Returns all values for the given key. */ get(key1) {
        let result1 = this.map.get(key1);
        if (result1) {
            return new Set(result1);
        } else {
            return new Set();
        }
    }
    /** Returns all keys that reference the given key. Mutating the returned set is not allowed. */ getInverse(value1) {
        return this.invMap.get(value1) || IndexMap.EMPTY_SET;
    }
    /** Sets the key to the given values; this will delete the old mapping for the key if one was present. */ set(key1, values1) {
        var _a1, _b1;
        if (!values1.size) {
            // no need to store if no values
            this.delete(key1);
            return this;
        }
        let oldValues1 = this.map.get(key1);
        if (oldValues1) {
            for (let value1 of oldValues1){
                // Only delete the ones we're not adding back
                if (!values1.has(key1)) (_a1 = this.invMap.get(value1)) === null || _a1 === void 0 ? void 0 : _a1.delete(key1);
            }
        }
        this.map.set(key1, values1);
        for (let value1 of values1){
            if (!this.invMap.has(value1)) this.invMap.set(value1, new Set([
                key1
            ]));
            else (_b1 = this.invMap.get(value1)) === null || _b1 === void 0 ? void 0 : _b1.add(key1);
        }
        return this;
    }
    /** Clears all values for the given key so they can be re-added. */ delete(key1) {
        var _a1;
        let oldValues1 = this.map.get(key1);
        if (!oldValues1) return false;
        this.map.delete(key1);
        for (let value1 of oldValues1){
            (_a1 = this.invMap.get(value1)) === null || _a1 === void 0 ? void 0 : _a1.delete(key1);
        }
        return true;
    }
    /** Rename all references to the given key to a new value. */ rename(oldKey1, newKey1) {
        let oldValues1 = this.map.get(oldKey1);
        if (!oldValues1) return false;
        this.delete(oldKey1);
        this.set(newKey1, oldValues1);
        return true;
    }
    /** Clear the entire index. */ clear() {
        this.map.clear();
        this.invMap.clear();
    }
}
IndexMap.EMPTY_SET = Object.freeze(new Set());
/** Index map wrapper which is case-insensitive in the key. */ class ValueCaseInsensitiveIndexMap {
    /** Create a new, empty case insensitive index map. */ constructor(delegate1 = new IndexMap()){
        this.delegate = delegate1;
    }
    /** Returns all values for the given key. */ get(key1) {
        return this.delegate.get(key1);
    }
    /** Returns all keys that reference the given value. Mutating the returned set is not allowed. */ getInverse(value1) {
        return this.delegate.getInverse(value1.toLocaleLowerCase());
    }
    /** Sets the key to the given values; this will delete the old mapping for the key if one was present. */ set(key1, values1) {
        this.delegate.set(key1, new Set(Array.from(values1).map((v4)=>v4.toLocaleLowerCase())));
        return this;
    }
    /** Clears all values for the given key so they can be re-added. */ delete(key1) {
        return this.delegate.delete(key1);
    }
    /** Rename all references to the given key to a new value. */ rename(oldKey1, newKey1) {
        return this.delegate.rename(oldKey1, newKey1);
    }
    /** Clear the entire index. */ clear() {
        this.delegate.clear();
    }
}
/** Collect data matching a source query. */ /** Find source paths which match the given source. */ function matchingSourcePaths(source1, index1, originFile1 = "") {
    var _a1;
    switch(source1.type){
        case "empty":
            return Result.success(new Set());
        case "tag":
            return Result.success(index1.tags.getInverse(source1.tag));
        case "csv":
            return Result.success(new Set([
                index1.prefix.resolveRelative(source1.path, originFile1)
            ]));
        case "folder":
            // Prefer loading from the folder at the given path.
            if (index1.prefix.nodeExists(source1.folder)) return Result.success(index1.prefix.get(source1.folder, PathFilters.markdown));
            // But allow for loading individual files if they exist.
            if (index1.prefix.pathExists(source1.folder)) return Result.success(new Set([
                source1.folder
            ]));
            else if (index1.prefix.pathExists(source1.folder + ".md")) return Result.success(new Set([
                source1.folder + ".md"
            ]));
            // For backwards-compat, return an empty result even if the folder does not exist.
            return Result.success(new Set());
        case "link":
            let fullPath1 = (_a1 = index1.metadataCache.getFirstLinkpathDest(source1.file, originFile1)) === null || _a1 === void 0 ? void 0 : _a1.path;
            if (!fullPath1) {
                // Look in links which includes unresolved links
                return Result.success(index1.links.getInverse(source1.file));
            }
            if (source1.direction === "incoming") {
                // To find all incoming links (i.e., things that link to this), use the index that Obsidian provides.
                // TODO: Use an actual index so this isn't a fullscan.
                let resolved1 = index1.metadataCache.resolvedLinks;
                let incoming1 = new Set();
                for (let [key1, value1] of Object.entries(resolved1)){
                    if (fullPath1 in value1) incoming1.add(key1);
                }
                return Result.success(incoming1);
            } else {
                let resolved1 = index1.metadataCache.resolvedLinks;
                if (!(fullPath1 in resolved1)) return Result.failure(`Could not find file "${source1.file}" during link lookup - does it exist?`);
                return Result.success(new Set(Object.keys(index1.metadataCache.resolvedLinks[fullPath1])));
            }
        case "binaryop":
            return Result.flatMap2(matchingSourcePaths(source1.left, index1, originFile1), matchingSourcePaths(source1.right, index1, originFile1), (left1, right1)=>{
                if (source1.op == "&") {
                    let result1 = new Set();
                    for (let elem3 of right1){
                        if (left1.has(elem3)) result1.add(elem3);
                    }
                    return Result.success(result1);
                } else if (source1.op == "|") {
                    let result1 = new Set(left1);
                    for (let elem3 of right1)result1.add(elem3);
                    return Result.success(result1);
                } else {
                    return Result.failure(`Unrecognized operator '${source1.op}'.`);
                }
            });
        case "negate":
            return matchingSourcePaths(source1.child, index1, originFile1).map((child1)=>{
                // TODO: This is obviously very inefficient. Can be improved by complicating the
                // return type of this function & optimizing 'and' / 'or'.
                let allFiles1 = new Set(index1.vault.getMarkdownFiles().map((f3)=>f3.path));
                child1.forEach((f3)=>allFiles1.delete(f3));
                return allFiles1;
            });
    }
}
/** Convert a path to the data for that path; usually markdown pages, but could also be other file types (like CSV).  */ async function resolvePathData(path1, index1) {
    if (PathFilters.csv(path1)) return resolveCsvData(path1, index1);
    else return resolveMarkdownData(path1, index1);
}
// TODO: We shouldn't be doing path normalization here relative to an origin file,
/** Convert a CSV path to the data in the CSV (in dataview format). */ async function resolveCsvData(path1, index1) {
    let rawData1 = await index1.csv.get(path1);
    return rawData1.map((rows1)=>{
        return rows1.map((row1, index1)=>{
            return {
                id: `${path1}#${index1}`,
                data: row1
            };
        });
    });
}
/** Convert a path pointing to a markdown page, into the associated metadata. */ function resolveMarkdownData(path1, index1) {
    let page1 = index1.pages.get(path1);
    if (!page1) return Result.success([]);
    return Result.success([
        {
            id: Link.file(path1),
            data: page1.serialize(index1)
        }
    ]);
}
/** Resolve a source to the collection of data rows that it matches. */ async function resolveSource(source1, index1, originFile1 = "") {
    let paths1 = matchingSourcePaths(source1, index1, originFile1);
    if (!paths1.successful) return Result.failure(paths1.error);
    let result1 = [];
    for (let path1 of paths1.value){
        let resolved1 = await resolvePathData(path1, index1);
        if (!resolved1.successful) return resolved1;
        for (let val3 of resolved1.value)result1.push(val3);
    }
    return Result.success(result1);
}
/** Default function implementations for the expression evaluator. */ /**
 * Allows for the creation of functions that check the number and type of their arguments, and dispatch
 * to different implemenations based on the types of the inputs.
 */ class FunctionBuilder {
    constructor(name1){
        this.name = name1;
        this.variants = [];
        this.vectorized = {};
    }
    /** Add a general function variant which accepts any number of arguments of any type. */ vararg(impl1) {
        this.variants.push({
            args: [],
            varargs: true,
            impl: impl1
        });
        return this;
    }
    /** Add a function variant which takes in a single argument. */ add1(argType1, impl1) {
        this.variants.push({
            args: [
                argType1
            ],
            varargs: false,
            impl: (c1, ...rest1)=>impl1(rest1[0], c1)
        });
        return this;
    }
    /** Add a function variant which takes in two typed arguments. */ add2(arg11, arg21, impl1) {
        this.variants.push({
            args: [
                arg11,
                arg21
            ],
            varargs: false,
            impl: (c1, ...rest1)=>impl1(rest1[0], rest1[1], c1)
        });
        return this;
    }
    /** Add a function variant which takes in three typed arguments. */ add3(arg11, arg21, arg31, impl1) {
        this.variants.push({
            args: [
                arg11,
                arg21,
                arg31
            ],
            varargs: false,
            impl: (c1, ...rest1)=>impl1(rest1[0], rest1[1], rest1[2], c1)
        });
        return this;
    }
    /** Add vectorized variants which accept the given number of arguments and delegate. */ vectorize(numArgs1, positions1) {
        this.vectorized[numArgs1] = positions1;
        return this;
    }
    /** Return a function which checks the number and type of arguments, passing them on to the first matching variant. */ build() {
        let self1 = (context1, ...args1)=>{
            let types1 = [];
            for (let arg4 of args1){
                let argType1 = Values.typeOf(arg4);
                if (!argType1) throw Error(`Unrecognized argument type for argument '${arg4}'`);
                types1.push(argType1);
            }
            // Handle vectorization, possibly in multiple fields.
            if (this.vectorized[types1.length]) {
                let vectorizedPositions1 = this.vectorized[types1.length].filter((k3)=>types1[k3] == "array");
                if (vectorizedPositions1.length > 0) {
                    let minLength1 = vectorizedPositions1.map((p3)=>args1[p3].length).reduce((p3, c1)=>Math.min(p3, c1));
                    // Call the subfunction for each element in the longest array.
                    // If you call a vectorized function with different-length arrays,
                    // the output is limited by the length of the shortest array.
                    let result1 = [];
                    for(let vpos1 = 0; vpos1 < minLength1; vpos1++){
                        let subargs1 = [];
                        for(let index1 = 0; index1 < args1.length; index1++){
                            if (vectorizedPositions1.includes(index1)) {
                                let arr1 = args1[index1];
                                subargs1.push(arr1[vpos1]);
                            } else {
                                subargs1.push(args1[index1]);
                            }
                        }
                        result1.push(self1(context1, ...subargs1));
                    }
                    return result1;
                }
            }
            outer: for (let variant1 of this.variants){
                if (variant1.varargs) return variant1.impl(context1, ...args1);
                if (variant1.args.length != types1.length) continue;
                for(let index1 = 0; index1 < variant1.args.length; index1++){
                    if (variant1.args[index1] != "*" && variant1.args[index1] != types1[index1]) continue outer;
                }
                return variant1.impl(context1, ...args1);
            }
            throw Error(`No implementation of '${this.name}' found for arguments: ${types1.join(", ")}`);
        };
        return self1;
    }
}
/** Utilities for managing function implementations. */ var Functions;
(function(Functions1) {
    /** Bind a context to a function implementation, yielding a function which does not need the context argument. */ function bind1(func1, context1) {
        return (...args1)=>func1(context1, ...args1);
    }
    Functions1.bind = bind1;
    /** Bind a context to all functions in the given map, yielding a new map of bound functions. */ function bindAll1(funcs1, context1) {
        let result1 = {};
        for (let [key1, func1] of Object.entries(funcs1)){
            result1[key1] = Functions1.bind(func1, context1);
        }
        return result1;
    }
    Functions1.bindAll = bindAll1;
})(Functions || (Functions = {}));
/**
 * Collection of all defined functions; defined here so that they can be called from within dataview,
 * and test code.
 */ var DefaultFunctions;
(function(DefaultFunctions1) {
    DefaultFunctions1.typeOf = new FunctionBuilder("type").add1("array", (_5)=>"array").add1("boolean", (_5)=>"boolean").add1("date", (_5)=>"date").add1("duration", (_5)=>"duration").add1("function", (_5)=>"function").add1("widget", (_5)=>"widget").add1("link", (_5)=>"link").add1("null", (_5)=>"null").add1("number", (_5)=>"number").add1("object", (_5)=>"object").add1("string", (_5)=>"string").add1("*", (_5)=>"unknown").build();
    /** Compute the length of a data type. */ DefaultFunctions1.length = new FunctionBuilder("length").add1("array", (a1)=>a1.length).add1("object", (a1)=>Object.keys(a1).length).add1("string", (a1)=>a1.length).add1("null", (_a1)=>0).build();
    /** List constructor function. */ DefaultFunctions1.list = (_context1, ...args1)=>args1;
    /** Object constructor function. */ DefaultFunctions1.object = (_context1, ...args1)=>{
        if (args1.length % 2 != 0) throw Error("object() requires an even number of arguments");
        let result1 = {};
        for(let index1 = 0; index1 < args1.length; index1 += 2){
            let key1 = args1[index1];
            if (!Values.isString(key1)) throw Error("keys should be of type string for object(key1, value1, ...)");
            result1[key1] = args1[index1 + 1];
        }
        return result1;
    };
    /** Internal link constructor function. */ DefaultFunctions1.link = new FunctionBuilder("link").add1("string", (a1, c1)=>Link.file(c1.linkHandler.normalize(a1), false)).add1("link", (a1)=>a1).add1("null", (_a1)=>null).vectorize(1, [
        0
    ]).add2("string", "string", (t5, d1, c1)=>Link.file(c1.linkHandler.normalize(t5), false, d1)).add3("string", "string", "boolean", (t5, d1, e1, c1)=>Link.file(c1.linkHandler.normalize(t5), e1, d1)).add2("link", "string", (t5, d1)=>t5.withDisplay(d1)).add2("null", "*", ()=>null).add2("*", "null", (t5, _n1, c1)=>DefaultFunctions1.link(c1, t5)).vectorize(2, [
        0,
        1
    ]).build();
    /** Embed and un-embed a link. */ DefaultFunctions1.embed = new FunctionBuilder("embed").add1("link", (l1)=>l1.toEmbed()).vectorize(1, [
        0
    ]).add2("link", "boolean", (l1, e1, c1)=>e1 ? l1.toEmbed() : l1.fromEmbed()).add1("null", ()=>null).add2("null", "*", ()=>null).add2("*", "null", ()=>null).vectorize(2, [
        0,
        1
    ]).build();
    /** External link constructor function. */ DefaultFunctions1.elink = new FunctionBuilder("elink").add2("string", "string", (a1, d1)=>Widgets.externalLink(a1, d1)).add2("string", "null", (s1, _n1, c1)=>DefaultFunctions1.elink(c1, s1, s1)).add2("null", "*", ()=>null).vectorize(2, [
        0
    ]).add1("string", (a1, c1)=>DefaultFunctions1.elink(c1, a1, a1)).add1("null", ()=>null).vectorize(1, [
        0
    ]).build();
    /** Date constructor function. */ DefaultFunctions1.date = new FunctionBuilder("date").add1("string", (str1)=>{
        let parsedDate1 = EXPRESSION.datePlus.parse(str1);
        if (parsedDate1.status) return parsedDate1.value;
        else return null;
    }).add1("date", (d1)=>d1).add1("link", (link3, c1)=>{
        var _c1, _d1;
        // Try to parse from the display...
        if (link3.display) {
            let parsedDate1 = EXPRESSION.date.parse(link3.display);
            if (parsedDate1.status) return parsedDate1.value;
        }
        // Then try to parse from the path...
        let parsedDate1 = EXPRESSION.date.parse(link3.path);
        if (parsedDate1.status) return parsedDate1.value;
        // Then pull it from the file.
        let resolved1 = c1.linkHandler.resolve(link3.path);
        if (resolved1 && ((_c1 = resolved1 === null || resolved1 === void 0 ? void 0 : resolved1.file) === null || _c1 === void 0 ? void 0 : _c1.day)) {
            return (_d1 = resolved1 === null || resolved1 === void 0 ? void 0 : resolved1.file) === null || _d1 === void 0 ? void 0 : _d1.day;
        }
        return null;
    }).add2("string", "string", (d1, f3)=>{
        if (f3 === "x" || f3 === "X") {
            let match1 = NUMBER_REGEX1.exec(d1);
            if (match1) return DateTime.fromMillis(Number.parseInt(match1[0]) * (f3 === "X" ? 1000 : 1));
            else {
                throw Error("Not a number for format( (${ f }): ${ d }");
            }
        } else {
            let parsedDate1 = DateTime.fromFormat(d1, f3);
            if (parsedDate1.isValid) return parsedDate1;
            else {
                throw Error(`Can't handle format (${f3}) on date string (${d1})`);
            }
        }
    }).add1("null", ()=>null).vectorize(1, [
        0
    ]).build();
    /** Duration constructor function. */ DefaultFunctions1.dur = new FunctionBuilder("dur").add1("string", (str1)=>{
        let parsedDur1 = EXPRESSION.duration.parse(str1.trim());
        if (parsedDur1.status) return parsedDur1.value;
        else return null;
    }).add1("duration", (d1)=>d1).add1("null", (d1)=>d1).vectorize(1, [
        0
    ]).build();
    /** Format a date using a luxon/moment-style date format. */ DefaultFunctions1.dateformat = new FunctionBuilder("dateformat").add2("date", "string", (date1, format1)=>date1.toFormat(format1, {
            locale: currentLocale()
        })).add2("null", "string", (_nul1, _format1)=>null).vectorize(2, [
        0
    ]).build();
    DefaultFunctions1.localtime = new FunctionBuilder("localtime").add1("date", (d1)=>d1.toLocal()).add1("null", ()=>null).vectorize(1, [
        0
    ]).build();
    const NUMBER_REGEX1 = /-?[0-9]+(\.[0-9]+)?/;
    /** Number constructor function. */ DefaultFunctions1.number = new FunctionBuilder("number").add1("number", (a1)=>a1).add1("string", (str1)=>{
        let match1 = NUMBER_REGEX1.exec(str1);
        if (match1) return Number.parseFloat(match1[0]);
        else return null;
    }).add1("null", ()=>null).vectorize(1, [
        0
    ]).build();
    /**
     * Convert any value to a reasonable internal string representation. Most useful for dates, strings, numbers, and
     * so on.
     */ DefaultFunctions1.string = new FunctionBuilder("string").add1("*", (a1, ctx1)=>Values.toString(a1, ctx1.settings)).build();
    DefaultFunctions1.round = new FunctionBuilder("round").add1("number", (n3)=>Math.round(n3)).add1("null", ()=>null).vectorize(1, [
        0
    ]).add2("number", "number", (n3, p3)=>{
        if (p3 <= 0) return Math.round(n3);
        return parseFloat(n3.toFixed(p3));
    }).add2("number", "null", (n3)=>Math.round(n3)).add2("null", "*", ()=>null).vectorize(2, [
        0
    ]).build();
    DefaultFunctions1.min = new FunctionBuilder("min").add2("*", "null", (a1, _n1)=>a1).add2("null", "*", (_n1, a1)=>a1).add2("*", "*", (a1, b1, ctx1)=>Values.compareValue(a1, b1, ctx1.linkHandler.normalize) <= 0 ? a1 : b1).add1("array", (a1, ctx1)=>DefaultFunctions1.min(ctx1, ...a1)).vararg((ctx1, ...args1)=>args1.length == 0 ? null : args1.reduce((p3, c1)=>DefaultFunctions1.min(ctx1, p3, c1))).build();
    DefaultFunctions1.max = new FunctionBuilder("max").add2("*", "null", (a1, _n1)=>a1).add2("null", "*", (_n1, a1)=>a1).add2("*", "*", (a1, b1, ctx1)=>Values.compareValue(a1, b1, ctx1.linkHandler.normalize) > 0 ? a1 : b1).add1("array", (a1, ctx1)=>DefaultFunctions1.max(ctx1, ...a1)).vararg((ctx1, ...args1)=>args1.length == 0 ? null : args1.reduce((p3, c1)=>DefaultFunctions1.max(ctx1, p3, c1))).build();
    DefaultFunctions1.minby = new FunctionBuilder("minby").add2("array", "function", (arr1, func1, ctx1)=>{
        if (arr1.length == 0) return null;
        let values1 = arr1.map((v4)=>{
            return {
                value: v4,
                mapped: func1(ctx1, v4)
            };
        });
        let filtered1 = values1.filter((v4)=>!Values.isNull(v4.mapped));
        if (filtered1.length == 0) return arr1[0];
        return filtered1.reduce((p3, c1)=>{
            if (Values.compareValue(p3.mapped, c1.mapped, ctx1.linkHandler.normalize) <= 0) return p3;
            else return c1;
        }).value;
    }).add2("null", "function", (_arr1, _func1, _ctx1)=>null).build();
    DefaultFunctions1.maxby = new FunctionBuilder("maxby").add2("array", "function", (arr1, func1, ctx1)=>{
        if (arr1.length == 0) return null;
        let values1 = arr1.map((v4)=>{
            return {
                value: v4,
                mapped: func1(ctx1, v4)
            };
        });
        let filtered1 = values1.filter((v4)=>!Values.isNull(v4.mapped));
        if (filtered1.length == 0) return arr1[0];
        return filtered1.reduce((p3, c1)=>{
            if (Values.compareValue(p3.mapped, c1.mapped, ctx1.linkHandler.normalize) > 0) return p3;
            else return c1;
        }).value;
    }).add2("null", "function", (_arr1, _func1, _ctx1)=>null).build();
    DefaultFunctions1.striptime = new FunctionBuilder("striptime").add1("date", (d1)=>DateTime.fromObject({
            year: d1.year,
            month: d1.month,
            day: d1.day
        })).add1("null", (_n1)=>null).vectorize(1, [
        0
    ]).build();
    // Default contains, which looks through data structures recursively.
    DefaultFunctions1.contains = new FunctionBuilder("contains").add2("array", "*", (l1, elem3, context1)=>l1.some((e1)=>DefaultFunctions1.contains(context1, e1, elem3))).add2("string", "string", (haystack1, needle1)=>haystack1.includes(needle1)).add2("object", "string", (obj1, key1)=>key1 in obj1).add2("*", "*", (elem11, elem21, context1)=>context1.evaluate(Fields.binaryOp(Fields.literal(elem11), "=", Fields.literal(elem21))).orElseThrow()).vectorize(2, [
        1
    ]).build();
    // Case insensitive version of contains.
    DefaultFunctions1.icontains = new FunctionBuilder("icontains").add2("array", "*", (l1, elem3, context1)=>l1.some((e1)=>DefaultFunctions1.icontains(context1, e1, elem3))).add2("string", "string", (haystack1, needle1)=>haystack1.toLocaleLowerCase().includes(needle1.toLocaleLowerCase())).add2("object", "string", (obj1, key1)=>key1 in obj1).add2("*", "*", (elem11, elem21, context1)=>context1.evaluate(Fields.binaryOp(Fields.literal(elem11), "=", Fields.literal(elem21))).orElseThrow()).vectorize(2, [
        1
    ]).build();
    // "exact" contains, does not look recursively.
    DefaultFunctions1.econtains = new FunctionBuilder("econtains").add2("array", "*", (l1, elem3, context1)=>l1.some((e1)=>context1.evaluate(Fields.binaryOp(Fields.literal(elem3), "=", Fields.literal(e1))).orElseThrow())).add2("string", "string", (haystack1, needle1)=>haystack1.includes(needle1)).add2("object", "string", (obj1, key1)=>key1 in obj1).add2("*", "*", (elem11, elem21, context1)=>context1.evaluate(Fields.binaryOp(Fields.literal(elem11), "=", Fields.literal(elem21))).orElseThrow()).vectorize(2, [
        1
    ]).build();
    // Case insensitive contains which looks for exact word matches (i.e., boundry-to-boundry match).
    DefaultFunctions1.containsword = new FunctionBuilder("containsword").add2("string", "string", (hay1, needle1)=>!!hay1.match(new RegExp(".*\\b" + escapeRegex(needle1) + "\\b.*", "i"))).add2("null", "*", (_a1, _b1)=>null).add2("*", "null", (_a1, _b1)=>null).vectorize(2, [
        0,
        1
    ]).build();
    /** Extract 0 or more keys from a given object via indexing. */ DefaultFunctions1.extract = (context1, ...args1)=>{
        if (args1.length == 0) return "extract(object, key1, ...) requires at least 1 argument";
        // Manually handle vectorization in the first argument.
        let object1 = args1[0];
        if (Values.isArray(object1)) return object1.map((v4)=>DefaultFunctions1.extract(context1, v4, ...args1.slice(1)));
        let result1 = {};
        for(let index1 = 1; index1 < args1.length; index1++){
            let key1 = args1[index1];
            if (!Values.isString(key1)) throw Error("extract(object, key1, ...) must be called with string keys");
            result1[key1] = context1.evaluate(Fields.index(Fields.literal(object1), Fields.literal(key1))).orElseThrow();
        }
        return result1;
    };
    // Reverse an array or string.
    DefaultFunctions1.reverse = new FunctionBuilder("reverse").add1("array", (l1)=>{
        let result1 = [];
        for(let index1 = l1.length - 1; index1 >= 0; index1--)result1.push(l1[index1]);
        return result1;
    }).add1("string", (l1)=>{
        let result1 = "";
        for(let c1 = 0; c1 < l1.length; c1++)result1 += l1[l1.length - c1 - 1];
        return result1;
    }).add1("*", (e1)=>e1).build();
    // Sort an array; if given two arguments, sorts by the key returned.
    DefaultFunctions1.sort = new FunctionBuilder("sort").add1("array", (list1, context1)=>DefaultFunctions1.sort(context1, list1, (_ctx1, a1)=>a1)).add2("array", "function", (list1, key1, context1)=>{
        let result1 = [].concat(list1);
        result1.sort((a1, b1)=>{
            let akey1 = key1(context1, a1);
            let bkey1 = key1(context1, b1);
            let le1 = context1.evaluate(Fields.binaryOp(Fields.literal(akey1), "<", Fields.literal(bkey1))).orElseThrow();
            if (Values.isTruthy(le1)) return -1;
            let eq1 = context1.evaluate(Fields.binaryOp(Fields.literal(akey1), "=", Fields.literal(bkey1))).orElseThrow();
            if (Values.isTruthy(eq1)) return 0;
            return 1;
        });
        return result1;
    }).add1("*", (e1)=>e1).build();
    DefaultFunctions1.regextest = new FunctionBuilder("regextest").add2("string", "string", (pattern1, field1)=>RegExp(pattern1).test(field1)).add2("null", "*", (_n1, _a1)=>false).add2("*", "null", (_a1, _n1)=>false).vectorize(2, [
        0,
        1
    ]).build();
    DefaultFunctions1.regexmatch = new FunctionBuilder("regexmatch").add2("string", "string", (pattern1, field1)=>{
        if (!pattern1.startsWith("^") && !pattern1.endsWith("$")) pattern1 = "^" + pattern1 + "$";
        return !!field1.match(pattern1);
    }).add2("null", "*", (_n1, _a1)=>false).add2("*", "null", (_a1, _n1)=>false).vectorize(2, [
        0,
        1
    ]).build();
    DefaultFunctions1.regexreplace = new FunctionBuilder("regexreplace").add3("string", "string", "string", (field1, pat1, rep1)=>{
        try {
            let reg1 = new RegExp(pat1, "g");
            return field1.replace(reg1, rep1);
        } catch (ex1) {
            throw Error(`Invalid regexp '${pat1}' in regexreplace`);
        }
    }).add3("null", "*", "*", ()=>null).add3("*", "null", "*", ()=>null).add3("*", "*", "null", ()=>null).vectorize(3, [
        0,
        1,
        2
    ]).build();
    DefaultFunctions1.lower = new FunctionBuilder("lower").add1("string", (s1)=>s1.toLocaleLowerCase()).add1("null", ()=>null).vectorize(1, [
        0
    ]).build();
    DefaultFunctions1.upper = new FunctionBuilder("upper").add1("string", (s1)=>s1.toLocaleUpperCase()).add1("null", ()=>null).vectorize(1, [
        0
    ]).build();
    DefaultFunctions1.replace = new FunctionBuilder("replace").add3("string", "string", "string", (str1, pat1, repr1)=>str1.split(pat1).join(repr1)).add3("null", "*", "*", ()=>null).add3("*", "null", "*", ()=>null).add3("*", "*", "null", ()=>null).vectorize(3, [
        0,
        1,
        2
    ]).build();
    // Ensure undefined matches turn into empty strings for split/2 and split/3.
    const splitImpl1 = (str1, delim1, limit1)=>str1.split(new RegExp(delim1), limit1).map((str1)=>str1 || "");
    /** Split a string on a given string. */ DefaultFunctions1.split = new FunctionBuilder("split").add2("string", "string", (string1, splitter1)=>splitImpl1(string1, splitter1)).add3("string", "string", "number", (string1, splitter1, limit1)=>splitImpl1(string1, splitter1, limit1)).add2("null", "*", ()=>null).add2("*", "null", ()=>null).add3("*", "*", "null", ()=>null).add3("*", "null", "*", ()=>null).add3("null", "*", "*", ()=>null).build();
    DefaultFunctions1.startswith = new FunctionBuilder("startswith").add2("string", "string", (str1, starting1)=>str1.startsWith(starting1)).add2("null", "*", ()=>null).add2("*", "null", ()=>null).vectorize(2, [
        0,
        1
    ]).build();
    DefaultFunctions1.endswith = new FunctionBuilder("endswith").add2("string", "string", (str1, ending1)=>str1.endsWith(ending1)).add2("null", "*", ()=>null).add2("*", "null", ()=>null).vectorize(2, [
        0,
        1
    ]).build();
    DefaultFunctions1.padleft = new FunctionBuilder("padleft").add2("string", "number", (str1, len1)=>str1.padStart(len1, " ")).add3("string", "number", "string", (str1, len1, padding1)=>str1.padStart(len1, padding1)).add2("null", "*", ()=>null).add2("*", "null", ()=>null).add3("null", "*", "*", ()=>null).add3("*", "null", "*", ()=>null).add3("*", "*", "null", ()=>null).vectorize(2, [
        0,
        1
    ]).vectorize(3, [
        0,
        1,
        2
    ]).build();
    DefaultFunctions1.padright = new FunctionBuilder("padright").add2("string", "number", (str1, len1)=>str1.padEnd(len1, " ")).add3("string", "number", "string", (str1, len1, padding1)=>str1.padEnd(len1, padding1)).add2("null", "*", ()=>null).add2("*", "null", ()=>null).add3("null", "*", "*", ()=>null).add3("*", "null", "*", ()=>null).add3("*", "*", "null", ()=>null).vectorize(2, [
        0,
        1
    ]).vectorize(3, [
        0,
        1,
        2
    ]).build();
    DefaultFunctions1.substring = new FunctionBuilder("substring").add2("string", "number", (str1, start1)=>str1.substring(start1)).add3("string", "number", "number", (str1, start1, end1)=>str1.substring(start1, end1)).add2("null", "*", ()=>null).add2("*", "null", ()=>null).add3("null", "*", "*", ()=>null).add3("*", "null", "*", ()=>null).add3("*", "*", "null", ()=>null).vectorize(2, [
        0,
        1
    ]).vectorize(3, [
        0,
        1,
        2
    ]).build();
    DefaultFunctions1.truncate = new FunctionBuilder("truncate").add3("string", "number", "string", (str1, length1, suffix1)=>{
        if (str1.length > length1 - suffix1.length) {
            return str1.substring(0, Math.max(0, length1 - suffix1.length)) + suffix1;
        } else {
            return str1;
        }
    }).add2("string", "number", (str1, length1, ctx1)=>DefaultFunctions1.truncate(ctx1, str1, length1, "...")).add2("null", "*", ()=>null).add2("*", "null", ()=>null).add3("null", "*", "*", ()=>null).add3("*", "null", "*", ()=>null).add3("*", "*", "null", ()=>null).vectorize(2, [
        0,
        1
    ]).vectorize(3, [
        0,
        1,
        2
    ]).build();
    DefaultFunctions1.fdefault = new FunctionBuilder("default").add2("*", "*", (v4, bk1)=>Values.isNull(v4) ? bk1 : v4).vectorize(2, [
        0,
        1
    ]).build();
    DefaultFunctions1.ldefault = new FunctionBuilder("ldefault").add2("*", "*", (v4, bk1)=>Values.isNull(v4) ? bk1 : v4).build();
    DefaultFunctions1.choice = new FunctionBuilder("choice").add3("*", "*", "*", (b1, left1, right1)=>Values.isTruthy(b1) ? left1 : right1).vectorize(3, [
        0
    ]).build();
    DefaultFunctions1.reduce = new FunctionBuilder("reduce").add2("array", "string", (lis1, op1, context1)=>{
        if (lis1.length == 0) return null;
        if (op1 != "+" && op1 != "-" && op1 != "*" && op1 != "/" && op1 != "&" && op1 != "|") throw Error("reduce(array, op) supports '+', '-', '/', '*', '&', and '|'");
        let value1 = lis1[0];
        for(let index1 = 1; index1 < lis1.length; index1++){
            value1 = context1.evaluate(Fields.binaryOp(Fields.literal(value1), op1, Fields.literal(lis1[index1]))).orElseThrow();
        }
        return value1;
    }).add2("array", "function", (lis1, op1, context1)=>{
        if (lis1.length == 0) return null;
        let value1 = lis1[0];
        for(let index1 = 1; index1 < lis1.length; index1++){
            // Skip null values to reduce the pain of summing over fields that may or may not exist.
            if (Values.isNull(lis1[index1])) continue;
            value1 = op1(context1, value1, lis1[index1]);
        }
        return value1;
    }).add2("null", "*", ()=>null).add2("*", "null", ()=>null).vectorize(2, [
        1
    ]).build();
    DefaultFunctions1.sum = new FunctionBuilder("sum").add1("array", (arr1, c1)=>DefaultFunctions1.reduce(c1, arr1, "+")).add1("*", (e1)=>e1).build();
    DefaultFunctions1.average = new FunctionBuilder("average").add1("array", (array1, context1)=>{
        if (array1.length == 0) return null;
        const add1 = DefaultFunctions1.sum(context1, array1);
        if (add1 == null || add1 == undefined) return null;
        return context1.evaluate(Fields.binaryOp(Fields.literal(add1), "/", Fields.literal(array1.length))).orElseThrow();
    }).add1("*", (e1)=>e1).build();
    DefaultFunctions1.product = new FunctionBuilder("product").add1("array", (arr1, c1)=>DefaultFunctions1.reduce(c1, arr1, "*")).add1("*", (e1)=>e1).build();
    DefaultFunctions1.join = new FunctionBuilder("join").add2("array", "string", (arr1, sep1, ctx1)=>arr1.map((e1)=>Values.toString(e1, ctx1.settings)).join(sep1)).add2("array", "null", (arr1, _s1, context1)=>DefaultFunctions1.join(context1, arr1, ", ")).add2("*", "string", (elem3, sep1, ctx1)=>Values.toString(elem3, ctx1.settings)).add1("array", (arr1, context1)=>DefaultFunctions1.join(context1, arr1, ", ")).add1("*", (e1, ctx1)=>Values.toString(e1, ctx1.settings)).vectorize(2, [
        1
    ]).build();
    DefaultFunctions1.any = new FunctionBuilder("any").add1("array", (arr1)=>arr1.some((v4)=>Values.isTruthy(v4))).add2("array", "function", (arr1, f3, ctx1)=>arr1.some((v4)=>Values.isTruthy(f3(ctx1, v4)))).vararg((_ctx1, ...args1)=>args1.some((v4)=>Values.isTruthy(v4))).build();
    DefaultFunctions1.all = new FunctionBuilder("all").add1("array", (arr1)=>arr1.every((v4)=>Values.isTruthy(v4))).add2("array", "function", (arr1, f3, ctx1)=>arr1.every((v4)=>Values.isTruthy(f3(ctx1, v4)))).vararg((_ctx1, ...args1)=>args1.every((v4)=>Values.isTruthy(v4))).build();
    DefaultFunctions1.none = new FunctionBuilder("all").add1("array", (arr1)=>!arr1.some((v4)=>Values.isTruthy(v4))).add2("array", "function", (arr1, f3, ctx1)=>!arr1.some((v4)=>Values.isTruthy(f3(ctx1, v4)))).vararg((_ctx1, ...args1)=>!args1.some((v4)=>Values.isTruthy(v4))).build();
    DefaultFunctions1.filter = new FunctionBuilder("filter").add2("array", "function", (arr1, f3, ctx1)=>arr1.filter((v4)=>Values.isTruthy(f3(ctx1, v4)))).add2("null", "*", ()=>null).build();
    DefaultFunctions1.map = new FunctionBuilder("map").add2("array", "function", (arr1, f3, ctx1)=>arr1.map((v4)=>f3(ctx1, v4))).add2("null", "*", ()=>null).build();
    DefaultFunctions1.nonnull = new FunctionBuilder("nonnull").add1("array", (arr1)=>arr1.filter((v4)=>Values.typeOf(v4) != "null")).vararg((_ctx1, ...args1)=>args1.filter((v4)=>Values.typeOf(v4) != "null")).build();
    /** Gets an object containing a link's own properties */ DefaultFunctions1.meta = new FunctionBuilder("meta").add1("link", (link3)=>{
        var _c1, _d1;
        return {
            display: (_c1 = link3.display) !== null && _c1 !== void 0 ? _c1 : null,
            embed: link3.embed,
            path: link3.path,
            subpath: (_d1 = link3.subpath) !== null && _d1 !== void 0 ? _d1 : null,
            type: link3.type
        };
    }).build();
    // Concatenates sub-array elements into a new array
    DefaultFunctions1.flat = new FunctionBuilder("flat").add1("array", (a1)=>{
        return a1.flat();
    }).add2("array", "number", (a1, n3)=>{
        // @ts-ignore
        return a1.flat(n3);
    }).add1("null", ()=>null).build();
})(DefaultFunctions || (DefaultFunctions = {}));
/** Default function implementations for the expression evaluator. */ const DEFAULT_FUNCTIONS = {
    // Constructors.
    list: DefaultFunctions.list,
    array: DefaultFunctions.list,
    link: DefaultFunctions.link,
    embed: DefaultFunctions.embed,
    elink: DefaultFunctions.elink,
    date: DefaultFunctions.date,
    dur: DefaultFunctions.dur,
    dateformat: DefaultFunctions.dateformat,
    localtime: DefaultFunctions.localtime,
    number: DefaultFunctions.number,
    string: DefaultFunctions.string,
    object: DefaultFunctions.object,
    typeof: DefaultFunctions.typeOf,
    // Math Operations.
    round: DefaultFunctions.round,
    min: DefaultFunctions.min,
    max: DefaultFunctions.max,
    minby: DefaultFunctions.minby,
    maxby: DefaultFunctions.maxby,
    // String operations.
    regexreplace: DefaultFunctions.regexreplace,
    regextest: DefaultFunctions.regextest,
    regexmatch: DefaultFunctions.regexmatch,
    replace: DefaultFunctions.replace,
    lower: DefaultFunctions.lower,
    upper: DefaultFunctions.upper,
    split: DefaultFunctions.split,
    startswith: DefaultFunctions.startswith,
    endswith: DefaultFunctions.endswith,
    padleft: DefaultFunctions.padleft,
    padright: DefaultFunctions.padright,
    substring: DefaultFunctions.substring,
    truncate: DefaultFunctions.truncate,
    // Date Operations.
    striptime: DefaultFunctions.striptime,
    // List operations.
    length: DefaultFunctions.length,
    contains: DefaultFunctions.contains,
    icontains: DefaultFunctions.icontains,
    econtains: DefaultFunctions.econtains,
    containsword: DefaultFunctions.containsword,
    reverse: DefaultFunctions.reverse,
    sort: DefaultFunctions.sort,
    flat: DefaultFunctions.flat,
    // Aggregation operations like reduce.
    reduce: DefaultFunctions.reduce,
    join: DefaultFunctions.join,
    sum: DefaultFunctions.sum,
    product: DefaultFunctions.product,
    average: DefaultFunctions.average,
    all: DefaultFunctions.all,
    any: DefaultFunctions.any,
    none: DefaultFunctions.none,
    filter: DefaultFunctions.filter,
    map: DefaultFunctions.map,
    nonnull: DefaultFunctions.nonnull,
    // Object/Utility operations.
    extract: DefaultFunctions.extract,
    default: DefaultFunctions.fdefault,
    ldefault: DefaultFunctions.ldefault,
    choice: DefaultFunctions.choice,
    meta: DefaultFunctions.meta
};
/** Provides a global dispatch table for evaluating binary operators, including comparison. */ /** Provides implementations for binary operators on two types using a registry. */ class BinaryOpHandler {
    constructor(){
        this.map = new Map();
    }
    static create() {
        return new BinaryOpHandler();
    }
    register(left1, op1, right1, func1) {
        this.map.set(BinaryOpHandler.repr(op1, left1, right1), func1);
        return this;
    }
    registerComm(left1, op1, right1, func1) {
        return this.register(left1, op1, right1, func1).register(right1, op1, left1, (a1, b1, ctx1)=>func1(b1, a1, ctx1));
    }
    /** Implement a comparison function. */ compare(type1, compare1) {
        return this.register(type1, "<", type1, (a1, b1, ctx1)=>compare1(a1, b1, ctx1) < 0).register(type1, "<=", type1, (a1, b1, ctx1)=>compare1(a1, b1, ctx1) <= 0).register(type1, ">", type1, (a1, b1, ctx1)=>compare1(a1, b1, ctx1) > 0).register(type1, ">=", type1, (a1, b1, ctx1)=>compare1(a1, b1, ctx1) >= 0).register(type1, "=", type1, (a1, b1, ctx1)=>compare1(a1, b1, ctx1) == 0).register(type1, "!=", type1, (a1, b1, ctx1)=>compare1(a1, b1, ctx1) != 0);
    }
    /** Attempt to evaluate the given binary operator on the two literal fields. */ evaluate(op1, left1, right1, ctx1) {
        let leftType1 = Values.typeOf(left1);
        let rightType1 = Values.typeOf(right1);
        if (!leftType1) return Result.failure(`Unrecognized value '${left1}'`);
        else if (!rightType1) return Result.failure(`Unrecognized value '${right1}'`);
        let handler1 = this.map.get(BinaryOpHandler.repr(op1, leftType1, rightType1));
        if (handler1) return Result.success(handler1(left1, right1, ctx1));
        // Right-'*' fallback:
        let handler21 = this.map.get(BinaryOpHandler.repr(op1, leftType1, "*"));
        if (handler21) return Result.success(handler21(left1, right1, ctx1));
        // Left-'*' fallback:
        let handler31 = this.map.get(BinaryOpHandler.repr(op1, "*", rightType1));
        if (handler31) return Result.success(handler31(left1, right1, ctx1));
        // Double '*' fallback.
        let handler41 = this.map.get(BinaryOpHandler.repr(op1, "*", "*"));
        if (handler41) return Result.success(handler41(left1, right1, ctx1));
        return Result.failure(`No implementation found for '${leftType1} ${op1} ${rightType1}'`);
    }
    /** Create a string representation of the given triplet for unique lookup in the map. */ static repr(op1, left1, right1) {
        return `${left1},${op1},${right1}`;
    }
}
/** Configure and create a binary OP handler with the given parameters. */ function createBinaryOps(linkNormalizer1) {
    return BinaryOpHandler.create()// TODO: Consider not using a universal comparison function.
    .compare("*", (a1, b1)=>Values.compareValue(a1, b1, linkNormalizer1))// Global boolean operations.
    .register("*", "&", "*", (a1, b1)=>Values.isTruthy(a1) && Values.isTruthy(b1)).register("*", "|", "*", (a1, b1)=>Values.isTruthy(a1) || Values.isTruthy(b1))// Number implementations.
    .register("number", "+", "number", (a1, b1)=>a1 + b1).register("number", "-", "number", (a1, b1)=>a1 - b1).register("number", "*", "number", (a1, b1)=>a1 * b1).register("number", "/", "number", (a1, b1)=>a1 / b1).register("number", "%", "number", (a1, b1)=>a1 % b1)// String implementations.
    .register("string", "+", "*", (a1, b1, ctx1)=>a1 + Values.toString(b1, ctx1.settings)).register("*", "+", "string", (a1, b1, ctx1)=>Values.toString(a1, ctx1.settings) + b1).registerComm("string", "*", "number", (a1, b1)=>b1 < 0 ? "" : a1.repeat(b1))// Date Operations.
    .register("date", "-", "date", (a1, b1)=>{
        return normalizeDuration(a1.diff(b1, [
            "years",
            "months",
            "days",
            "hours",
            "minutes",
            "seconds",
            "milliseconds"
        ]));
    }).register("date", "-", "duration", (a1, b1)=>a1.minus(b1)).registerComm("date", "+", "duration", (a1, b1)=>a1.plus(b1))// Duration Operations.
    .register("duration", "+", "duration", (a1, b1)=>normalizeDuration(a1.plus(b1))).register("duration", "-", "duration", (a1, b1)=>normalizeDuration(a1.minus(b1))).register("duration", "/", "number", (a1, b1)=>normalizeDuration(a1.mapUnits((x1)=>x1 / b1))).registerComm("duration", "*", "number", (a1, b1)=>normalizeDuration(a1.mapUnits((x1)=>x1 * b1)))// Array operations.
    .register("array", "+", "array", (a1, b1)=>[].concat(a1).concat(b1))// Object operations.
    .register("object", "+", "object", (a1, b1)=>Object.assign({}, a1, b1))// Null handling operators.
    .register("null", "+", "null", (_a1, _b1)=>null).register("null", "-", "null", (_a1, _b1)=>null).register("null", "*", "null", (_a1, _b1)=>null).register("null", "/", "null", (_a1, _b1)=>null).register("null", "%", "null", (_a1, _b1)=>null).register("date", "+", "null", (_a1, _b1)=>null).register("null", "+", "date", (_a1, _b1)=>null).register("date", "-", "null", (_a1, _b1)=>null).register("null", "-", "date", (_a1, _b1)=>null);
}
/** Core implementation of the query language evaluation engine. */ /**
 * Evaluation context that expressions can be evaluated in. Includes global state, as well as available functions and a handler
 * for binary operators.
 */ class Context {
    /**
     * Create a new context with the given namespace of globals, as well as optionally with custom binary operator, function,
     * and link handlers.
     */ constructor(linkHandler1, settings1, globals1 = {}, binaryOps1 = createBinaryOps(linkHandler1.normalize), functions1 = DEFAULT_FUNCTIONS){
        this.linkHandler = linkHandler1;
        this.settings = settings1;
        this.globals = globals1;
        this.binaryOps = binaryOps1;
        this.functions = functions1;
    }
    /** Set a global value in this context. */ set(name1, value1) {
        this.globals[name1] = value1;
        return this;
    }
    /** Get the value of a global variable by name. Returns null if not present. */ get(name1) {
        var _a1;
        return (_a1 = this.globals[name1]) !== null && _a1 !== void 0 ? _a1 : null;
    }
    /** Try to evaluate an arbitrary field in this context, raising an exception on failure. */ tryEvaluate(field1, data1 = {}) {
        return this.evaluate(field1, data1).orElseThrow();
    }
    /** Evaluate an arbitrary field in this context. */ evaluate(field1, data1 = {}) {
        var _a1, _b1;
        switch(field1.type){
            case "literal":
                return Result.success(field1.value);
            case "variable":
                if (field1.name in data1) return Result.success(data1[field1.name]);
                else if (field1.name in this.globals) return Result.success(this.globals[field1.name]);
                else return Result.success(null);
            case "negated":
                return this.evaluate(field1.child, data1).map((s1)=>!Values.isTruthy(s1));
            case "binaryop":
                return Result.flatMap2(this.evaluate(field1.left, data1), this.evaluate(field1.right, data1), (a1, b1)=>this.binaryOps.evaluate(field1.op, a1, b1, this));
            case "list":
                let result1 = [];
                for (let child1 of field1.values){
                    let subeval1 = this.evaluate(child1, data1);
                    if (!subeval1.successful) return subeval1;
                    result1.push(subeval1.value);
                }
                return Result.success(result1);
            case "object":
                let objResult1 = {};
                for (let [key1, child1] of Object.entries(field1.values)){
                    let subeval1 = this.evaluate(child1, data1);
                    if (!subeval1.successful) return subeval1;
                    objResult1[key1] = subeval1.value;
                }
                return Result.success(objResult1);
            case "lambda":
                // Just relying on JS to capture 'data' for us implicitly; unsure
                // if this is correct thing to do. Could cause weird behaviors.
                return Result.success((ctx1, ...args1)=>{
                    let copy1 = Object.assign({}, data1);
                    for(let arg4 = 0; arg4 < Math.min(args1.length, field1.arguments.length); arg4++){
                        copy1[field1.arguments[arg4]] = args1[arg4];
                    }
                    return ctx1.evaluate(field1.value, copy1).orElseThrow();
                });
            case "function":
                let rawFunc1 = field1.func.type == "variable" ? Result.success(field1.func.name) : this.evaluate(field1.func, data1);
                if (!rawFunc1.successful) return rawFunc1;
                let func1 = rawFunc1.value;
                let args1 = [];
                for (let arg4 of field1.arguments){
                    let resolved1 = this.evaluate(arg4, data1);
                    if (!resolved1.successful) return resolved1;
                    args1.push(resolved1.value);
                }
                let call1;
                if (Values.isFunction(func1)) call1 = func1;
                else if (Values.isString(func1) && func1 in this.functions) call1 = this.functions[func1];
                else if (Values.isString(func1)) return Result.failure(`Unrecognized function name '${func1}'`);
                else return Result.failure(`Cannot call type '${Values.typeOf(func1)}' as a function`);
                try {
                    return Result.success(call1(this, ...args1));
                } catch (e1) {
                    return Result.failure(e1.message);
                }
            case "index":
                // TODO: Will move this out to an 'primitives' module and add more content to it.
                let literalIndex1 = this.evaluate(field1.index, data1);
                let checkedIndex1 = literalIndex1.flatMap((s1)=>Values.isString(s1) || Values.isNumber(s1) || Values.isNull(s1) ? Result.success(s1) : Result.failure("Can only index with a string or number"));
                if (!checkedIndex1.successful) return checkedIndex1;
                let index1 = checkedIndex1.value;
                if (Values.isNull(index1)) return Result.success(null);
                let checkedObject1 = field1.object.type == "variable" && field1.object.name == "row" ? Result.success(Object.assign({}, this.globals, data1)) : this.evaluate(field1.object, data1);
                if (!checkedObject1.successful) return checkedObject1;
                let object1 = Values.wrapValue(checkedObject1.value);
                if (!object1) return Result.failure("Unrecognized object to index into: " + object1);
                switch(object1.type){
                    case "object":
                        if (!Values.isString(index1)) return Result.failure('can only index into objects with strings (a.b or a["b"])');
                        return Result.success((_a1 = object1.value[index1]) !== null && _a1 !== void 0 ? _a1 : null);
                    case "link":
                        if (!Values.isString(index1)) return Result.failure('can only index into links with strings (a.b or a["b"])');
                        let linkValue1 = this.linkHandler.resolve(object1.value.path);
                        if (Values.isNull(linkValue1)) return Result.success(null);
                        return Result.success((_b1 = linkValue1[index1]) !== null && _b1 !== void 0 ? _b1 : null);
                    case "array":
                        if (Values.isNumber(index1)) {
                            if (index1 >= object1.value.length || index1 < 0) return Result.success(null);
                            else return Result.success(object1.value[index1]);
                        } else if (Values.isString(index1)) {
                            let result1 = [];
                            for (let value1 of object1.value){
                                let next1 = this.evaluate(Fields.index(Fields.literal(value1), Fields.literal(index1)));
                                if (!next1.successful) continue;
                                result1.push(next1.value);
                            }
                            return Result.success(result1);
                        } else {
                            return Result.failure("Array indexing requires either a number (to get a specific element), or a string (to map all elements inside the array)");
                        }
                    case "string":
                        if (!Values.isNumber(index1)) return Result.failure("string indexing requires a numeric index (string[index])");
                        if (index1 >= object1.value.length || index1 < 0) return Result.success(null);
                        return Result.success(object1.value[index1]);
                    case "date":
                        if (!Values.isString(index1)) return Result.failure("date indexing requires a string representing the unit");
                        switch(index1){
                            case "year":
                                return Result.success(object1.value.year);
                            case "month":
                                return Result.success(object1.value.month);
                            case "weekyear":
                                return Result.success(object1.value.weekNumber);
                            case "week":
                                return Result.success(Math.floor(object1.value.day / 7) + 1);
                            case "weekday":
                                return Result.success(object1.value.weekday);
                            case "day":
                                return Result.success(object1.value.day);
                            case "hour":
                                return Result.success(object1.value.hour);
                            case "minute":
                                return Result.success(object1.value.minute);
                            case "second":
                                return Result.success(object1.value.second);
                            case "millisecond":
                                return Result.success(object1.value.millisecond);
                            default:
                                return Result.success(null);
                        }
                    case "duration":
                        if (!Values.isString(index1)) return Result.failure("duration indexing requires a string representing the unit");
                        switch(index1){
                            case "year":
                            case "years":
                                return Result.success(object1.value.shiftTo("years").years);
                            case "month":
                            case "months":
                                return Result.success(object1.value.shiftTo("months").months);
                            case "weeks":
                                return Result.success(object1.value.shiftTo("weeks").weeks);
                            case "day":
                            case "days":
                                return Result.success(object1.value.shiftTo("days").days);
                            case "hour":
                            case "hours":
                                return Result.success(object1.value.shiftTo("hours").hours);
                            case "minute":
                            case "minutes":
                                return Result.success(object1.value.shiftTo("minutes").minutes);
                            case "second":
                            case "seconds":
                                return Result.success(object1.value.shiftTo("seconds").seconds);
                            case "millisecond":
                            case "milliseconds":
                                return Result.success(object1.value.shiftTo("milliseconds").milliseconds);
                            default:
                                return Result.success(null);
                        }
                    default:
                        return Result.success(null);
                }
        }
    }
}
function iden(x1) {
    return x1;
}
/** Shared execution code which just takes in arbitrary data, runs operations over it, and returns it + per-row errors. */ function executeCore(rows1, context1, ops1) {
    let diagnostics1 = [];
    let identMeaning1 = {
        type: "path"
    };
    let startTime1 = Date.now();
    for (let op1 of ops1){
        let opStartTime1 = Date.now();
        let incomingRows1 = rows1.length;
        let errors1 = [];
        switch(op1.type){
            case "where":
                let whereResult1 = [];
                for(let index1 = 0; index1 < rows1.length; index1++){
                    let row1 = rows1[index1];
                    let value1 = context1.evaluate(op1.clause, row1.data);
                    if (!value1.successful) errors1.push({
                        index: index1,
                        message: value1.error
                    });
                    else if (Values.isTruthy(value1.value)) whereResult1.push(row1);
                }
                rows1 = whereResult1;
                break;
            case "sort":
                let sortFields1 = op1.fields;
                let taggedData1 = [];
                outer: for(let index1 = 0; index1 < rows1.length; index1++){
                    let row1 = rows1[index1];
                    let rowSorts1 = [];
                    for(let sIndex1 = 0; sIndex1 < sortFields1.length; sIndex1++){
                        let value1 = context1.evaluate(sortFields1[sIndex1].field, row1.data);
                        if (!value1.successful) {
                            errors1.push({
                                index: index1,
                                message: value1.error
                            });
                            continue outer;
                        }
                        rowSorts1.push(value1.value);
                    }
                    taggedData1.push({
                        data: row1,
                        fields: rowSorts1
                    });
                }
                // Sort rows by the sort fields, and then return the finished result.
                taggedData1.sort((a1, b1)=>{
                    for(let index1 = 0; index1 < sortFields1.length; index1++){
                        let factor1 = sortFields1[index1].direction === "ascending" ? 1 : -1;
                        let le1 = context1.binaryOps.evaluate("<", a1.fields[index1], b1.fields[index1], context1).orElse(false);
                        if (Values.isTruthy(le1)) return factor1 * -1;
                        let ge1 = context1.binaryOps.evaluate(">", a1.fields[index1], b1.fields[index1], context1).orElse(false);
                        if (Values.isTruthy(ge1)) return factor1 * 1;
                    }
                    return 0;
                });
                rows1 = taggedData1.map((v4)=>v4.data);
                break;
            case "limit":
                let limiting1 = context1.evaluate(op1.amount);
                if (!limiting1.successful) return Result.failure("Failed to execute 'limit' statement: " + limiting1.error);
                if (!Values.isNumber(limiting1.value)) return Result.failure(`Failed to execute 'limit' statement: limit should be a number, but got '${Values.typeOf(limiting1.value)}' (${limiting1.value})`);
                rows1 = rows1.slice(0, limiting1.value);
                break;
            case "group":
                let groupData1 = [];
                for(let index1 = 0; index1 < rows1.length; index1++){
                    let value1 = context1.evaluate(op1.field.field, rows1[index1].data);
                    if (!value1.successful) {
                        errors1.push({
                            index: index1,
                            message: value1.error
                        });
                        continue;
                    }
                    groupData1.push({
                        data: rows1[index1],
                        key: value1.value
                    });
                }
                // Sort by the key, which we will group on shortly.
                groupData1.sort((a1, b1)=>{
                    let le1 = context1.binaryOps.evaluate("<", a1.key, b1.key, context1).orElse(false);
                    if (Values.isTruthy(le1)) return -1;
                    let ge1 = context1.binaryOps.evaluate(">", a1.key, b1.key, context1).orElse(false);
                    if (Values.isTruthy(ge1)) return 1;
                    return 0;
                });
                // Then walk through and find fields that are equal.
                let finalGroupData1 = [];
                if (groupData1.length > 0) finalGroupData1.push({
                    key: groupData1[0].key,
                    rows: [
                        groupData1[0].data.data
                    ],
                    [op1.field.name]: groupData1[0].key
                });
                for(let index1 = 1; index1 < groupData1.length; index1++){
                    let curr1 = groupData1[index1], prev1 = groupData1[index1 - 1];
                    if (context1.binaryOps.evaluate("=", curr1.key, prev1.key, context1).orElse(false)) {
                        finalGroupData1[finalGroupData1.length - 1].rows.push(curr1.data.data);
                    } else {
                        finalGroupData1.push({
                            key: curr1.key,
                            rows: [
                                curr1.data.data
                            ],
                            [op1.field.name]: curr1.key
                        });
                    }
                }
                rows1 = finalGroupData1.map((d1)=>{
                    return {
                        id: d1.key,
                        data: d1
                    };
                });
                identMeaning1 = {
                    type: "group",
                    name: op1.field.name,
                    on: identMeaning1
                };
                break;
            case "flatten":
                let flattenResult1 = [];
                for(let index1 = 0; index1 < rows1.length; index1++){
                    let row1 = rows1[index1];
                    let value1 = context1.evaluate(op1.field.field, row1.data);
                    if (!value1.successful) {
                        errors1.push({
                            index: index1,
                            message: value1.error
                        });
                        continue;
                    }
                    let datapoints1 = Values.isArray(value1.value) ? value1.value : [
                        value1.value
                    ];
                    for (let v4 of datapoints1){
                        let copy1 = Values.deepCopy(row1);
                        copy1.data[op1.field.name] = v4;
                        flattenResult1.push(copy1);
                    }
                }
                rows1 = flattenResult1;
                if (identMeaning1.type == "group" && identMeaning1.name == op1.field.name) identMeaning1 = identMeaning1.on;
                break;
            default:
                return Result.failure("Unrecognized query operation '" + op1.type + "'");
        }
        if (errors1.length >= incomingRows1 && incomingRows1 > 0) {
            return Result.failure(`Every row during operation '${op1.type}' failed with an error; first ${Math.min(3, errors1.length)}:\n
                ${errors1.slice(0, 3).map((d1)=>"- " + d1.message).join("\n")}`);
        }
        diagnostics1.push({
            incomingRows: incomingRows1,
            errors: errors1,
            outgoingRows: rows1.length,
            timeMs: Date.now() - opStartTime1
        });
    }
    return Result.success({
        data: rows1,
        idMeaning: identMeaning1,
        ops: ops1,
        diagnostics: diagnostics1,
        timeMs: Date.now() - startTime1
    });
}
/** Expanded version of executeCore which adds an additional "extraction" step to the pipeline. */ function executeCoreExtract(rows1, context1, ops1, fields1) {
    let internal1 = executeCore(rows1, context1, ops1);
    if (!internal1.successful) return internal1;
    let core1 = internal1.value;
    let startTime1 = Date.now();
    let errors1 = [];
    let res1 = [];
    outer: for(let index1 = 0; index1 < core1.data.length; index1++){
        let page1 = {
            id: core1.data[index1].id,
            data: {}
        };
        for (let [name1, field1] of Object.entries(fields1)){
            let value1 = context1.evaluate(field1, core1.data[index1].data);
            if (!value1.successful) {
                errors1.push({
                    index: index1,
                    message: value1.error
                });
                continue outer;
            }
            page1.data[name1] = value1.value;
        }
        res1.push(page1);
    }
    if (errors1.length >= core1.data.length && core1.data.length > 0) {
        return Result.failure(`Every row during final data extraction failed with an error; first ${Math.max(errors1.length, 3)}:\n
            ${errors1.slice(0, 3).map((d1)=>"- " + d1.message).join("\n")}`);
    }
    let execTime1 = Date.now() - startTime1;
    return Result.success({
        data: res1,
        idMeaning: core1.idMeaning,
        diagnostics: core1.diagnostics.concat([
            {
                timeMs: execTime1,
                incomingRows: core1.data.length,
                outgoingRows: res1.length,
                errors: errors1
            }
        ]),
        ops: core1.ops.concat([
            {
                type: "extract",
                fields: fields1
            }
        ]),
        timeMs: core1.timeMs + execTime1
    });
}
/** Execute a list-based query, returning the final results. */ async function executeList(query1, index1, origin1, settings1) {
    var _a1, _b1;
    // Start by collecting all of the files that match the 'from' queries.
    let fileset1 = await resolveSource(query1.source, index1, origin1);
    if (!fileset1.successful) return Result.failure(fileset1.error);
    // Extract information about the origin page to add to the root context.
    let rootContext1 = new Context(defaultLinkHandler(index1, origin1), settings1, {
        this: (_b1 = (_a1 = index1.pages.get(origin1)) === null || _a1 === void 0 ? void 0 : _a1.serialize(index1)) !== null && _b1 !== void 0 ? _b1 : {}
    });
    let targetField1 = query1.header.format;
    let showId1 = query1.header.showId;
    let fields1 = targetField1 ? {
        target: targetField1
    } : {};
    return executeCoreExtract(fileset1.value, rootContext1, query1.operations, fields1).map((core1)=>{
        let data1;
        if (showId1 && targetField1) {
            data1 = core1.data.map((p3)=>{
                var _a1;
                return Widgets.listPair(p3.id, (_a1 = p3.data["target"]) !== null && _a1 !== void 0 ? _a1 : null);
            });
        } else if (targetField1) {
            data1 = core1.data.map((p3)=>{
                var _a1;
                return (_a1 = p3.data["target"]) !== null && _a1 !== void 0 ? _a1 : null;
            });
        } else {
            data1 = core1.data.map((p3)=>p3.id);
        }
        return {
            primaryMeaning: core1.idMeaning,
            core: core1,
            data: data1
        };
    });
}
/** Execute a table query. */ async function executeTable(query1, index1, origin1, settings1) {
    var _a1, _b1;
    // Start by collecting all of the files that match the 'from' queries.
    let fileset1 = await resolveSource(query1.source, index1, origin1);
    if (!fileset1.successful) return Result.failure(fileset1.error);
    // Extract information about the origin page to add to the root context.
    let rootContext1 = new Context(defaultLinkHandler(index1, origin1), settings1, {
        this: (_b1 = (_a1 = index1.pages.get(origin1)) === null || _a1 === void 0 ? void 0 : _a1.serialize(index1)) !== null && _b1 !== void 0 ? _b1 : {}
    });
    let targetFields1 = query1.header.fields;
    let showId1 = query1.header.showId;
    let fields1 = {};
    for (let field1 of targetFields1)fields1[field1.name] = field1.field;
    return executeCoreExtract(fileset1.value, rootContext1, query1.operations, fields1).map((core1)=>{
        if (showId1) {
            const idName1 = core1.idMeaning.type === "group" ? core1.idMeaning.name : settings1.tableIdColumnName;
            let names1 = [
                idName1
            ].concat(targetFields1.map((f3)=>f3.name));
            let data1 = core1.data.map((p3)=>[
                    p3.id
                ].concat(targetFields1.map((f3)=>p3.data[f3.name])));
            return {
                core: core1,
                names: names1,
                data: data1,
                idMeaning: core1.idMeaning
            };
        } else {
            let names1 = targetFields1.map((f3)=>f3.name);
            let data1 = core1.data.map((p3)=>targetFields1.map((f3)=>p3.data[f3.name]));
            return {
                core: core1,
                names: names1,
                data: data1,
                idMeaning: core1.idMeaning
            };
        }
    });
}
/** Maps a raw core execution result to a task grouping which is much easier to render. */ function extractTaskGroupings(id1, rows1) {
    switch(id1.type){
        case "path":
            return rows1;
        case "group":
            let key1 = id1.name;
            return rows1.map((r4)=>iden({
                    key: r4[key1],
                    rows: extractTaskGroupings(id1.on, r4.rows)
                }));
    }
}
/** Execute a task query, returning all matching tasks. */ async function executeTask(query1, origin1, index1, settings1) {
    var _a1, _b1;
    let fileset1 = matchingSourcePaths(query1.source, index1, origin1);
    if (!fileset1.successful) return Result.failure(fileset1.error);
    // Collect tasks from pages which match.
    let incomingTasks1 = [];
    for (let path1 of fileset1.value){
        let page1 = index1.pages.get(path1);
        if (!page1) continue;
        let pageData1 = page1.serialize(index1);
        let pageTasks1 = pageData1.file.tasks.map((t5)=>{
            const tcopy1 = Values.deepCopy(t5);
            // Add page data to this copy.
            for (let [key1, value1] of Object.entries(pageData1)){
                if (key1 in tcopy1) continue;
                tcopy1[key1] = value1;
            }
            return {
                id: `${pageData1.path}#${t5.line}`,
                data: tcopy1
            };
        });
        for (let task1 of pageTasks1)incomingTasks1.push(task1);
    }
    // Extract information about the origin page to add to the root context.
    let rootContext1 = new Context(defaultLinkHandler(index1, origin1), settings1, {
        this: (_b1 = (_a1 = index1.pages.get(origin1)) === null || _a1 === void 0 ? void 0 : _a1.serialize(index1)) !== null && _b1 !== void 0 ? _b1 : {}
    });
    return executeCore(incomingTasks1, rootContext1, query1.operations).map((core1)=>{
        return {
            core: core1,
            tasks: extractTaskGroupings(core1.idMeaning, core1.data.map((r4)=>r4.data))
        };
    });
}
/** Execute a single field inline a file, returning the evaluated result. */ function executeInline(field1, origin1, index1, settings1) {
    var _a1, _b1;
    return new Context(defaultLinkHandler(index1, origin1), settings1, {
        this: (_b1 = (_a1 = index1.pages.get(origin1)) === null || _a1 === void 0 ? void 0 : _a1.serialize(index1)) !== null && _b1 !== void 0 ? _b1 : {}
    }).evaluate(field1);
}
/** The default link resolver used when creating contexts. */ function defaultLinkHandler(index1, origin1) {
    return {
        resolve: (link3)=>{
            let realFile1 = index1.metadataCache.getFirstLinkpathDest(link3, origin1);
            if (!realFile1) return null;
            let realPage1 = index1.pages.get(realFile1.path);
            if (!realPage1) return null;
            return realPage1.serialize(index1);
        },
        normalize: (link3)=>{
            var _a1;
            let realFile1 = index1.metadataCache.getFirstLinkpathDest(link3, origin1);
            return (_a1 = realFile1 === null || realFile1 === void 0 ? void 0 : realFile1.path) !== null && _a1 !== void 0 ? _a1 : link3;
        },
        exists: (link3)=>{
            let realFile1 = index1.metadataCache.getFirstLinkpathDest(link3, origin1);
            return !!realFile1;
        }
    };
}
/** Execute a calendar-based query, returning the final results. */ async function executeCalendar(query1, index1, origin1, settings1) {
    var _a1, _b1;
    // Start by collecting all of the files that match the 'from' queries.
    let fileset1 = await resolveSource(query1.source, index1, origin1);
    if (!fileset1.successful) return Result.failure(fileset1.error);
    // Extract information about the origin page to add to the root context.
    let rootContext1 = new Context(defaultLinkHandler(index1, origin1), settings1, {
        this: (_b1 = (_a1 = index1.pages.get(origin1)) === null || _a1 === void 0 ? void 0 : _a1.serialize(index1)) !== null && _b1 !== void 0 ? _b1 : {}
    });
    let targetField1 = query1.header.field.field;
    let fields1 = {
        target: targetField1,
        link: Fields.indexVariable("file.link")
    };
    return executeCoreExtract(fileset1.value, rootContext1, query1.operations, fields1).map((core1)=>{
        let data1 = core1.data.map((p3)=>iden({
                date: p3.data["target"],
                link: p3.data["link"]
            }));
        return {
            core: core1,
            data: data1
        };
    });
}
function compareVersions(v11, v21) {
    // validate input and split into segments
    const n11 = validateAndParse(v11);
    const n21 = validateAndParse(v21);
    // pop off the patch
    const p11 = n11.pop();
    const p21 = n21.pop();
    // validate numbers
    const r4 = compareSegments(n11, n21);
    if (r4 !== 0) return r4;
    // validate pre-release
    if (p11 && p21) {
        return compareSegments(p11.split("."), p21.split("."));
    } else if (p11 || p21) {
        return p11 ? -1 : 1;
    }
    return 0;
}
const validate = (v4)=>typeof v4 === "string" && /^[v\d]/.test(v4) && semver.test(v4);
const compare = (v11, v21, operator1)=>{
    // validate input operator
    assertValidOperator(operator1);
    // since result of compareVersions can only be -1 or 0 or 1
    // a simple map can be used to replace switch
    const res1 = compareVersions(v11, v21);
    return operatorResMap[operator1].includes(res1);
};
const satisfies = (v4, r4)=>{
    // if no range operator then "="
    const m1 = r4.match(/^([<>=~^]+)/);
    const op1 = m1 ? m1[1] : "=";
    // if gt/lt/eq then operator compare
    if (op1 !== "^" && op1 !== "~") return compare(v4, r4, op1);
    // else range of either "~" or "^" is assumed
    const [v11, v21, v31] = validateAndParse(v4);
    const [r11, r21, r31] = validateAndParse(r4);
    if (compareStrings(v11, r11) !== 0) return false;
    if (op1 === "^") {
        return compareSegments([
            v21,
            v31
        ], [
            r21,
            r31
        ]) >= 0;
    }
    if (compareStrings(v21, r21) !== 0) return false;
    return compareStrings(v31, r31) >= 0;
};
// export CJS style for parity
compareVersions.validate = validate;
compareVersions.compare = compare;
compareVersions.sastisfies = satisfies;
const semver = /^[v^~<>=]*?(\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+))?(?:-([\da-z\-]+(?:\.[\da-z\-]+)*))?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i;
const validateAndParse = (v4)=>{
    if (typeof v4 !== "string") {
        throw new TypeError("Invalid argument expected string");
    }
    const match1 = v4.match(semver);
    if (!match1) {
        throw new Error(`Invalid argument not valid semver ('${v4}' received)`);
    }
    match1.shift();
    return match1;
};
const isWildcard = (s1)=>s1 === "*" || s1 === "x" || s1 === "X";
const tryParse = (v4)=>{
    const n3 = parseInt(v4, 10);
    return isNaN(n3) ? v4 : n3;
};
const forceType = (a1, b1)=>typeof a1 !== typeof b1 ? [
        String(a1),
        String(b1)
    ] : [
        a1,
        b1
    ];
const compareStrings = (a1, b1)=>{
    if (isWildcard(a1) || isWildcard(b1)) return 0;
    const [ap1, bp1] = forceType(tryParse(a1), tryParse(b1));
    if (ap1 > bp1) return 1;
    if (ap1 < bp1) return -1;
    return 0;
};
const compareSegments = (a1, b1)=>{
    for(let i1 = 0; i1 < Math.max(a1.length, b1.length); i1++){
        const r4 = compareStrings(a1[i1] || 0, b1[i1] || 0);
        if (r4 !== 0) return r4;
    }
    return 0;
};
const operatorResMap = {
    ">": [
        1
    ],
    ">=": [
        0,
        1
    ],
    "=": [
        0
    ],
    "<=": [
        -1,
        0
    ],
    "<": [
        -1
    ]
};
const allowedOperators = Object.keys(operatorResMap);
const assertValidOperator = (op1)=>{
    if (typeof op1 !== "string") {
        throw new TypeError(`Invalid operator type, expected string but got ${typeof op1}`);
    }
    if (allowedOperators.indexOf(op1) === -1) {
        throw new Error(`Invalid operator, expected one of ${allowedOperators.join("|")}`);
    }
};
var n, l$1, u$1, t$1, o$1, r$1, f$1, e$1 = {}, c$1 = [], s$1 = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
function a$1(n3, l1) {
    for(var u1 in l1)n3[u1] = l1[u1];
    return n3;
}
function h$1(n3) {
    var l1 = n3.parentNode;
    l1 && l1.removeChild(n3);
}
function v$1(l1, u1, i1) {
    var t5, o4, r4, f3 = {};
    for(r4 in u1)"key" == r4 ? t5 = u1[r4] : "ref" == r4 ? o4 = u1[r4] : f3[r4] = u1[r4];
    if (arguments.length > 2 && (f3.children = arguments.length > 3 ? n.call(arguments, 2) : i1), "function" == typeof l1 && null != l1.defaultProps) for(r4 in l1.defaultProps)void 0 === f3[r4] && (f3[r4] = l1.defaultProps[r4]);
    return y$1(l1, f3, t5, o4, null);
}
function y$1(n3, i1, t5, o4, r4) {
    var f3 = {
        type: n3,
        props: i1,
        key: t5,
        ref: o4,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: null == r4 ? ++u$1 : r4
    };
    return null == r4 && null != l$1.vnode && l$1.vnode(f3), f3;
}
function p$1() {
    return {
        current: null
    };
}
function d$1(n3) {
    return n3.children;
}
function _$1(n3, l1) {
    this.props = n3, this.context = l1;
}
function k$2(n3, l1) {
    if (null == l1) return n3.__ ? k$2(n3.__, n3.__.__k.indexOf(n3) + 1) : null;
    for(var u1; l1 < n3.__k.length; l1++)if (null != (u1 = n3.__k[l1]) && null != u1.__e) return u1.__e;
    return "function" == typeof n3.type ? k$2(n3) : null;
}
function b$1(n3) {
    var l1, u1;
    if (null != (n3 = n3.__) && null != n3.__c) {
        for(n3.__e = n3.__c.base = null, l1 = 0; l1 < n3.__k.length; l1++)if (null != (u1 = n3.__k[l1]) && null != u1.__e) {
            n3.__e = n3.__c.base = u1.__e;
            break;
        }
        return b$1(n3);
    }
}
function m$1(n3) {
    (!n3.__d && (n3.__d = !0) && t$1.push(n3) && !g$2.__r++ || r$1 !== l$1.debounceRendering) && ((r$1 = l$1.debounceRendering) || o$1)(g$2);
}
function g$2() {
    for(var n3; g$2.__r = t$1.length;)n3 = t$1.sort(function(n3, l1) {
        return n3.__v.__b - l1.__v.__b;
    }), t$1 = [], n3.some(function(n3) {
        var l1, u1, i1, t5, o4, r4;
        n3.__d && (o4 = (t5 = (l1 = n3).__v).__e, (r4 = l1.__P) && (u1 = [], (i1 = a$1({}, t5)).__v = t5.__v + 1, j$2(r4, t5, i1, l1.__n, void 0 !== r4.ownerSVGElement, null != t5.__h ? [
            o4
        ] : null, u1, null == o4 ? k$2(t5) : o4, t5.__h), z$1(u1, t5), t5.__e != o4 && b$1(t5)));
    });
}
function w$2(n3, l1, u1, i1, t5, o4, r4, f3, s1, a1) {
    var h1, v4, p3, _5, b1, m1, g1, w1 = i1 && i1.__k || c$1, A1 = w1.length;
    for(u1.__k = [], h1 = 0; h1 < l1.length; h1++)if (null != (_5 = u1.__k[h1] = null == (_5 = l1[h1]) || "boolean" == typeof _5 ? null : "string" == typeof _5 || "number" == typeof _5 || "bigint" == typeof _5 ? y$1(null, _5, null, null, _5) : Array.isArray(_5) ? y$1(d$1, {
        children: _5
    }, null, null, null) : _5.__b > 0 ? y$1(_5.type, _5.props, _5.key, null, _5.__v) : _5)) {
        if (_5.__ = u1, _5.__b = u1.__b + 1, null === (p3 = w1[h1]) || p3 && _5.key == p3.key && _5.type === p3.type) w1[h1] = void 0;
        else for(v4 = 0; v4 < A1; v4++){
            if ((p3 = w1[v4]) && _5.key == p3.key && _5.type === p3.type) {
                w1[v4] = void 0;
                break;
            }
            p3 = null;
        }
        j$2(n3, _5, p3 = p3 || e$1, t5, o4, r4, f3, s1, a1), b1 = _5.__e, (v4 = _5.ref) && p3.ref != v4 && (g1 || (g1 = []), p3.ref && g1.push(p3.ref, null, _5), g1.push(v4, _5.__c || b1, _5)), null != b1 ? (null == m1 && (m1 = b1), "function" == typeof _5.type && _5.__k === p3.__k ? _5.__d = s1 = x$2(_5, s1, n3) : s1 = P$1(n3, _5, p3, w1, b1, s1), "function" == typeof u1.type && (u1.__d = s1)) : s1 && p3.__e == s1 && s1.parentNode != n3 && (s1 = k$2(p3));
    }
    for(u1.__e = m1, h1 = A1; h1--;)null != w1[h1] && ("function" == typeof u1.type && null != w1[h1].__e && w1[h1].__e == u1.__d && (u1.__d = k$2(i1, h1 + 1)), N$1(w1[h1], w1[h1]));
    if (g1) for(h1 = 0; h1 < g1.length; h1++)M$1(g1[h1], g1[++h1], g1[++h1]);
}
function x$2(n3, l1, u1) {
    for(var i1, t5 = n3.__k, o4 = 0; t5 && o4 < t5.length; o4++)(i1 = t5[o4]) && (i1.__ = n3, l1 = "function" == typeof i1.type ? x$2(i1, l1, u1) : P$1(u1, i1, i1, t5, i1.__e, l1));
    return l1;
}
function A$2(n3, l1) {
    return l1 = l1 || [], null == n3 || "boolean" == typeof n3 || (Array.isArray(n3) ? n3.some(function(n3) {
        A$2(n3, l1);
    }) : l1.push(n3)), l1;
}
function P$1(n3, l1, u1, i1, t5, o4) {
    var r4, f3, e1;
    if (void 0 !== l1.__d) r4 = l1.__d, l1.__d = void 0;
    else if (null == u1 || t5 != o4 || null == t5.parentNode) n: if (null == o4 || o4.parentNode !== n3) n3.appendChild(t5), r4 = null;
    else {
        for(f3 = o4, e1 = 0; (f3 = f3.nextSibling) && e1 < i1.length; e1 += 2)if (f3 == t5) break n;
        n3.insertBefore(t5, o4), r4 = o4;
    }
    return void 0 !== r4 ? r4 : t5.nextSibling;
}
function C$1(n3, l1, u1, i1, t5) {
    var o4;
    for(o4 in u1)"children" === o4 || "key" === o4 || o4 in l1 || H$1(n3, o4, null, u1[o4], i1);
    for(o4 in l1)t5 && "function" != typeof l1[o4] || "children" === o4 || "key" === o4 || "value" === o4 || "checked" === o4 || u1[o4] === l1[o4] || H$1(n3, o4, l1[o4], u1[o4], i1);
}
function $$1(n3, l1, u1) {
    "-" === l1[0] ? n3.setProperty(l1, u1) : n3[l1] = null == u1 ? "" : "number" != typeof u1 || s$1.test(l1) ? u1 : u1 + "px";
}
function H$1(n3, l1, u1, i1, t5) {
    var o4;
    n: if ("style" === l1) if ("string" == typeof u1) n3.style.cssText = u1;
    else {
        if ("string" == typeof i1 && (n3.style.cssText = i1 = ""), i1) for(l1 in i1)u1 && l1 in u1 || $$1(n3.style, l1, "");
        if (u1) for(l1 in u1)i1 && u1[l1] === i1[l1] || $$1(n3.style, l1, u1[l1]);
    }
    else if ("o" === l1[0] && "n" === l1[1]) o4 = l1 !== (l1 = l1.replace(/Capture$/, "")), l1 = l1.toLowerCase() in n3 ? l1.toLowerCase().slice(2) : l1.slice(2), n3.l || (n3.l = {}), n3.l[l1 + o4] = u1, u1 ? i1 || n3.addEventListener(l1, o4 ? T$2 : I$1, o4) : n3.removeEventListener(l1, o4 ? T$2 : I$1, o4);
    else if ("dangerouslySetInnerHTML" !== l1) {
        if (t5) l1 = l1.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
        else if ("href" !== l1 && "list" !== l1 && "form" !== l1 && "tabIndex" !== l1 && "download" !== l1 && l1 in n3) try {
            n3[l1] = null == u1 ? "" : u1;
            break n;
        } catch (n3) {}
        "function" == typeof u1 || (null != u1 && (!1 !== u1 || "a" === l1[0] && "r" === l1[1]) ? n3.setAttribute(l1, u1) : n3.removeAttribute(l1));
    }
}
function I$1(n3) {
    this.l[n3.type + !1](l$1.event ? l$1.event(n3) : n3);
}
function T$2(n3) {
    this.l[n3.type + !0](l$1.event ? l$1.event(n3) : n3);
}
function j$2(n3, u1, i1, t5, o4, r4, f3, e1, c1) {
    var s1, h1, v4, y1, p3, k3, b1, m1, g1, x1, A1, P1 = u1.type;
    if (void 0 !== u1.constructor) return null;
    null != i1.__h && (c1 = i1.__h, e1 = u1.__e = i1.__e, u1.__h = null, r4 = [
        e1
    ]), (s1 = l$1.__b) && s1(u1);
    try {
        n: if ("function" == typeof P1) {
            if (m1 = u1.props, g1 = (s1 = P1.contextType) && t5[s1.__c], x1 = s1 ? g1 ? g1.props.value : s1.__ : t5, i1.__c ? b1 = (h1 = u1.__c = i1.__c).__ = h1.__E : ("prototype" in P1 && P1.prototype.render ? u1.__c = h1 = new P1(m1, x1) : (u1.__c = h1 = new _$1(m1, x1), h1.constructor = P1, h1.render = O$1), g1 && g1.sub(h1), h1.props = m1, h1.state || (h1.state = {}), h1.context = x1, h1.__n = t5, v4 = h1.__d = !0, h1.__h = []), null == h1.__s && (h1.__s = h1.state), null != P1.getDerivedStateFromProps && (h1.__s == h1.state && (h1.__s = a$1({}, h1.__s)), a$1(h1.__s, P1.getDerivedStateFromProps(m1, h1.__s))), y1 = h1.props, p3 = h1.state, v4) null == P1.getDerivedStateFromProps && null != h1.componentWillMount && h1.componentWillMount(), null != h1.componentDidMount && h1.__h.push(h1.componentDidMount);
            else {
                if (null == P1.getDerivedStateFromProps && m1 !== y1 && null != h1.componentWillReceiveProps && h1.componentWillReceiveProps(m1, x1), !h1.__e && null != h1.shouldComponentUpdate && !1 === h1.shouldComponentUpdate(m1, h1.__s, x1) || u1.__v === i1.__v) {
                    h1.props = m1, h1.state = h1.__s, u1.__v !== i1.__v && (h1.__d = !1), h1.__v = u1, u1.__e = i1.__e, u1.__k = i1.__k, u1.__k.forEach(function(n3) {
                        n3 && (n3.__ = u1);
                    }), h1.__h.length && f3.push(h1);
                    break n;
                }
                null != h1.componentWillUpdate && h1.componentWillUpdate(m1, h1.__s, x1), null != h1.componentDidUpdate && h1.__h.push(function() {
                    h1.componentDidUpdate(y1, p3, k3);
                });
            }
            h1.context = x1, h1.props = m1, h1.state = h1.__s, (s1 = l$1.__r) && s1(u1), h1.__d = !1, h1.__v = u1, h1.__P = n3, s1 = h1.render(h1.props, h1.state, h1.context), h1.state = h1.__s, null != h1.getChildContext && (t5 = a$1(a$1({}, t5), h1.getChildContext())), v4 || null == h1.getSnapshotBeforeUpdate || (k3 = h1.getSnapshotBeforeUpdate(y1, p3)), A1 = null != s1 && s1.type === d$1 && null == s1.key ? s1.props.children : s1, w$2(n3, Array.isArray(A1) ? A1 : [
                A1
            ], u1, i1, t5, o4, r4, f3, e1, c1), h1.base = u1.__e, u1.__h = null, h1.__h.length && f3.push(h1), b1 && (h1.__E = h1.__ = null), h1.__e = !1;
        } else null == r4 && u1.__v === i1.__v ? (u1.__k = i1.__k, u1.__e = i1.__e) : u1.__e = L$1(i1.__e, u1, i1, t5, o4, r4, f3, c1);
        (s1 = l$1.diffed) && s1(u1);
    } catch (n3) {
        u1.__v = null, (c1 || null != r4) && (u1.__e = e1, u1.__h = !!c1, r4[r4.indexOf(e1)] = null), l$1.__e(n3, u1, i1);
    }
}
function z$1(n3, u1) {
    l$1.__c && l$1.__c(u1, n3), n3.some(function(u1) {
        try {
            n3 = u1.__h, u1.__h = [], n3.some(function(n3) {
                n3.call(u1);
            });
        } catch (n3) {
            l$1.__e(n3, u1.__v);
        }
    });
}
function L$1(l1, u1, i1, t5, o4, r4, f3, c1) {
    var s1, a1, v4, y1 = i1.props, p3 = u1.props, d1 = u1.type, _5 = 0;
    if ("svg" === d1 && (o4 = !0), null != r4) {
        for(; _5 < r4.length; _5++)if ((s1 = r4[_5]) && "setAttribute" in s1 == !!d1 && (d1 ? s1.localName === d1 : 3 === s1.nodeType)) {
            l1 = s1, r4[_5] = null;
            break;
        }
    }
    if (null == l1) {
        if (null === d1) return document.createTextNode(p3);
        l1 = o4 ? document.createElementNS("http://www.w3.org/2000/svg", d1) : document.createElement(d1, p3.is && p3), r4 = null, c1 = !1;
    }
    if (null === d1) y1 === p3 || c1 && l1.data === p3 || (l1.data = p3);
    else {
        if (r4 = r4 && n.call(l1.childNodes), a1 = (y1 = i1.props || e$1).dangerouslySetInnerHTML, v4 = p3.dangerouslySetInnerHTML, !c1) {
            if (null != r4) for(y1 = {}, _5 = 0; _5 < l1.attributes.length; _5++)y1[l1.attributes[_5].name] = l1.attributes[_5].value;
            (v4 || a1) && (v4 && (a1 && v4.__html == a1.__html || v4.__html === l1.innerHTML) || (l1.innerHTML = v4 && v4.__html || ""));
        }
        if (C$1(l1, p3, y1, o4, c1), v4) u1.__k = [];
        else if (_5 = u1.props.children, w$2(l1, Array.isArray(_5) ? _5 : [
            _5
        ], u1, i1, t5, o4 && "foreignObject" !== d1, r4, f3, r4 ? r4[0] : i1.__k && k$2(i1, 0), c1), null != r4) for(_5 = r4.length; _5--;)null != r4[_5] && h$1(r4[_5]);
        c1 || ("value" in p3 && void 0 !== (_5 = p3.value) && (_5 !== l1.value || "progress" === d1 && !_5 || "option" === d1 && _5 !== y1.value) && H$1(l1, "value", _5, y1.value, !1), "checked" in p3 && void 0 !== (_5 = p3.checked) && _5 !== l1.checked && H$1(l1, "checked", _5, y1.checked, !1));
    }
    return l1;
}
function M$1(n3, u1, i1) {
    try {
        "function" == typeof n3 ? n3(u1) : n3.current = u1;
    } catch (n3) {
        l$1.__e(n3, i1);
    }
}
function N$1(n3, u1, i1) {
    var t5, o4;
    if (l$1.unmount && l$1.unmount(n3), (t5 = n3.ref) && (t5.current && t5.current !== n3.__e || M$1(t5, null, u1)), null != (t5 = n3.__c)) {
        if (t5.componentWillUnmount) try {
            t5.componentWillUnmount();
        } catch (n3) {
            l$1.__e(n3, u1);
        }
        t5.base = t5.__P = null;
    }
    if (t5 = n3.__k) for(o4 = 0; o4 < t5.length; o4++)t5[o4] && N$1(t5[o4], u1, "function" != typeof n3.type);
    i1 || null == n3.__e || h$1(n3.__e), n3.__e = n3.__d = void 0;
}
function O$1(n3, l1, u1) {
    return this.constructor(n3, u1);
}
function S$1(u1, i1, t5) {
    var o4, r4, f3;
    l$1.__ && l$1.__(u1, i1), r4 = (o4 = "function" == typeof t5) ? null : t5 && t5.__k || i1.__k, f3 = [], j$2(i1, u1 = (!o4 && t5 || i1).__k = v$1(d$1, null, [
        u1
    ]), r4 || e$1, e$1, void 0 !== i1.ownerSVGElement, !o4 && t5 ? [
        t5
    ] : r4 ? null : i1.firstChild ? n.call(i1.childNodes) : null, f3, !o4 && t5 ? t5 : r4 ? r4.__e : i1.firstChild, o4), z$1(f3, u1);
}
function q$1(n3, l1) {
    S$1(n3, l1, q$1);
}
function B$1(l1, u1, i1) {
    var t5, o4, r4, f3 = a$1({}, l1.props);
    for(r4 in u1)"key" == r4 ? t5 = u1[r4] : "ref" == r4 ? o4 = u1[r4] : f3[r4] = u1[r4];
    return arguments.length > 2 && (f3.children = arguments.length > 3 ? n.call(arguments, 2) : i1), y$1(l1.type, f3, t5 || l1.key, o4 || l1.ref, null);
}
function D$1(n3, l1) {
    var u1 = {
        __c: l1 = "__cC" + f$1++,
        __: n3,
        Consumer: function(n3, l1) {
            return n3.children(l1);
        },
        Provider: function(n3) {
            var u1, i1;
            return this.getChildContext || (u1 = [], (i1 = {})[l1] = this, this.getChildContext = function() {
                return i1;
            }, this.shouldComponentUpdate = function(n3) {
                this.props.value !== n3.value && u1.some(m$1);
            }, this.sub = function(n3) {
                u1.push(n3);
                var l1 = n3.componentWillUnmount;
                n3.componentWillUnmount = function() {
                    u1.splice(u1.indexOf(n3), 1), l1 && l1.call(n3);
                };
            }), n3.children;
        }
    };
    return u1.Provider.__ = u1.Consumer.contextType = u1;
}
n = c$1.slice, l$1 = {
    __e: function(n3, l1, u1, i1) {
        for(var t5, o4, r4; l1 = l1.__;)if ((t5 = l1.__c) && !t5.__) try {
            if ((o4 = t5.constructor) && null != o4.getDerivedStateFromError && (t5.setState(o4.getDerivedStateFromError(n3)), r4 = t5.__d), null != t5.componentDidCatch && (t5.componentDidCatch(n3, i1 || {}), r4 = t5.__d), r4) return t5.__E = t5;
        } catch (l1) {
            n3 = l1;
        }
        throw n3;
    }
}, u$1 = 0, _$1.prototype.setState = function(n3, l1) {
    var u1;
    u1 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = a$1({}, this.state), "function" == typeof n3 && (n3 = n3(a$1({}, u1), this.props)), n3 && a$1(u1, n3), null != n3 && this.__v && (l1 && this.__h.push(l1), m$1(this));
}, _$1.prototype.forceUpdate = function(n3) {
    this.__v && (this.__e = !0, n3 && this.__h.push(n3), m$1(this));
}, _$1.prototype.render = d$1, t$1 = [], o$1 = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, g$2.__r = 0, f$1 = 0;
var t, u, r, o = 0, i = [], c = l$1.__b, f = l$1.__r, e = l$1.diffed, a = l$1.__c, v = l$1.unmount;
function l(t5, r4) {
    l$1.__h && l$1.__h(u, t5, o || r4), o = 0;
    var i1 = u.__H || (u.__H = {
        __: [],
        __h: []
    });
    return t5 >= i1.__.length && i1.__.push({}), i1.__[t5];
}
function m(n3) {
    return o = 1, p(w$1, n3);
}
function p(n3, r4, o4) {
    var i1 = l(t++, 2);
    return i1.t = n3, i1.__c || (i1.__ = [
        o4 ? o4(r4) : w$1(void 0, r4),
        function(n3) {
            var t5 = i1.t(i1.__[0], n3);
            i1.__[0] !== t5 && (i1.__ = [
                t5,
                i1.__[1]
            ], i1.__c.setState({}));
        }
    ], i1.__c = u), i1.__;
}
function y(r4, o4) {
    var i1 = l(t++, 3);
    !l$1.__s && k$1(i1.__H, o4) && (i1.__ = r4, i1.__H = o4, u.__H.__h.push(i1));
}
function d(r4, o4) {
    var i1 = l(t++, 4);
    !l$1.__s && k$1(i1.__H, o4) && (i1.__ = r4, i1.__H = o4, u.__h.push(i1));
}
function h(n3) {
    return o = 5, _(function() {
        return {
            current: n3
        };
    }, []);
}
function s(n3, t5, u1) {
    o = 6, d(function() {
        return "function" == typeof n3 ? (n3(t5()), function() {
            return n3(null);
        }) : n3 ? (n3.current = t5(), function() {
            return n3.current = null;
        }) : void 0;
    }, null == u1 ? u1 : u1.concat(n3));
}
function _(n3, u1) {
    var r4 = l(t++, 7);
    return k$1(r4.__H, u1) && (r4.__ = n3(), r4.__H = u1, r4.__h = n3), r4.__;
}
function A$1(n3, t5) {
    return o = 8, _(function() {
        return n3;
    }, t5);
}
function F$1(n3) {
    var r4 = u.context[n3.__c], o4 = l(t++, 9);
    return o4.c = n3, r4 ? (null == o4.__ && (o4.__ = !0, r4.sub(u)), r4.props.value) : n3.__;
}
function T$1(t5, u1) {
    l$1.useDebugValue && l$1.useDebugValue(u1 ? u1(t5) : t5);
}
function x$1() {
    for(var t5; t5 = i.shift();)if (t5.__P) try {
        t5.__H.__h.forEach(g$1), t5.__H.__h.forEach(j$1), t5.__H.__h = [];
    } catch (u1) {
        t5.__H.__h = [], l$1.__e(u1, t5.__v);
    }
}
l$1.__b = function(n3) {
    u = null, c && c(n3);
}, l$1.__r = function(n3) {
    f && f(n3), t = 0;
    var r4 = (u = n3.__c).__H;
    r4 && (r4.__h.forEach(g$1), r4.__h.forEach(j$1), r4.__h = []);
}, l$1.diffed = function(t5) {
    e && e(t5);
    var o4 = t5.__c;
    o4 && o4.__H && o4.__H.__h.length && (1 !== i.push(o4) && r === l$1.requestAnimationFrame || ((r = l$1.requestAnimationFrame) || function(n3) {
        var t5, u1 = function() {
            clearTimeout(r4), b && cancelAnimationFrame(t5), setTimeout(n3);
        }, r4 = setTimeout(u1, 100);
        b && (t5 = requestAnimationFrame(u1));
    })(x$1)), u = null;
}, l$1.__c = function(t5, u1) {
    u1.some(function(t5) {
        try {
            t5.__h.forEach(g$1), t5.__h = t5.__h.filter(function(n3) {
                return !n3.__ || j$1(n3);
            });
        } catch (r4) {
            u1.some(function(n3) {
                n3.__h && (n3.__h = []);
            }), u1 = [], l$1.__e(r4, t5.__v);
        }
    }), a && a(t5, u1);
}, l$1.unmount = function(t5) {
    v && v(t5);
    var u1, r4 = t5.__c;
    r4 && r4.__H && (r4.__H.__.forEach(function(n3) {
        try {
            g$1(n3);
        } catch (n3) {
            u1 = n3;
        }
    }), u1 && l$1.__e(u1, r4.__v));
};
var b = "function" == typeof requestAnimationFrame;
function g$1(n3) {
    var t5 = u, r4 = n3.__c;
    "function" == typeof r4 && (n3.__c = void 0, r4()), u = t5;
}
function j$1(n3) {
    var t5 = u;
    n3.__c = n3.__(), u = t5;
}
function k$1(n3, t5) {
    return !n3 || n3.length !== t5.length || t5.some(function(t5, u1) {
        return t5 !== n3[u1];
    });
}
function w$1(n3, t5) {
    return "function" == typeof t5 ? t5(n3) : t5;
}
function C(n3, t5) {
    for(var e1 in t5)n3[e1] = t5[e1];
    return n3;
}
function S(n3, t5) {
    for(var e1 in n3)if ("__source" !== e1 && !(e1 in t5)) return !0;
    for(var r4 in t5)if ("__source" !== r4 && n3[r4] !== t5[r4]) return !0;
    return !1;
}
function E(n3) {
    this.props = n3;
}
function g(n3, t5) {
    function e1(n3) {
        var e1 = this.props.ref, r4 = e1 == n3.ref;
        return !r4 && e1 && (e1.call ? e1(null) : e1.current = null), t5 ? !t5(this.props, n3) || !r4 : S(this.props, n3);
    }
    function r4(t5) {
        return this.shouldComponentUpdate = e1, v$1(n3, t5);
    }
    return r4.displayName = "Memo(" + (n3.displayName || n3.name) + ")", r4.prototype.isReactComponent = !0, r4.__f = !0, r4;
}
(E.prototype = new _$1).isPureReactComponent = !0, E.prototype.shouldComponentUpdate = function(n3, t5) {
    return S(this.props, n3) || S(this.state, t5);
};
var w = l$1.__b;
l$1.__b = function(n3) {
    n3.type && n3.type.__f && n3.ref && (n3.props.ref = n3.ref, n3.ref = null), w && w(n3);
};
var R = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.forward_ref") || 3911;
function x(n3) {
    function t5(t5) {
        var e1 = C({}, t5);
        return delete e1.ref, n3(e1, t5.ref || null);
    }
    return t5.$$typeof = R, t5.render = t5, t5.prototype.isReactComponent = t5.__f = !0, t5.displayName = "ForwardRef(" + (n3.displayName || n3.name) + ")", t5;
}
var N = function(n3, t5) {
    return null == n3 ? null : A$2(A$2(n3).map(t5));
}, k = {
    map: N,
    forEach: N,
    count: function(n3) {
        return n3 ? A$2(n3).length : 0;
    },
    only: function(n3) {
        var t5 = A$2(n3);
        if (1 !== t5.length) throw "Children.only";
        return t5[0];
    },
    toArray: A$2
}, A = l$1.__e;
l$1.__e = function(n3, t5, e1, r4) {
    if (n3.then) {
        for(var u1, o4 = t5; o4 = o4.__;)if ((u1 = o4.__c) && u1.__c) return null == t5.__e && (t5.__e = e1.__e, t5.__k = e1.__k), u1.__c(n3, t5);
    }
    A(n3, t5, e1, r4);
};
var O = l$1.unmount;
function L() {
    this.__u = 0, this.t = null, this.__b = null;
}
function U(n3) {
    var t5 = n3.__.__c;
    return t5 && t5.__e && t5.__e(n3);
}
function F(n3) {
    var t5, e1, r4;
    function u1(u1) {
        if (t5 || (t5 = n3()).then(function(n3) {
            e1 = n3.default || n3;
        }, function(n3) {
            r4 = n3;
        }), r4) throw r4;
        if (!e1) throw t5;
        return v$1(e1, u1);
    }
    return u1.displayName = "Lazy", u1.__f = !0, u1;
}
function M() {
    this.u = null, this.o = null;
}
l$1.unmount = function(n3) {
    var t5 = n3.__c;
    t5 && t5.__R && t5.__R(), t5 && !0 === n3.__h && (n3.type = null), O && O(n3);
}, (L.prototype = new _$1).__c = function(n3, t5) {
    var e1 = t5.__c, r4 = this;
    null == r4.t && (r4.t = []), r4.t.push(e1);
    var u1 = U(r4.__v), o4 = !1, i1 = function() {
        o4 || (o4 = !0, e1.__R = null, u1 ? u1(l1) : l1());
    };
    e1.__R = i1;
    var l1 = function() {
        if (!--r4.__u) {
            if (r4.state.__e) {
                var n3 = r4.state.__e;
                r4.__v.__k[0] = function n3(t5, e1, r4) {
                    return t5 && (t5.__v = null, t5.__k = t5.__k && t5.__k.map(function(t5) {
                        return n3(t5, e1, r4);
                    }), t5.__c && t5.__c.__P === e1 && (t5.__e && r4.insertBefore(t5.__e, t5.__d), t5.__c.__e = !0, t5.__c.__P = r4)), t5;
                }(n3, n3.__c.__P, n3.__c.__O);
            }
            var t5;
            for(r4.setState({
                __e: r4.__b = null
            }); t5 = r4.t.pop();)t5.forceUpdate();
        }
    }, f3 = !0 === t5.__h;
    r4.__u++ || f3 || r4.setState({
        __e: r4.__b = r4.__v.__k[0]
    }), n3.then(i1, i1);
}, L.prototype.componentWillUnmount = function() {
    this.t = [];
}, L.prototype.render = function(n3, t5) {
    if (this.__b) {
        if (this.__v.__k) {
            var e1 = document.createElement("div"), r4 = this.__v.__k[0].__c;
            this.__v.__k[0] = function n3(t5, e1, r4) {
                return t5 && (t5.__c && t5.__c.__H && (t5.__c.__H.__.forEach(function(n3) {
                    "function" == typeof n3.__c && n3.__c();
                }), t5.__c.__H = null), null != (t5 = C({}, t5)).__c && (t5.__c.__P === r4 && (t5.__c.__P = e1), t5.__c = null), t5.__k = t5.__k && t5.__k.map(function(t5) {
                    return n3(t5, e1, r4);
                })), t5;
            }(this.__b, e1, r4.__O = r4.__P);
        }
        this.__b = null;
    }
    var u1 = t5.__e && v$1(d$1, null, n3.fallback);
    return u1 && (u1.__h = null), [
        v$1(d$1, null, t5.__e ? null : n3.children),
        u1
    ];
};
var T = function(n3, t5, e1) {
    if (++e1[1] === e1[0] && n3.o.delete(t5), n3.props.revealOrder && ("t" !== n3.props.revealOrder[0] || !n3.o.size)) for(e1 = n3.u; e1;){
        for(; e1.length > 3;)e1.pop()();
        if (e1[1] < e1[0]) break;
        n3.u = e1 = e1[2];
    }
};
function D(n3) {
    return this.getChildContext = function() {
        return n3.context;
    }, n3.children;
}
function I(n3) {
    var t5 = this, e1 = n3.i;
    t5.componentWillUnmount = function() {
        S$1(null, t5.l), t5.l = null, t5.i = null;
    }, t5.i && t5.i !== e1 && t5.componentWillUnmount(), n3.__v ? (t5.l || (t5.i = e1, t5.l = {
        nodeType: 1,
        parentNode: e1,
        childNodes: [],
        appendChild: function(n3) {
            this.childNodes.push(n3), t5.i.appendChild(n3);
        },
        insertBefore: function(n3, e1) {
            this.childNodes.push(n3), t5.i.appendChild(n3);
        },
        removeChild: function(n3) {
            this.childNodes.splice(this.childNodes.indexOf(n3) >>> 1, 1), t5.i.removeChild(n3);
        }
    }), S$1(v$1(D, {
        context: t5.context
    }, n3.__v), t5.l)) : t5.l && t5.componentWillUnmount();
}
function W(n3, t5) {
    var e1 = v$1(I, {
        __v: n3,
        i: t5
    });
    return e1.containerInfo = t5, e1;
}
(M.prototype = new _$1).__e = function(n3) {
    var t5 = this, e1 = U(t5.__v), r4 = t5.o.get(n3);
    return r4[0]++, function(u1) {
        var o4 = function() {
            t5.props.revealOrder ? (r4.push(u1), T(t5, n3, r4)) : u1();
        };
        e1 ? e1(o4) : o4();
    };
}, M.prototype.render = function(n3) {
    this.u = null, this.o = new Map;
    var t5 = A$2(n3.children);
    n3.revealOrder && "b" === n3.revealOrder[0] && t5.reverse();
    for(var e1 = t5.length; e1--;)this.o.set(t5[e1], this.u = [
        1,
        0,
        this.u
    ]);
    return n3.children;
}, M.prototype.componentDidUpdate = M.prototype.componentDidMount = function() {
    var n3 = this;
    this.o.forEach(function(t5, e1) {
        T(n3, e1, t5);
    });
};
var P = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103, V = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/, j = "undefined" != typeof document, z = function(n3) {
    return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/i : /fil|che|ra/i).test(n3);
};
function B(n3, t5, e1) {
    return null == t5.__k && (t5.textContent = ""), S$1(n3, t5), "function" == typeof e1 && e1(), n3 ? n3.__c : null;
}
function $(n3, t5, e1) {
    return q$1(n3, t5), "function" == typeof e1 && e1(), n3 ? n3.__c : null;
}
_$1.prototype.isReactComponent = {}, [
    "componentWillMount",
    "componentWillReceiveProps",
    "componentWillUpdate"
].forEach(function(n3) {
    Object.defineProperty(_$1.prototype, n3, {
        configurable: !0,
        get: function() {
            return this["UNSAFE_" + n3];
        },
        set: function(t5) {
            Object.defineProperty(this, n3, {
                configurable: !0,
                writable: !0,
                value: t5
            });
        }
    });
});
var H = l$1.event;
function Z() {}
function Y() {
    return this.cancelBubble;
}
function q() {
    return this.defaultPrevented;
}
l$1.event = function(n3) {
    return H && (n3 = H(n3)), n3.persist = Z, n3.isPropagationStopped = Y, n3.isDefaultPrevented = q, n3.nativeEvent = n3;
};
var G, J = {
    configurable: !0,
    get: function() {
        return this.class;
    }
}, K = l$1.vnode;
l$1.vnode = function(n3) {
    var t5 = n3.type, e1 = n3.props, r4 = e1;
    if ("string" == typeof t5) {
        var u1 = -1 === t5.indexOf("-");
        for(var o4 in r4 = {}, e1){
            var i1 = e1[o4];
            j && "children" === o4 && "noscript" === t5 || "value" === o4 && "defaultValue" in e1 && null == i1 || ("defaultValue" === o4 && "value" in e1 && null == e1.value ? o4 = "value" : "download" === o4 && !0 === i1 ? i1 = "" : /ondoubleclick/i.test(o4) ? o4 = "ondblclick" : /^onchange(textarea|input)/i.test(o4 + t5) && !z(e1.type) ? o4 = "oninput" : /^onfocus$/i.test(o4) ? o4 = "onfocusin" : /^onblur$/i.test(o4) ? o4 = "onfocusout" : /^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(o4) ? o4 = o4.toLowerCase() : u1 && V.test(o4) ? o4 = o4.replace(/[A-Z0-9]/, "-$&").toLowerCase() : null === i1 && (i1 = void 0), r4[o4] = i1);
        }
        "select" == t5 && r4.multiple && Array.isArray(r4.value) && (r4.value = A$2(e1.children).forEach(function(n3) {
            n3.props.selected = -1 != r4.value.indexOf(n3.props.value);
        })), "select" == t5 && null != r4.defaultValue && (r4.value = A$2(e1.children).forEach(function(n3) {
            n3.props.selected = r4.multiple ? -1 != r4.defaultValue.indexOf(n3.props.value) : r4.defaultValue == n3.props.value;
        })), n3.props = r4, e1.class != e1.className && (J.enumerable = "className" in e1, null != e1.className && (r4.class = e1.className), Object.defineProperty(r4, "className", J));
    }
    n3.$$typeof = P, K && K(n3);
};
var Q = l$1.__r;
l$1.__r = function(n3) {
    Q && Q(n3), G = n3.__c;
};
var X = {
    ReactCurrentDispatcher: {
        current: {
            readContext: function(n3) {
                return G.__n[n3.__c].props.value;
            }
        }
    }
};
function tn(n3) {
    return v$1.bind(null, n3);
}
function en(n3) {
    return !!n3 && n3.$$typeof === P;
}
function rn(n3) {
    return en(n3) ? B$1.apply(null, arguments) : n3;
}
function un(n3) {
    return !!n3.__k && (S$1(null, n3), !0);
}
function on(n3) {
    return n3 && (n3.base || 1 === n3.nodeType && n3) || null;
}
var ln = function(n3, t5) {
    return n3(t5);
}, fn = function(n3, t5) {
    return n3(t5);
};
var React = {
    useState: m,
    useReducer: p,
    useEffect: y,
    useLayoutEffect: d,
    useRef: h,
    useImperativeHandle: s,
    useMemo: _,
    useCallback: A$1,
    useContext: F$1,
    useDebugValue: T$1,
    version: "17.0.2",
    Children: k,
    render: B,
    hydrate: $,
    unmountComponentAtNode: un,
    createPortal: W,
    createElement: v$1,
    createContext: D$1,
    createFactory: tn,
    cloneElement: rn,
    createRef: p$1,
    Fragment: d$1,
    isValidElement: en,
    findDOMNode: on,
    Component: _$1,
    PureComponent: E,
    memo: g,
    forwardRef: x,
    flushSync: fn,
    unstable_batchedUpdates: ln,
    StrictMode: d$1,
    Suspense: L,
    SuspenseList: M,
    lazy: F,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: X
};
const IMAGE_EXTENSIONS = Object.freeze(new Set([
    ".tif",
    ".tiff",
    ".gif",
    ".png",
    ".apng",
    ".avif",
    ".jpg",
    ".jpeg",
    ".jfif",
    ".pjepg",
    ".pjp",
    ".svg",
    ".webp",
    ".bmp",
    ".ico",
    ".cur"
]));
/** Determines if the given link points to an embedded image. */ function isImageEmbed(link3) {
    if (!link3.path.contains(".")) return false;
    let extension1 = link3.path.substring(link3.path.lastIndexOf("."));
    return link3.type == "file" && link3.embed && IMAGE_EXTENSIONS.has(extension1);
}
/** Extract text of the form 'WxH' or 'W' from the display of a link. */ function extractImageDimensions(link3) {
    if (!link3.display) return undefined;
    let match1 = /^(\d+)x(\d+)$/iu.exec(link3.display);
    if (match1) return [
        parseInt(match1[1]),
        parseInt(match1[2])
    ];
    let match21 = /^(\d+)/.exec(link3.display);
    if (match21) return [
        parseInt(match21[1])
    ];
    // No match.
    return undefined;
}
/** Provides core preact / rendering utilities for all view types. */ const DataviewContext = D$1(undefined);
/** Hacky preact component which wraps Obsidian's markdown renderer into a neat component. */ function RawMarkdown({ content: content1, sourcePath: sourcePath1, inline: inline1 = true, style: style1, cls: cls1, onClick: onClick1 }) {
    const container1 = h(null);
    const component1 = F$1(DataviewContext).component;
    y(()=>{
        if (!container1.current) return;
        container1.current.innerHTML = "";
        obsidian.MarkdownRenderer.renderMarkdown(content1, container1.current, sourcePath1, component1).then(()=>{
            if (!container1.current || !inline1) return;
            // Unwrap any created paragraph elements if we are inline.
            let paragraph1 = container1.current.querySelector("p");
            while(paragraph1){
                let children1 = paragraph1.childNodes;
                paragraph1.replaceWith(...Array.from(children1));
                paragraph1 = container1.current.querySelector("p");
            }
        });
    }, [
        content1,
        sourcePath1,
        container1.current
    ]);
    return v$1("span", {
        ref: container1,
        style: style1,
        class: cls1,
        onClick: onClick1
    });
}
/** Hacky preact component which wraps Obsidian's markdown renderer into a neat component. */ const Markdown = React.memo(RawMarkdown);
/** Embeds an HTML element in the react DOM. */ function RawEmbedHtml({ element: element1 }) {
    const container1 = h(null);
    y(()=>{
        if (!container1.current) return;
        container1.current.innerHTML = "";
        container1.current.appendChild(element1);
    }, [
        container1.current,
        element1
    ]);
    return v$1("span", {
        ref: container1
    });
}
/** Embeds an HTML element in the react DOM. */ const EmbedHtml = React.memo(RawEmbedHtml);
/** Intelligently render an arbitrary literal value. */ function RawLit({ value: value1, sourcePath: sourcePath1, inline: inline1 = false, depth: depth1 = 0 }) {
    var _a1, _b1, _c1;
    const context1 = F$1(DataviewContext);
    // Short-circuit if beyond the maximum render depth.
    if (depth1 >= context1.settings.maxRecursiveRenderDepth) return v$1(d$1, null, "...");
    if (Values.isNull(value1) || value1 === undefined) {
        return v$1(Markdown, {
            content: context1.settings.renderNullAs,
            sourcePath: sourcePath1
        });
    } else if (Values.isString(value1)) {
        return v$1(Markdown, {
            content: value1,
            sourcePath: sourcePath1
        });
    } else if (Values.isNumber(value1)) {
        return v$1(d$1, null, "" + value1);
    } else if (Values.isBoolean(value1)) {
        return v$1(d$1, null, "" + value1);
    } else if (Values.isDate(value1)) {
        return v$1(d$1, null, renderMinimalDate(value1, context1.settings, currentLocale()));
    } else if (Values.isDuration(value1)) {
        return v$1(d$1, null, renderMinimalDuration(value1));
    } else if (Values.isLink(value1)) {
        // Special case handling of image/video/etc embeddings to bypass the Obsidian API not working.
        if (isImageEmbed(value1)) {
            let realFile1 = context1.app.metadataCache.getFirstLinkpathDest(value1.path, sourcePath1);
            if (!realFile1) return v$1(Markdown, {
                content: value1.markdown(),
                sourcePath: sourcePath1
            });
            let dimensions1 = extractImageDimensions(value1);
            let resourcePath1 = context1.app.vault.getResourcePath(realFile1);
            if (dimensions1 && dimensions1.length == 2) return v$1("img", {
                alt: value1.path,
                src: resourcePath1,
                width: dimensions1[0],
                height: dimensions1[1]
            });
            else if (dimensions1 && dimensions1.length == 1) return v$1("img", {
                alt: value1.path,
                src: resourcePath1,
                width: dimensions1[0]
            });
            else return v$1("img", {
                alt: value1.path,
                src: resourcePath1
            });
        }
        return v$1(Markdown, {
            content: value1.markdown(),
            sourcePath: sourcePath1
        });
    } else if (Values.isHtml(value1)) {
        return v$1(EmbedHtml, {
            element: value1
        });
    } else if (Values.isWidget(value1)) {
        if (Widgets.isListPair(value1)) {
            return v$1(d$1, null, v$1(Lit, {
                value: value1.key,
                sourcePath: sourcePath1
            }), ":", " ", v$1(Lit, {
                value: value1.value,
                sourcePath: sourcePath1
            }));
        } else if (Widgets.isExternalLink(value1)) {
            return v$1("a", {
                href: value1.url,
                rel: "noopener",
                target: "_blank",
                class: "external-link"
            }, (_a1 = value1.display) !== null && _a1 !== void 0 ? _a1 : value1.url);
        } else {
            return v$1("b", null, "<unknown widget '", value1.$widget, "'>");
        }
    } else if (Values.isFunction(value1)) {
        return v$1(d$1, null, "<function>");
    } else if (Values.isArray(value1) || DataArray.isDataArray(value1)) {
        if (!inline1) {
            return v$1("ul", {
                class: "dataview dataview-ul dataview-result-list-ul"
            }, value1.map((subvalue1)=>v$1("li", {
                    class: "dataview-result-list-li"
                }, v$1(Lit, {
                    value: subvalue1,
                    sourcePath: sourcePath1,
                    inline: inline1,
                    depth: depth1 + 1
                }))));
        } else {
            if (value1.length == 0) return v$1(d$1, null, "<Empty List>");
            return v$1("span", {
                class: "dataview dataview-result-list-span"
            }, value1.map((subvalue1, index1)=>v$1(d$1, null, index1 == 0 ? "" : ", ", v$1(Lit, {
                    value: subvalue1,
                    sourcePath: sourcePath1,
                    inline: inline1,
                    depth: depth1 + 1
                }))));
        }
    } else if (Values.isObject(value1)) {
        // Don't render classes in case they have recursive references; spoopy.
        if (((_b1 = value1 === null || value1 === void 0 ? void 0 : value1.constructor) === null || _b1 === void 0 ? void 0 : _b1.name) && ((_c1 = value1 === null || value1 === void 0 ? void 0 : value1.constructor) === null || _c1 === void 0 ? void 0 : _c1.name) != "Object") {
            return v$1(d$1, null, "<", value1.constructor.name, ">");
        }
        if (!inline1) {
            return v$1("ul", {
                class: "dataview dataview-ul dataview-result-object-ul"
            }, Object.entries(value1).map(([key1, value1])=>v$1("li", {
                    class: "dataview dataview-li dataview-result-object-li"
                }, key1, ": ", v$1(Lit, {
                    value: value1,
                    sourcePath: sourcePath1,
                    inline: inline1,
                    depth: depth1 + 1
                }))));
        } else {
            if (Object.keys(value1).length == 0) return v$1(d$1, null, "<Empty Object>");
            return v$1("span", {
                class: "dataview dataview-result-object-span"
            }, Object.entries(value1).map(([key1, value1], index1)=>v$1(d$1, null, index1 == 0 ? "" : ", ", key1, ": ", v$1(Lit, {
                    value: value1,
                    sourcePath: sourcePath1,
                    inline: inline1,
                    depth: depth1 + 1
                }))));
        }
    }
    return v$1(d$1, null, "<Unrecognized: ", JSON.stringify(value1), ">");
}
/** Intelligently render an arbitrary literal value. */ const Lit = React.memo(RawLit);
/** Render a simple nice looking error box in a code style. */ function ErrorPre(props1, {}) {
    return v$1("pre", {
        class: "dataview dataview-error"
    }, props1.children);
}
/** Render a pretty centered error message in a box. */ function ErrorMessage({ message: message1 }) {
    return v$1("div", {
        class: "dataview dataview-error-box"
    }, v$1("p", {
        class: "dataview dataview-error-message"
    }, message1));
}
/**
 * Complex convienence hook which calls `compute` every time the index updates, updating the current state.
 */ function useIndexBackedState(container1, app1, settings1, index1, initial1, compute1) {
    let [initialized1, setInitialized1] = m(false);
    let [state1, updateState1] = m(initial1);
    let [lastReload1, setLastReload1] = m(index1.revision);
    // Initial setup to queue fetching the correct state.
    if (!initialized1) {
        setLastReload1(index1.revision);
        setInitialized1(true);
        compute1().then(updateState1);
    }
    // Updated on every container re-create; automatically updates state.
    y(()=>{
        const refreshOperation1 = ()=>{
            if (lastReload1 != index1.revision && container1.isShown() && settings1.refreshEnabled) {
                compute1().then(updateState1);
                setLastReload1(index1.revision);
            }
        };
        // Refresh after index changes stop.
        let workEvent1 = app1.workspace.on("dataview:refresh-views", refreshOperation1);
        // ...or when the DOM is shown (sidebar expands, tab selected, nodes scrolled into view).
        let nodeEvent1 = container1.onNodeInserted(refreshOperation1);
        return ()=>{
            app1.workspace.offref(workEvent1);
            nodeEvent1();
        };
    }, [
        container1,
        lastReload1
    ]);
    return state1;
}
/** A trivial wrapper which allows a react component to live for the duration of a `MarkdownRenderChild`. */ class ReactRenderer extends obsidian.MarkdownRenderChild {
    constructor(init1, element1){
        super(init1.container);
        this.init = init1;
        this.element = element1;
    }
    onload() {
        const context1 = Object.assign({}, {
            component: this
        }, this.init);
        S$1(v$1(DataviewContext.Provider, {
            value: context1
        }, this.element), this.containerEl);
    }
    onunload() {
        un(this.containerEl);
    }
}
/** Function used to test if a given event correspond to a pressed link */ function wasLinkPressed(evt1) {
    return evt1.target != null && evt1.target != undefined && evt1.target.tagName == "A";
}
/** JSX component which renders a task element recursively. */ function TaskItem({ item: item1 }) {
    var _a1;
    let context1 = F$1(DataviewContext);
    // Navigate to the given task on click.
    const onClicked1 = (evt1)=>{
        if (wasLinkPressed(evt1)) {
            return;
        }
        evt1.stopPropagation();
        const selectionState1 = {
            eState: {
                cursor: {
                    from: {
                        line: item1.line,
                        ch: item1.position.start.col
                    },
                    to: {
                        line: item1.line + item1.lineCount - 1,
                        ch: item1.position.end.col
                    }
                },
                line: item1.line
            }
        };
        // MacOS interprets the Command key as Meta.
        context1.app.workspace.openLinkText(item1.link.toFile().obsidianLink(), item1.path, evt1.ctrlKey || evt1.metaKey && obsidian.Platform.isMacOS, selectionState1);
    };
    // Check/uncheck the task in the original file.
    const onChecked1 = (evt1)=>{
        evt1.stopPropagation();
        const completed1 = evt1.currentTarget.checked;
        const status1 = completed1 ? "x" : " ";
        // Update data-task on the parent element (css style)
        const parent1 = evt1.currentTarget.parentElement;
        parent1 === null || parent1 === void 0 ? void 0 : parent1.setAttribute("data-task", status1);
        let flatted1 = [
            item1
        ];
        if (context1.settings.recursiveSubTaskCompletion) {
            function flatter1(iitem1) {
                flatted1.push(iitem1);
                iitem1.children.forEach(flatter1);
            }
            item1.children.forEach(flatter1);
            flatted1 = flatted1.flat(Infinity);
        }
        async function effectFn1() {
            for(let i1 = 0; i1 < flatted1.length; i1++){
                const _item1 = flatted1[i1];
                let updatedText1 = _item1.text;
                if (context1.settings.taskCompletionTracking) {
                    updatedText1 = setTaskCompletion(_item1.text, context1.settings.taskCompletionUseEmojiShorthand, context1.settings.taskCompletionText, context1.settings.taskCompletionDateFormat, completed1);
                }
                await rewriteTask(context1.app.vault, _item1, status1, updatedText1);
            }
            context1.app.workspace.trigger("dataview:refresh-views");
        }
        effectFn1();
    };
    const checked1 = item1.status !== " ";
    return v$1("li", {
        class: "dataview task-list-item" + (checked1 ? " is-checked" : ""),
        onClick: onClicked1,
        "data-task": item1.status
    }, v$1("input", {
        class: "dataview task-list-item-checkbox",
        type: "checkbox",
        checked: checked1,
        onClick: onChecked1
    }), v$1(Markdown, {
        inline: true,
        content: (_a1 = item1.visual) !== null && _a1 !== void 0 ? _a1 : item1.text,
        sourcePath: item1.path
    }), item1.children.length > 0 && v$1(TaskList, {
        items: item1.children
    }));
}
/** JSX component which renders a plain list item recursively. */ function ListItem({ item: item1 }) {
    var _a1;
    let context1 = F$1(DataviewContext);
    // Navigate to the given task on click.
    const onClicked1 = (evt1)=>{
        if (wasLinkPressed(evt1)) {
            return;
        }
        evt1.stopPropagation();
        const selectionState1 = {
            eState: {
                cursor: {
                    from: {
                        line: item1.line,
                        ch: item1.position.start.col
                    },
                    to: {
                        line: item1.line + item1.lineCount - 1,
                        ch: item1.position.end.col
                    }
                },
                line: item1.line
            }
        };
        // MacOS interprets the Command key as Meta.
        context1.app.workspace.openLinkText(item1.link.toFile().obsidianLink(), item1.path, evt1.ctrlKey || evt1.metaKey && obsidian.Platform.isMacOS, selectionState1);
    };
    return v$1("li", {
        class: "dataview task-list-basic-item",
        onClick: onClicked1
    }, v$1(Markdown, {
        inline: true,
        content: (_a1 = item1.visual) !== null && _a1 !== void 0 ? _a1 : item1.text,
        sourcePath: item1.path
    }), item1.children.length > 0 && v$1(TaskList, {
        items: item1.children
    }));
}
/** JSX component which renders a list of task items recursively. */ function TaskList({ items: items1 }) {
    const settings1 = F$1(DataviewContext).settings;
    if (items1.length == 0 && settings1.warnOnEmptyResult) return v$1(ErrorMessage, {
        message: "Dataview: No results to show for task query."
    });
    let [nest1, _mask1] = nestItems(items1);
    return v$1("ul", {
        class: "contains-task-list"
    }, nest1.map((item1)=>item1.task ? v$1(TaskItem, {
            key: listId(item1),
            item: item1
        }) : v$1(ListItem, {
            key: listId(item1),
            item: item1
        })));
}
/** JSX component which returns the result count. */ function ResultCount$1(props1) {
    const { settings: settings1 } = F$1(DataviewContext);
    return settings1.showResultCount ? v$1("span", {
        class: "dataview small-text"
    }, Groupings.count(props1.item.rows)) : v$1(d$1, null);
}
/** JSX component which recursively renders grouped tasks. */ function TaskGrouping({ items: items1, sourcePath: sourcePath1 }) {
    const isGrouping1 = items1.length > 0 && Groupings.isGrouping(items1);
    return v$1(d$1, null, isGrouping1 && items1.map((item1)=>v$1(d$1, {
            key: item1.key
        }, v$1("h4", null, v$1(Lit, {
            value: item1.key,
            sourcePath: sourcePath1
        }), v$1(ResultCount$1, {
            item: item1
        })), v$1("div", {
            class: "dataview result-group"
        }, v$1(TaskGrouping, {
            items: item1.rows,
            sourcePath: sourcePath1
        })))), !isGrouping1 && v$1(TaskList, {
        items: items1
    }));
}
/**
 * Pure view over (potentially grouped) tasks and list items which allows for checking/unchecking tasks and manipulating
 * the task view.
 */ function TaskView({ query: query1, sourcePath: sourcePath1 }) {
    let context1 = F$1(DataviewContext);
    let items1 = useIndexBackedState(context1.container, context1.app, context1.settings, context1.index, {
        state: "loading"
    }, async ()=>{
        let result1 = await asyncTryOrPropogate(()=>executeTask(query1, sourcePath1, context1.index, context1.settings));
        if (!result1.successful) return {
            state: "error",
            error: result1.error,
            sourcePath: sourcePath1
        };
        else return {
            state: "ready",
            items: result1.value.tasks
        };
    });
    if (items1.state == "loading") return v$1(d$1, null, v$1(ErrorPre, null, "Loading"));
    else if (items1.state == "error") return v$1(d$1, null, v$1(ErrorPre, null, "Dataview: ", items1.error));
    return v$1("div", {
        class: "dataview dataview-container"
    }, v$1(TaskGrouping, {
        items: items1.items,
        sourcePath: sourcePath1
    }));
}
function createTaskView(init1, query1, sourcePath1) {
    return new ReactRenderer(init1, v$1(TaskView, {
        query: query1,
        sourcePath: sourcePath1
    }));
}
function createFixedTaskView(init1, items1, sourcePath1) {
    return new ReactRenderer(init1, v$1(TaskGrouping, {
        items: items1,
        sourcePath: sourcePath1
    }));
}
/////////////////////////
// Task De-Duplication //
/////////////////////////
function listId(item1) {
    return item1.path + ":" + item1.line;
}
function parentListId(item1) {
    return item1.path + ":" + item1.parent;
}
/** Compute a map of all task IDs -> tasks. */ function enumerateChildren(item1, output1) {
    if (!output1.has(listId(item1))) output1.set(listId(item1), item1);
    for (let child1 of item1.children)enumerateChildren(child1, output1);
    return output1;
}
/** Replace basic tasks with tasks from a lookup map. Retains the original order of the list. */ function replaceChildren(elements1, lookup1) {
    return elements1.map((element1)=>{
        element1.children = replaceChildren(element1.children, lookup1);
        const id1 = listId(element1);
        const map1 = lookup1.get(id1);
        if (map1) return map1;
        else return element1;
    });
}
/**
 * Removes tasks from a list if they are already present by being a child of another task. Fixes child pointers.
 * Retains original order of input list.
 */ function nestItems(raw1) {
    let elements1 = new Map();
    let mask1 = new Set();
    for (let elem3 of raw1){
        let id1 = listId(elem3);
        elements1.set(id1, elem3);
        mask1.add(id1);
    }
    // List all elements & their children in the lookup map.
    for (let elem3 of raw1)enumerateChildren(elem3, elements1);
    let roots1 = raw1.filter((elem3)=>elem3.parent == undefined || elem3.parent == null || !elements1.has(parentListId(elem3)));
    return [
        replaceChildren(roots1, elements1),
        mask1
    ];
}
/**
 * Recursively removes tasks from each subgroup if they are already present by being a child of another task.
 * Fixes child pointers. Retains original order of input list.
 */ function nestGroups(raw1) {
    if (Groupings.isGrouping(raw1)) {
        return raw1.map((g1)=>{
            return {
                key: g1.key,
                rows: nestGroups(g1.rows)
            };
        });
    } else {
        return nestItems(raw1)[0];
    }
}
///////////////////////
// Task Manipulation //
///////////////////////
/** Trim empty ending lines. */ function trimEndingLines(text1) {
    let parts1 = text1.split(/\r?\n/u);
    let trim1 = parts1.length - 1;
    while(trim1 > 0 && parts1[trim1].trim() == "")trim1--;
    return parts1.join("\n");
}
/** Set the task completion key on check. */ function setTaskCompletion(originalText1, useEmojiShorthand1, completionKey1, completionDateFormat1, complete1) {
    const blockIdRegex1 = /\^[a-z0-9\-]+/i;
    if (!complete1 && !useEmojiShorthand1) return trimEndingLines(setInlineField(originalText1.trimEnd(), completionKey1)).trimEnd();
    let parts1 = originalText1.split(/\r?\n/u);
    const matches1 = blockIdRegex1.exec(parts1[parts1.length - 1]);
    console.debug("matchreg", matches1);
    let processedPart1 = parts1[parts1.length - 1].split(blockIdRegex1).join(""); // last part without block id
    if (useEmojiShorthand1) {
        processedPart1 = setEmojiShorthandCompletionField(processedPart1, complete1 ? DateTime.now().toFormat("yyyy-MM-dd") : "");
    } else {
        processedPart1 = setInlineField(processedPart1, completionKey1, DateTime.now().toFormat(completionDateFormat1));
    }
    processedPart1 = `${processedPart1.trimEnd()}${(matches1 === null || matches1 === void 0 ? void 0 : matches1.length) ? " " + matches1[0].trim() : ""}`.trimEnd(); // add back block id
    parts1[parts1.length - 1] = processedPart1;
    return parts1.join("\n");
}
/** Rewrite a task with the given completion status and new text. */ async function rewriteTask(vault1, task1, desiredStatus1, desiredText1) {
    if (desiredStatus1 == task1.status && (desiredText1 == undefined || desiredText1 == task1.text)) return;
    desiredStatus1 = desiredStatus1 == "" ? " " : desiredStatus1;
    let rawFiletext1 = await vault1.adapter.read(task1.path);
    let hasRN1 = rawFiletext1.contains("\r");
    let filetext1 = rawFiletext1.split(/\r?\n/u);
    if (filetext1.length < task1.line) return;
    let match1 = LIST_ITEM_REGEX.exec(filetext1[task1.line]);
    if (!match1 || match1[2].length == 0) return;
    let taskTextParts1 = task1.text.split("\n");
    if (taskTextParts1[0].trim() != match1[3].trim()) return;
    // We have a positive match here at this point, so go ahead and do the rewrite of the status.
    let initialSpacing1 = /^[\s>]*/u.exec(filetext1[task1.line])[0];
    if (desiredText1) {
        let desiredParts1 = desiredText1.split("\n");
        let newTextLines1 = [
            `${initialSpacing1}${task1.symbol} [${desiredStatus1}] ${desiredParts1[0]}`
        ].concat(desiredParts1.slice(1).map((l1)=>initialSpacing1 + "	" + l1));
        filetext1.splice(task1.line, task1.lineCount, ...newTextLines1);
    } else {
        filetext1[task1.line] = `${initialSpacing1}${task1.symbol} [${desiredStatus1}] ${taskTextParts1[0].trim()}`;
    }
    let newText1 = filetext1.join(hasRN1 ? "\r\n" : "\n");
    await vault1.adapter.write(task1.path, newText1);
}
function ListGrouping({ items: items1, sourcePath: sourcePath1 }) {
    return v$1("ul", {
        class: "dataview list-view-ul"
    }, items1.map((item1)=>v$1("li", null, v$1(Lit, {
            value: item1,
            sourcePath: sourcePath1
        }))));
}
/** Pure view over list elements.  */ function ListView({ query: query1, sourcePath: sourcePath1 }) {
    let context1 = F$1(DataviewContext);
    let items1 = useIndexBackedState(context1.container, context1.app, context1.settings, context1.index, {
        state: "loading"
    }, async ()=>{
        let result1 = await asyncTryOrPropogate(()=>executeList(query1, context1.index, sourcePath1, context1.settings));
        if (!result1.successful) return {
            state: "error",
            error: result1.error,
            sourcePath: sourcePath1
        };
        return {
            state: "ready",
            items: result1.value.data
        };
    });
    if (items1.state == "loading") return v$1(d$1, null, v$1(ErrorPre, null, "Loading..."));
    else if (items1.state == "error") return v$1(d$1, null, " ", v$1(ErrorPre, null, "Dataview: ", items1.error), " ");
    if (items1.items.length == 0 && context1.settings.warnOnEmptyResult) return v$1(ErrorMessage, {
        message: "Dataview: No results to show for list query."
    });
    return v$1(ListGrouping, {
        items: items1.items,
        sourcePath: sourcePath1
    });
}
function createListView(init1, query1, sourcePath1) {
    return new ReactRenderer(init1, v$1(ListView, {
        query: query1,
        sourcePath: sourcePath1
    }));
}
function createFixedListView(init1, elements1, sourcePath1) {
    return new ReactRenderer(init1, v$1(ListGrouping, {
        items: elements1,
        sourcePath: sourcePath1
    }));
}
/** JSX component which returns the result count. */ function ResultCount(props1) {
    const { settings: settings1 } = F$1(DataviewContext);
    return settings1.showResultCount ? v$1("span", {
        class: "dataview small-text"
    }, props1.length) : v$1(d$1, null);
}
/** Simple table over headings and corresponding values. */ function TableGrouping({ headings: headings1, values: values1, sourcePath: sourcePath1 }) {
    let settings1 = F$1(DataviewContext).settings;
    return v$1(d$1, null, v$1("table", {
        class: "dataview table-view-table"
    }, v$1("thead", {
        class: "table-view-thead"
    }, v$1("tr", {
        class: "table-view-tr-header"
    }, headings1.map((heading1, index1)=>v$1("th", {
            class: "table-view-th"
        }, v$1(Markdown, {
            sourcePath: sourcePath1,
            content: heading1
        }), index1 == 0 && v$1(ResultCount, {
            length: values1.length
        }))))), v$1("tbody", {
        class: "table-view-tbody"
    }, values1.map((row1)=>v$1("tr", null, row1.map((element1)=>v$1("td", null, v$1(Lit, {
                value: element1,
                sourcePath: sourcePath1
            }))))))), settings1.warnOnEmptyResult && values1.length == 0 && v$1(ErrorMessage, {
        message: "Dataview: No results to show for table query."
    }));
}
/** Pure view over list elements.  */ function TableView({ query: query1, sourcePath: sourcePath1 }) {
    let context1 = F$1(DataviewContext);
    let items1 = useIndexBackedState(context1.container, context1.app, context1.settings, context1.index, {
        state: "loading"
    }, async ()=>{
        let result1 = await asyncTryOrPropogate(()=>executeTable(query1, context1.index, sourcePath1, context1.settings));
        if (!result1.successful) return {
            state: "error",
            error: result1.error
        };
        return {
            state: "ready",
            headings: result1.value.names,
            values: result1.value.data
        };
    });
    if (items1.state == "loading") return v$1(d$1, null, v$1(ErrorPre, null, "Loading..."));
    else if (items1.state == "error") return v$1(d$1, null, " ", v$1(ErrorPre, null, "Dataview: ", items1.error), " ");
    return v$1(TableGrouping, {
        headings: items1.headings,
        values: items1.values,
        sourcePath: sourcePath1
    });
}
function createTableView(init1, query1, sourcePath1) {
    return new ReactRenderer(init1, v$1(TableView, {
        query: query1,
        sourcePath: sourcePath1
    }));
}
function createFixedTableView(init1, headings1, values1, sourcePath1) {
    return new ReactRenderer(init1, v$1(TableGrouping, {
        values: values1,
        headings: headings1,
        sourcePath: sourcePath1
    }));
}
/** Utility functions for quickly creating fields. */ var QueryFields;
(function(QueryFields1) {
    function named1(name1, field1) {
        return {
            name: name1,
            field: field1
        };
    }
    QueryFields1.named = named1;
    function sortBy1(field1, dir1) {
        return {
            field: field1,
            direction: dir1
        };
    }
    QueryFields1.sortBy = sortBy1;
})(QueryFields || (QueryFields = {}));
/** Return a new parser which executes the underlying parser and returns it's raw string representation. */ function captureRaw(base1) {
    return parsimmon_umd_min.exports.custom((success1, failure1)=>{
        return (input1, i1)=>{
            let result1 = base1._(input1, i1);
            if (!result1.status) return result1;
            return Object.assign({}, result1, {
                value: [
                    result1.value,
                    input1.substring(i1, result1.index)
                ]
            });
        };
    });
}
/** Strip newlines and excess whitespace out of text. */ function stripNewlines(text1) {
    return text1.split(/[\r\n]+/).map((t5)=>t5.trim()).join("");
}
/** A parsimmon-powered parser-combinator implementation of the query language. */ const QUERY_LANGUAGE = parsimmon_umd_min.exports.createLanguage({
    // Simple atom parsing, like words, identifiers, numbers.
    queryType: (q1)=>parsimmon_umd_min.exports.alt(parsimmon_umd_min.exports.regexp(/TABLE|LIST|TASK|CALENDAR/i)).map((str1)=>str1.toLowerCase()).desc("query type ('TABLE', 'LIST', 'TASK', or 'CALENDAR')"),
    explicitNamedField: (q1)=>parsimmon_umd_min.exports.seqMap(EXPRESSION.field.skip(parsimmon_umd_min.exports.whitespace), parsimmon_umd_min.exports.regexp(/AS/i).skip(parsimmon_umd_min.exports.whitespace), EXPRESSION.identifier.or(EXPRESSION.string), (field1, _as1, ident1)=>QueryFields.named(ident1, field1)),
    namedField: (q1)=>parsimmon_umd_min.exports.alt(q1.explicitNamedField, captureRaw(EXPRESSION.field).map(([value1, text1])=>QueryFields.named(stripNewlines(text1), value1))),
    sortField: (q1)=>parsimmon_umd_min.exports.seqMap(EXPRESSION.field.skip(parsimmon_umd_min.exports.optWhitespace), parsimmon_umd_min.exports.regexp(/ASCENDING|DESCENDING|ASC|DESC/i).atMost(1), (field1, dir1)=>{
            let direction1 = dir1.length == 0 ? "ascending" : dir1[0].toLowerCase();
            if (direction1 == "desc") direction1 = "descending";
            if (direction1 == "asc") direction1 = "ascending";
            return {
                field: field1,
                direction: direction1
            };
        }),
    headerClause: (q1)=>q1.queryType.skip(parsimmon_umd_min.exports.whitespace).chain((qtype1)=>{
            switch(qtype1){
                case "table":
                    return parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.regexp(/WITHOUT\s+ID/i).skip(parsimmon_umd_min.exports.optWhitespace).atMost(1), parsimmon_umd_min.exports.sepBy(q1.namedField, parsimmon_umd_min.exports.string(",").trim(parsimmon_umd_min.exports.optWhitespace)), (withoutId1, fields1)=>{
                        return {
                            type: "table",
                            fields: fields1,
                            showId: withoutId1.length == 0
                        };
                    });
                case "list":
                    return parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.regexp(/WITHOUT\s+ID/i).skip(parsimmon_umd_min.exports.optWhitespace).atMost(1), EXPRESSION.field.atMost(1), (withoutId1, format1)=>{
                        return {
                            type: "list",
                            format: format1.length == 1 ? format1[0] : undefined,
                            showId: withoutId1.length == 0
                        };
                    });
                case "task":
                    return parsimmon_umd_min.exports.succeed({
                        type: "task"
                    });
                case "calendar":
                    return parsimmon_umd_min.exports.seqMap(q1.namedField, (field1)=>{
                        return {
                            type: "calendar",
                            showId: true,
                            field: field1
                        };
                    });
                default:
                    return parsimmon_umd_min.exports.fail(`Unrecognized query type '${qtype1}'`);
            }
        }).desc("TABLE or LIST or TASK or CALENDAR"),
    fromClause: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.regexp(/FROM/i), parsimmon_umd_min.exports.whitespace, EXPRESSION.source, (_11, _21, source1)=>source1),
    whereClause: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.regexp(/WHERE/i), parsimmon_umd_min.exports.whitespace, EXPRESSION.field, (where1, _5, field1)=>{
            return {
                type: "where",
                clause: field1
            };
        }).desc("WHERE <expression>"),
    sortByClause: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.regexp(/SORT/i), parsimmon_umd_min.exports.whitespace, q1.sortField.sepBy1(parsimmon_umd_min.exports.string(",").trim(parsimmon_umd_min.exports.optWhitespace)), (sort1, _11, fields1)=>{
            return {
                type: "sort",
                fields: fields1
            };
        }).desc("SORT field [ASC/DESC]"),
    limitClause: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.regexp(/LIMIT/i), parsimmon_umd_min.exports.whitespace, EXPRESSION.field, (limit1, _11, field1)=>{
            return {
                type: "limit",
                amount: field1
            };
        }).desc("LIMIT <value>"),
    flattenClause: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.regexp(/FLATTEN/i).skip(parsimmon_umd_min.exports.whitespace), q1.namedField, (_5, field1)=>{
            return {
                type: "flatten",
                field: field1
            };
        }).desc("FLATTEN <value> [AS <name>]"),
    groupByClause: (q1)=>parsimmon_umd_min.exports.seqMap(parsimmon_umd_min.exports.regexp(/GROUP BY/i).skip(parsimmon_umd_min.exports.whitespace), q1.namedField, (_5, field1)=>{
            return {
                type: "group",
                field: field1
            };
        }).desc("GROUP BY <value> [AS <name>]"),
    // Full query parsing.
    clause: (q1)=>parsimmon_umd_min.exports.alt(q1.fromClause, q1.whereClause, q1.sortByClause, q1.limitClause, q1.groupByClause, q1.flattenClause),
    query: (q1)=>parsimmon_umd_min.exports.seqMap(q1.headerClause.trim(parsimmon_umd_min.exports.optWhitespace), q1.fromClause.trim(parsimmon_umd_min.exports.optWhitespace).atMost(1), q1.clause.trim(parsimmon_umd_min.exports.optWhitespace).many(), (header1, from1, clauses1)=>{
            return {
                header: header1,
                source: from1.length == 0 ? Sources.folder("") : from1[0],
                operations: clauses1,
                settings: DEFAULT_QUERY_SETTINGS
            };
        })
});
/**
 * Attempt to parse a query from the given query text, returning a string error
 * if the parse failed.
 */ function parseQuery(text1) {
    try {
        let query1 = QUERY_LANGUAGE.query.tryParse(text1);
        return Result.success(query1);
    } catch (error1) {
        return Result.failure("" + error1);
    }
}
function noop() {}
function assign(tar1, src1) {
    // @ts-ignore
    for(const k3 in src1)tar1[k3] = src1[k3];
    return tar1;
}
function is_promise(value1) {
    return value1 && typeof value1 === "object" && typeof value1.then === "function";
}
function run(fn1) {
    return fn1();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns1) {
    fns1.forEach(run);
}
function is_function(thing1) {
    return typeof thing1 === "function";
}
function safe_not_equal(a1, b1) {
    return a1 != a1 ? b1 == b1 : a1 !== b1 || a1 && typeof a1 === "object" || typeof a1 === "function";
}
function not_equal(a1, b1) {
    return a1 != a1 ? b1 == b1 : a1 !== b1;
}
function is_empty(obj1) {
    return Object.keys(obj1).length === 0;
}
function create_slot(definition1, ctx1, $$scope1, fn1) {
    if (definition1) {
        const slot_ctx1 = get_slot_context(definition1, ctx1, $$scope1, fn1);
        return definition1[0](slot_ctx1);
    }
}
function get_slot_context(definition1, ctx1, $$scope1, fn1) {
    return definition1[1] && fn1 ? assign($$scope1.ctx.slice(), definition1[1](fn1(ctx1))) : $$scope1.ctx;
}
function get_slot_changes(definition1, $$scope1, dirty1, fn1) {
    if (definition1[2] && fn1) {
        const lets1 = definition1[2](fn1(dirty1));
        if ($$scope1.dirty === undefined) {
            return lets1;
        }
        if (typeof lets1 === "object") {
            const merged1 = [];
            const len1 = Math.max($$scope1.dirty.length, lets1.length);
            for(let i1 = 0; i1 < len1; i1 += 1){
                merged1[i1] = $$scope1.dirty[i1] | lets1[i1];
            }
            return merged1;
        }
        return $$scope1.dirty | lets1;
    }
    return $$scope1.dirty;
}
function update_slot(slot1, slot_definition1, ctx1, $$scope1, dirty1, get_slot_changes_fn1, get_slot_context_fn1) {
    const slot_changes1 = get_slot_changes(slot_definition1, $$scope1, dirty1, get_slot_changes_fn1);
    if (slot_changes1) {
        const slot_context1 = get_slot_context(slot_definition1, ctx1, $$scope1, get_slot_context_fn1);
        slot1.p(slot_context1, slot_changes1);
    }
}
function null_to_empty(value1) {
    return value1 == null ? "" : value1;
}
function append(target1, node1) {
    target1.appendChild(node1);
}
function insert(target1, node1, anchor1) {
    target1.insertBefore(node1, anchor1 || null);
}
function detach(node1) {
    node1.parentNode.removeChild(node1);
}
function destroy_each(iterations1, detaching1) {
    for(let i1 = 0; i1 < iterations1.length; i1 += 1){
        if (iterations1[i1]) iterations1[i1].d(detaching1);
    }
}
function element(name1) {
    return document.createElement(name1);
}
function svg_element(name1) {
    return document.createElementNS("http://www.w3.org/2000/svg", name1);
}
function text(data1) {
    return document.createTextNode(data1);
}
function space() {
    return text(" ");
}
function empty() {
    return text("");
}
function listen(node1, event1, handler1, options1) {
    node1.addEventListener(event1, handler1, options1);
    return ()=>node1.removeEventListener(event1, handler1, options1);
}
function attr(node1, attribute1, value1) {
    if (value1 == null) node1.removeAttribute(attribute1);
    else if (node1.getAttribute(attribute1) !== value1) node1.setAttribute(attribute1, value1);
}
function set_attributes(node1, attributes1) {
    // @ts-ignore
    const descriptors1 = Object.getOwnPropertyDescriptors(node1.__proto__);
    for(const key1 in attributes1){
        if (attributes1[key1] == null) {
            node1.removeAttribute(key1);
        } else if (key1 === "style") {
            node1.style.cssText = attributes1[key1];
        } else if (key1 === "__value") {
            node1.value = node1[key1] = attributes1[key1];
        } else if (descriptors1[key1] && descriptors1[key1].set) {
            node1[key1] = attributes1[key1];
        } else {
            attr(node1, key1, attributes1[key1]);
        }
    }
}
function children(element1) {
    return Array.from(element1.childNodes);
}
function set_data(text1, data1) {
    data1 = "" + data1;
    if (text1.wholeText !== data1) text1.data = data1;
}
function toggle_class(element1, name1, toggle1) {
    element1.classList[toggle1 ? "add" : "remove"](name1);
}
let current_component;
function set_current_component(component1) {
    current_component = component1;
}
function get_current_component() {
    if (!current_component) throw new Error("Function called outside component initialization");
    return current_component;
}
const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn1) {
    render_callbacks.push(fn1);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing) return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for(let i1 = 0; i1 < dirty_components.length; i1 += 1){
            const component1 = dirty_components[i1];
            set_current_component(component1);
            update(component1.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while(binding_callbacks.length)binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for(let i1 = 0; i1 < render_callbacks.length; i1 += 1){
            const callback1 = render_callbacks[i1];
            if (!seen_callbacks.has(callback1)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback1);
                callback1();
            }
        }
        render_callbacks.length = 0;
    }while (dirty_components.length);
    while(flush_callbacks.length){
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$2) {
    if ($$2.fragment !== null) {
        $$2.update();
        run_all($$2.before_update);
        const dirty1 = $$2.dirty;
        $$2.dirty = [
            -1
        ];
        $$2.fragment && $$2.fragment.p($$2.ctx, dirty1);
        $$2.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block1, local1) {
    if (block1 && block1.i) {
        outroing.delete(block1);
        block1.i(local1);
    }
}
function transition_out(block1, local1, detach1, callback1) {
    if (block1 && block1.o) {
        if (outroing.has(block1)) return;
        outroing.add(block1);
        outros.c.push(()=>{
            outroing.delete(block1);
            if (callback1) {
                if (detach1) block1.d(1);
                callback1();
            }
        });
        block1.o(local1);
    }
}
function handle_promise(promise1, info1) {
    const token1 = info1.token = {};
    function update1(type1, index1, key1, value1) {
        if (info1.token !== token1) return;
        info1.resolved = value1;
        let child_ctx1 = info1.ctx;
        if (key1 !== undefined) {
            child_ctx1 = child_ctx1.slice();
            child_ctx1[key1] = value1;
        }
        const block1 = type1 && (info1.current = type1)(child_ctx1);
        let needs_flush1 = false;
        if (info1.block) {
            if (info1.blocks) {
                info1.blocks.forEach((block1, i1)=>{
                    if (i1 !== index1 && block1) {
                        group_outros();
                        transition_out(block1, 1, 1, ()=>{
                            if (info1.blocks[i1] === block1) {
                                info1.blocks[i1] = null;
                            }
                        });
                        check_outros();
                    }
                });
            } else {
                info1.block.d(1);
            }
            block1.c();
            transition_in(block1, 1);
            block1.m(info1.mount(), info1.anchor);
            needs_flush1 = true;
        }
        info1.block = block1;
        if (info1.blocks) info1.blocks[index1] = block1;
        if (needs_flush1) {
            flush();
        }
    }
    if (is_promise(promise1)) {
        const current_component1 = get_current_component();
        promise1.then((value1)=>{
            set_current_component(current_component1);
            update1(info1.then, 1, info1.value, value1);
            set_current_component(null);
        }, (error1)=>{
            set_current_component(current_component1);
            update1(info1.catch, 2, info1.error, error1);
            set_current_component(null);
            if (!info1.hasCatch) {
                throw error1;
            }
        });
        // if we previously had a then/catch block, destroy it
        if (info1.current !== info1.pending) {
            update1(info1.pending, 0);
            return true;
        }
    } else {
        if (info1.current !== info1.then) {
            update1(info1.then, 1, info1.value, promise1);
            return true;
        }
        info1.resolved = promise1;
    }
}
function outro_and_destroy_block(block1, lookup1) {
    transition_out(block1, 1, 1, ()=>{
        lookup1.delete(block1.key);
    });
}
function update_keyed_each(old_blocks1, dirty1, get_key1, dynamic1, ctx1, list1, lookup1, node1, destroy1, create_each_block1, next1, get_context1) {
    let o4 = old_blocks1.length;
    let n3 = list1.length;
    let i1 = o4;
    const old_indexes1 = {};
    while(i1--)old_indexes1[old_blocks1[i1].key] = i1;
    const new_blocks1 = [];
    const new_lookup1 = new Map();
    const deltas1 = new Map();
    i1 = n3;
    while(i1--){
        const child_ctx1 = get_context1(ctx1, list1, i1);
        const key1 = get_key1(child_ctx1);
        let block1 = lookup1.get(key1);
        if (!block1) {
            block1 = create_each_block1(key1, child_ctx1);
            block1.c();
        } else if (dynamic1) {
            block1.p(child_ctx1, dirty1);
        }
        new_lookup1.set(key1, new_blocks1[i1] = block1);
        if (key1 in old_indexes1) deltas1.set(key1, Math.abs(i1 - old_indexes1[key1]));
    }
    const will_move1 = new Set();
    const did_move1 = new Set();
    function insert1(block1) {
        transition_in(block1, 1);
        block1.m(node1, next1);
        lookup1.set(block1.key, block1);
        next1 = block1.first;
        n3--;
    }
    while(o4 && n3){
        const new_block1 = new_blocks1[n3 - 1];
        const old_block1 = old_blocks1[o4 - 1];
        const new_key1 = new_block1.key;
        const old_key1 = old_block1.key;
        if (new_block1 === old_block1) {
            // do nothing
            next1 = new_block1.first;
            o4--;
            n3--;
        } else if (!new_lookup1.has(old_key1)) {
            // remove old block
            destroy1(old_block1, lookup1);
            o4--;
        } else if (!lookup1.has(new_key1) || will_move1.has(new_key1)) {
            insert1(new_block1);
        } else if (did_move1.has(old_key1)) {
            o4--;
        } else if (deltas1.get(new_key1) > deltas1.get(old_key1)) {
            did_move1.add(new_key1);
            insert1(new_block1);
        } else {
            will_move1.add(old_key1);
            o4--;
        }
    }
    while(o4--){
        const old_block1 = old_blocks1[o4];
        if (!new_lookup1.has(old_block1.key)) destroy1(old_block1, lookup1);
    }
    while(n3)insert1(new_blocks1[n3 - 1]);
    return new_blocks1;
}
function get_spread_update(levels1, updates1) {
    const update1 = {};
    const to_null_out1 = {};
    const accounted_for1 = {
        $$scope: 1
    };
    let i1 = levels1.length;
    while(i1--){
        const o4 = levels1[i1];
        const n3 = updates1[i1];
        if (n3) {
            for(const key1 in o4){
                if (!(key1 in n3)) to_null_out1[key1] = 1;
            }
            for(const key1 in n3){
                if (!accounted_for1[key1]) {
                    update1[key1] = n3[key1];
                    accounted_for1[key1] = 1;
                }
            }
            levels1[i1] = n3;
        } else {
            for(const key1 in o4){
                accounted_for1[key1] = 1;
            }
        }
    }
    for(const key1 in to_null_out1){
        if (!(key1 in update1)) update1[key1] = undefined;
    }
    return update1;
}
function get_spread_object(spread_props1) {
    return typeof spread_props1 === "object" && spread_props1 !== null ? spread_props1 : {};
}
function create_component(block1) {
    block1 && block1.c();
}
function mount_component(component1, target1, anchor1, customElement1) {
    const { fragment: fragment1, on_mount: on_mount1, on_destroy: on_destroy1, after_update: after_update1 } = component1.$$;
    fragment1 && fragment1.m(target1, anchor1);
    if (!customElement1) {
        // onMount happens before the initial afterUpdate
        add_render_callback(()=>{
            const new_on_destroy1 = on_mount1.map(run).filter(is_function);
            if (on_destroy1) {
                on_destroy1.push(...new_on_destroy1);
            } else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy1);
            }
            component1.$$.on_mount = [];
        });
    }
    after_update1.forEach(add_render_callback);
}
function destroy_component(component1, detaching1) {
    const $$2 = component1.$$;
    if ($$2.fragment !== null) {
        run_all($$2.on_destroy);
        $$2.fragment && $$2.fragment.d(detaching1);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$2.on_destroy = $$2.fragment = null;
        $$2.ctx = [];
    }
}
function make_dirty(component1, i1) {
    if (component1.$$.dirty[0] === -1) {
        dirty_components.push(component1);
        schedule_update();
        component1.$$.dirty.fill(0);
    }
    component1.$$.dirty[i1 / 31 | 0] |= 1 << i1 % 31;
}
function init(component1, options1, instance1, create_fragment1, not_equal1, props1, dirty1 = [
    -1
]) {
    const parent_component1 = current_component;
    set_current_component(component1);
    const $$2 = component1.$$ = {
        fragment: null,
        ctx: null,
        // state
        props: props1,
        update: noop,
        not_equal: not_equal1,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component1 ? parent_component1.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty: dirty1,
        skip_bound: false
    };
    let ready1 = false;
    $$2.ctx = instance1 ? instance1(component1, options1.props || {}, (i1, ret1, ...rest1)=>{
        const value1 = rest1.length ? rest1[0] : ret1;
        if ($$2.ctx && not_equal1($$2.ctx[i1], $$2.ctx[i1] = value1)) {
            if (!$$2.skip_bound && $$2.bound[i1]) $$2.bound[i1](value1);
            if (ready1) make_dirty(component1, i1);
        }
        return ret1;
    }) : [];
    $$2.update();
    ready1 = true;
    run_all($$2.before_update);
    // `false` as a special case of no DOM component
    $$2.fragment = create_fragment1 ? create_fragment1($$2.ctx) : false;
    if (options1.target) {
        if (options1.hydrate) {
            const nodes1 = children(options1.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$2.fragment && $$2.fragment.l(nodes1);
            nodes1.forEach(detach);
        } else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$2.fragment && $$2.fragment.c();
        }
        if (options1.intro) transition_in(component1.$$.fragment);
        mount_component(component1, options1.target, options1.anchor, options1.customElement);
        flush();
    }
    set_current_component(parent_component1);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */ class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type1, callback1) {
        const callbacks1 = this.$$.callbacks[type1] || (this.$$.callbacks[type1] = []);
        callbacks1.push(callback1);
        return ()=>{
            const index1 = callbacks1.indexOf(callback1);
            if (index1 !== -1) callbacks1.splice(index1, 1);
        };
    }
    $set($$props1) {
        if (this.$$set && !is_empty($$props1)) {
            this.$$.skip_bound = true;
            this.$$set($$props1);
            this.$$.skip_bound = false;
        }
    }
}
/**
 * dateUID is a way of weekly identifying daily/weekly/monthly notes.
 * They are prefixed with the granularity to avoid ambiguity.
 */ function getDateUID(date1, granularity1 = "day") {
    const ts1 = date1.clone().startOf(granularity1).format();
    return `${granularity1}-${ts1}`;
}
var getDateUID_1 = getDateUID;
/* src/components/Dot.svelte generated by Svelte v3.35.0 */ function add_css$5() {
    var style1 = element("style");
    style1.id = "svelte-1widvzq-style";
    style1.textContent = ".dot.svelte-1widvzq,.hollow.svelte-1widvzq{display:inline-block;height:6px;width:6px;margin:0 1px}.filled.svelte-1widvzq{fill:var(--color-dot)}.active.filled.svelte-1widvzq{fill:var(--text-on-accent)}.hollow.svelte-1widvzq{fill:none;stroke:var(--color-dot)}.active.hollow.svelte-1widvzq{fill:none;stroke:var(--text-on-accent)}";
    append(document.head, style1);
}
// (14:0) {:else}
function create_else_block$1(ctx1) {
    let svg1;
    let circle1;
    let svg_class_value1;
    return {
        c () {
            svg1 = svg_element("svg");
            circle1 = svg_element("circle");
            attr(circle1, "cx", "3");
            attr(circle1, "cy", "3");
            attr(circle1, "r", "2");
            attr(svg1, "class", svg_class_value1 = "" + (null_to_empty(`hollow ${ctx1[0]}`) + " svelte-1widvzq"));
            attr(svg1, "viewBox", "0 0 6 6");
            attr(svg1, "xmlns", "http://www.w3.org/2000/svg");
            toggle_class(svg1, "active", /*isActive*/ ctx1[2]);
        },
        m (target1, anchor1) {
            insert(target1, svg1, anchor1);
            append(svg1, circle1);
        },
        p (ctx1, dirty1) {
            if (dirty1 & /*className*/ 1 && svg_class_value1 !== (svg_class_value1 = "" + (null_to_empty(`hollow ${ctx1[0]}`) + " svelte-1widvzq"))) {
                attr(svg1, "class", svg_class_value1);
            }
            if (dirty1 & /*className, isActive*/ 5) {
                toggle_class(svg1, "active", /*isActive*/ ctx1[2]);
            }
        },
        d (detaching1) {
            if (detaching1) detach(svg1);
        }
    };
}
// (6:0) {#if isFilled}
function create_if_block$2(ctx1) {
    let svg1;
    let circle1;
    let svg_class_value1;
    return {
        c () {
            svg1 = svg_element("svg");
            circle1 = svg_element("circle");
            attr(circle1, "cx", "3");
            attr(circle1, "cy", "3");
            attr(circle1, "r", "2");
            attr(svg1, "class", svg_class_value1 = "" + (null_to_empty(`dot filled ${ctx1[0]}`) + " svelte-1widvzq"));
            attr(svg1, "viewBox", "0 0 6 6");
            attr(svg1, "xmlns", "http://www.w3.org/2000/svg");
            toggle_class(svg1, "active", /*isActive*/ ctx1[2]);
        },
        m (target1, anchor1) {
            insert(target1, svg1, anchor1);
            append(svg1, circle1);
        },
        p (ctx1, dirty1) {
            if (dirty1 & /*className*/ 1 && svg_class_value1 !== (svg_class_value1 = "" + (null_to_empty(`dot filled ${ctx1[0]}`) + " svelte-1widvzq"))) {
                attr(svg1, "class", svg_class_value1);
            }
            if (dirty1 & /*className, isActive*/ 5) {
                toggle_class(svg1, "active", /*isActive*/ ctx1[2]);
            }
        },
        d (detaching1) {
            if (detaching1) detach(svg1);
        }
    };
}
function create_fragment$6(ctx1) {
    let if_block_anchor1;
    function select_block_type1(ctx1, dirty1) {
        if (/*isFilled*/ ctx1[1]) return create_if_block$2;
        return create_else_block$1;
    }
    let current_block_type1 = select_block_type1(ctx1);
    let if_block2 = current_block_type1(ctx1);
    return {
        c () {
            if_block2.c();
            if_block_anchor1 = empty();
        },
        m (target1, anchor1) {
            if_block2.m(target1, anchor1);
            insert(target1, if_block_anchor1, anchor1);
        },
        p (ctx1, [dirty1]) {
            if (current_block_type1 === (current_block_type1 = select_block_type1(ctx1)) && if_block2) {
                if_block2.p(ctx1, dirty1);
            } else {
                if_block2.d(1);
                if_block2 = current_block_type1(ctx1);
                if (if_block2) {
                    if_block2.c();
                    if_block2.m(if_block_anchor1.parentNode, if_block_anchor1);
                }
            }
        },
        i: noop,
        o: noop,
        d (detaching1) {
            if_block2.d(detaching1);
            if (detaching1) detach(if_block_anchor1);
        }
    };
}
function instance$6($$self1, $$props1, $$invalidate1) {
    let { className: className1 = "" } = $$props1;
    let { isFilled: isFilled1 } = $$props1;
    let { isActive: isActive1 } = $$props1;
    $$self1.$$set = ($$props1)=>{
        if ("className" in $$props1) $$invalidate1(0, className1 = $$props1.className);
        if ("isFilled" in $$props1) $$invalidate1(1, isFilled1 = $$props1.isFilled);
        if ("isActive" in $$props1) $$invalidate1(2, isActive1 = $$props1.isActive);
    };
    return [
        className1,
        isFilled1,
        isActive1
    ];
}
class Dot extends SvelteComponent {
    constructor(options1){
        super();
        if (!document.getElementById("svelte-1widvzq-style")) add_css$5();
        init(this, options1, instance$6, create_fragment$6, safe_not_equal, {
            className: 0,
            isFilled: 1,
            isActive: 2
        });
    }
}
/* src/components/MetadataResolver.svelte generated by Svelte v3.35.0 */ const get_default_slot_changes_1 = (dirty1)=>({});
const get_default_slot_context_1 = (ctx1)=>({
        metadata: null
    });
const get_default_slot_changes = (dirty1)=>({
        metadata: dirty1 & /*metadata*/ 1
    });
const get_default_slot_context = (ctx1)=>({
        metadata: /*resolvedMeta*/ ctx1[3]
    });
// (11:0) {:else}
function create_else_block(ctx1) {
    let current1;
    const default_slot_template1 = /*#slots*/ ctx1[2].default;
    const default_slot1 = create_slot(default_slot_template1, ctx1, /*$$scope*/ ctx1[1], get_default_slot_context_1);
    return {
        c () {
            if (default_slot1) default_slot1.c();
        },
        m (target1, anchor1) {
            if (default_slot1) {
                default_slot1.m(target1, anchor1);
            }
            current1 = true;
        },
        p (ctx1, dirty1) {
            if (default_slot1) {
                if (default_slot1.p && dirty1 & /*$$scope*/ 2) {
                    update_slot(default_slot1, default_slot_template1, ctx1, /*$$scope*/ ctx1[1], dirty1, get_default_slot_changes_1, get_default_slot_context_1);
                }
            }
        },
        i (local1) {
            if (current1) return;
            transition_in(default_slot1, local1);
            current1 = true;
        },
        o (local1) {
            transition_out(default_slot1, local1);
            current1 = false;
        },
        d (detaching1) {
            if (default_slot1) default_slot1.d(detaching1);
        }
    };
}
// (7:0) {#if metadata}
function create_if_block$1(ctx1) {
    let await_block_anchor1;
    let promise1;
    let current1;
    let info1 = {
        ctx: ctx1,
        current: null,
        token: null,
        hasCatch: false,
        pending: create_pending_block,
        then: create_then_block,
        catch: create_catch_block,
        value: 3,
        blocks: [
            ,
            ,
            , 
        ]
    };
    handle_promise(promise1 = /*metadata*/ ctx1[0], info1);
    return {
        c () {
            await_block_anchor1 = empty();
            info1.block.c();
        },
        m (target1, anchor1) {
            insert(target1, await_block_anchor1, anchor1);
            info1.block.m(target1, info1.anchor = anchor1);
            info1.mount = ()=>await_block_anchor1.parentNode;
            info1.anchor = await_block_anchor1;
            current1 = true;
        },
        p (new_ctx1, dirty1) {
            ctx1 = new_ctx1;
            info1.ctx = ctx1;
            if (dirty1 & /*metadata*/ 1 && promise1 !== (promise1 = /*metadata*/ ctx1[0]) && handle_promise(promise1, info1)) ;
            else {
                const child_ctx1 = ctx1.slice();
                child_ctx1[3] = info1.resolved;
                info1.block.p(child_ctx1, dirty1);
            }
        },
        i (local1) {
            if (current1) return;
            transition_in(info1.block);
            current1 = true;
        },
        o (local1) {
            for(let i1 = 0; i1 < 3; i1 += 1){
                const block1 = info1.blocks[i1];
                transition_out(block1);
            }
            current1 = false;
        },
        d (detaching1) {
            if (detaching1) detach(await_block_anchor1);
            info1.block.d(detaching1);
            info1.token = null;
            info1 = null;
        }
    };
}
// (1:0) <svelte:options immutable />  <script lang="ts">; export let metadata; </script>  {#if metadata}
function create_catch_block(ctx1) {
    return {
        c: noop,
        m: noop,
        p: noop,
        i: noop,
        o: noop,
        d: noop
    };
}
// (8:37)      <slot metadata="{resolvedMeta}
function create_then_block(ctx1) {
    let current1;
    const default_slot_template1 = /*#slots*/ ctx1[2].default;
    const default_slot1 = create_slot(default_slot_template1, ctx1, /*$$scope*/ ctx1[1], get_default_slot_context);
    return {
        c () {
            if (default_slot1) default_slot1.c();
        },
        m (target1, anchor1) {
            if (default_slot1) {
                default_slot1.m(target1, anchor1);
            }
            current1 = true;
        },
        p (ctx1, dirty1) {
            if (default_slot1) {
                if (default_slot1.p && dirty1 & /*$$scope, metadata*/ 3) {
                    update_slot(default_slot1, default_slot_template1, ctx1, /*$$scope*/ ctx1[1], dirty1, get_default_slot_changes, get_default_slot_context);
                }
            }
        },
        i (local1) {
            if (current1) return;
            transition_in(default_slot1, local1);
            current1 = true;
        },
        o (local1) {
            transition_out(default_slot1, local1);
            current1 = false;
        },
        d (detaching1) {
            if (default_slot1) default_slot1.d(detaching1);
        }
    };
}
// (1:0) <svelte:options immutable />  <script lang="ts">; export let metadata; </script>  {#if metadata}
function create_pending_block(ctx1) {
    return {
        c: noop,
        m: noop,
        p: noop,
        i: noop,
        o: noop,
        d: noop
    };
}
function create_fragment$5(ctx1) {
    let current_block_type_index1;
    let if_block2;
    let if_block_anchor1;
    let current1;
    const if_block_creators1 = [
        create_if_block$1,
        create_else_block
    ];
    const if_blocks1 = [];
    function select_block_type1(ctx1, dirty1) {
        if (/*metadata*/ ctx1[0]) return 0;
        return 1;
    }
    current_block_type_index1 = select_block_type1(ctx1);
    if_block2 = if_blocks1[current_block_type_index1] = if_block_creators1[current_block_type_index1](ctx1);
    return {
        c () {
            if_block2.c();
            if_block_anchor1 = empty();
        },
        m (target1, anchor1) {
            if_blocks1[current_block_type_index1].m(target1, anchor1);
            insert(target1, if_block_anchor1, anchor1);
            current1 = true;
        },
        p (ctx1, [dirty1]) {
            let previous_block_index1 = current_block_type_index1;
            current_block_type_index1 = select_block_type1(ctx1);
            if (current_block_type_index1 === previous_block_index1) {
                if_blocks1[current_block_type_index1].p(ctx1, dirty1);
            } else {
                group_outros();
                transition_out(if_blocks1[previous_block_index1], 1, 1, ()=>{
                    if_blocks1[previous_block_index1] = null;
                });
                check_outros();
                if_block2 = if_blocks1[current_block_type_index1];
                if (!if_block2) {
                    if_block2 = if_blocks1[current_block_type_index1] = if_block_creators1[current_block_type_index1](ctx1);
                    if_block2.c();
                } else {
                    if_block2.p(ctx1, dirty1);
                }
                transition_in(if_block2, 1);
                if_block2.m(if_block_anchor1.parentNode, if_block_anchor1);
            }
        },
        i (local1) {
            if (current1) return;
            transition_in(if_block2);
            current1 = true;
        },
        o (local1) {
            transition_out(if_block2);
            current1 = false;
        },
        d (detaching1) {
            if_blocks1[current_block_type_index1].d(detaching1);
            if (detaching1) detach(if_block_anchor1);
        }
    };
}
function instance$5($$self1, $$props1, $$invalidate1) {
    let { $$slots: slots1 = {}, $$scope: $$scope1 } = $$props1;
    let { metadata: metadata1 } = $$props1;
    $$self1.$$set = ($$props1)=>{
        if ("metadata" in $$props1) $$invalidate1(0, metadata1 = $$props1.metadata);
        if ("$$scope" in $$props1) $$invalidate1(1, $$scope1 = $$props1.$$scope);
    };
    return [
        metadata1,
        $$scope1,
        slots1
    ];
}
class MetadataResolver extends SvelteComponent {
    constructor(options1){
        super();
        init(this, options1, instance$5, create_fragment$5, not_equal, {
            metadata: 0
        });
    }
}
function isMacOS() {
    return navigator.appVersion.indexOf("Mac") !== -1;
}
function isMetaPressed(e1) {
    return isMacOS() ? e1.metaKey : e1.ctrlKey;
}
function getDaysOfWeek(..._args1) {
    return window.moment.weekdaysShort(true);
}
function isWeekend(date1) {
    return date1.isoWeekday() === 6 || date1.isoWeekday() === 7;
}
function getStartOfWeek(days1) {
    return days1[0].weekday(0);
}
/**
 * Generate a 2D array of daily information to power
 * the calendar view.
 */ function getMonth(displayedMonth1, ..._args1) {
    const locale1 = window.moment().locale();
    const month1 = [];
    let week1;
    const startOfMonth1 = displayedMonth1.clone().locale(locale1).date(1);
    const startOffset1 = startOfMonth1.weekday();
    let date1 = startOfMonth1.clone().subtract(startOffset1, "days");
    for(let _day1 = 0; _day1 < 42; _day1++){
        if (_day1 % 7 === 0) {
            week1 = {
                days: [],
                weekNum: date1.week()
            };
            month1.push(week1);
        }
        week1.days.push(date1);
        date1 = date1.clone().add(1, "days");
    }
    return month1;
}
/* src/components/Day.svelte generated by Svelte v3.35.0 */ function add_css$4() {
    var style1 = element("style");
    style1.id = "svelte-q3wqg9-style";
    style1.textContent = ".day.svelte-q3wqg9{background-color:var(--color-background-day);border-radius:4px;color:var(--color-text-day);cursor:pointer;font-size:0.8em;height:100%;padding:4px;position:relative;text-align:center;transition:background-color 0.1s ease-in, color 0.1s ease-in;vertical-align:baseline}.day.svelte-q3wqg9:hover{background-color:var(--interactive-hover)}.day.active.svelte-q3wqg9:hover{background-color:var(--interactive-accent-hover)}.adjacent-month.svelte-q3wqg9{opacity:0.25}.today.svelte-q3wqg9{color:var(--color-text-today)}.day.svelte-q3wqg9:active,.active.svelte-q3wqg9,.active.today.svelte-q3wqg9{color:var(--text-on-accent);background-color:var(--interactive-accent)}.dot-container.svelte-q3wqg9{display:flex;flex-wrap:wrap;justify-content:center;line-height:6px;min-height:6px}";
    append(document.head, style1);
}
function get_each_context$2(ctx1, list1, i1) {
    const child_ctx1 = ctx1.slice();
    child_ctx1[11] = list1[i1];
    return child_ctx1;
}
// (36:8) {#each metadata.dots as dot}
function create_each_block$2(ctx1) {
    let dot1;
    let current1;
    const dot_spread_levels1 = [
        /*dot*/ ctx1[11]
    ];
    let dot_props1 = {};
    for(let i1 = 0; i1 < dot_spread_levels1.length; i1 += 1){
        dot_props1 = assign(dot_props1, dot_spread_levels1[i1]);
    }
    dot1 = new Dot({
        props: dot_props1
    });
    return {
        c () {
            create_component(dot1.$$.fragment);
        },
        m (target1, anchor1) {
            mount_component(dot1, target1, anchor1);
            current1 = true;
        },
        p (ctx1, dirty1) {
            const dot_changes1 = dirty1 & /*metadata*/ 128 ? get_spread_update(dot_spread_levels1, [
                get_spread_object(/*dot*/ ctx1[11])
            ]) : {};
            dot1.$set(dot_changes1);
        },
        i (local1) {
            if (current1) return;
            transition_in(dot1.$$.fragment, local1);
            current1 = true;
        },
        o (local1) {
            transition_out(dot1.$$.fragment, local1);
            current1 = false;
        },
        d (detaching1) {
            destroy_component(dot1, detaching1);
        }
    };
}
// (22:2) <MetadataResolver metadata="{metadata}" let:metadata>
function create_default_slot$1(ctx1) {
    let div11;
    let t0_value1 = /*date*/ ctx1[0].format("D") + "";
    let t01;
    let t11;
    let div01;
    let div1_class_value1;
    let current1;
    let mounted1;
    let dispose1;
    let each_value1 = /*metadata*/ ctx1[7].dots;
    let each_blocks1 = [];
    for(let i1 = 0; i1 < each_value1.length; i1 += 1){
        each_blocks1[i1] = create_each_block$2(get_each_context$2(ctx1, each_value1, i1));
    }
    const out1 = (i1)=>transition_out(each_blocks1[i1], 1, 1, ()=>{
            each_blocks1[i1] = null;
        });
    let div1_levels1 = [
        {
            class: div1_class_value1 = `day ${ctx1[7].classes.join(" ")}`
        },
        /*metadata*/ ctx1[7].dataAttributes || {}
    ];
    let div1_data1 = {};
    for(let i1 = 0; i1 < div1_levels1.length; i1 += 1){
        div1_data1 = assign(div1_data1, div1_levels1[i1]);
    }
    return {
        c () {
            div11 = element("div");
            t01 = text(t0_value1);
            t11 = space();
            div01 = element("div");
            for(let i1 = 0; i1 < each_blocks1.length; i1 += 1){
                each_blocks1[i1].c();
            }
            attr(div01, "class", "dot-container svelte-q3wqg9");
            set_attributes(div11, div1_data1);
            toggle_class(div11, "active", /*selectedId*/ ctx1[6] === getDateUID_1(/*date*/ ctx1[0], "day"));
            toggle_class(div11, "adjacent-month", !/*date*/ ctx1[0].isSame(/*displayedMonth*/ ctx1[5], "month"));
            toggle_class(div11, "today", /*date*/ ctx1[0].isSame(/*today*/ ctx1[4], "day"));
            toggle_class(div11, "svelte-q3wqg9", true);
        },
        m (target1, anchor1) {
            insert(target1, div11, anchor1);
            append(div11, t01);
            append(div11, t11);
            append(div11, div01);
            for(let i1 = 0; i1 < each_blocks1.length; i1 += 1){
                each_blocks1[i1].m(div01, null);
            }
            current1 = true;
            if (!mounted1) {
                dispose1 = [
                    listen(div11, "click", function() {
                        if (is_function(/*onClick*/ ctx1[2] && /*click_handler*/ ctx1[8])) /*onClick*/ (ctx1[2] && /*click_handler*/ ctx1[8]).apply(this, arguments);
                    }),
                    listen(div11, "contextmenu", function() {
                        if (is_function(/*onContextMenu*/ ctx1[3] && /*contextmenu_handler*/ ctx1[9])) /*onContextMenu*/ (ctx1[3] && /*contextmenu_handler*/ ctx1[9]).apply(this, arguments);
                    }),
                    listen(div11, "pointerover", function() {
                        if (is_function(/*onHover*/ ctx1[1] && /*pointerover_handler*/ ctx1[10])) /*onHover*/ (ctx1[1] && /*pointerover_handler*/ ctx1[10]).apply(this, arguments);
                    })
                ];
                mounted1 = true;
            }
        },
        p (new_ctx1, dirty1) {
            ctx1 = new_ctx1;
            if ((!current1 || dirty1 & /*date*/ 1) && t0_value1 !== (t0_value1 = /*date*/ ctx1[0].format("D") + "")) set_data(t01, t0_value1);
            if (dirty1 & /*metadata*/ 128) {
                each_value1 = /*metadata*/ ctx1[7].dots;
                let i1;
                for(i1 = 0; i1 < each_value1.length; i1 += 1){
                    const child_ctx1 = get_each_context$2(ctx1, each_value1, i1);
                    if (each_blocks1[i1]) {
                        each_blocks1[i1].p(child_ctx1, dirty1);
                        transition_in(each_blocks1[i1], 1);
                    } else {
                        each_blocks1[i1] = create_each_block$2(child_ctx1);
                        each_blocks1[i1].c();
                        transition_in(each_blocks1[i1], 1);
                        each_blocks1[i1].m(div01, null);
                    }
                }
                group_outros();
                for(i1 = each_value1.length; i1 < each_blocks1.length; i1 += 1){
                    out1(i1);
                }
                check_outros();
            }
            set_attributes(div11, div1_data1 = get_spread_update(div1_levels1, [
                (!current1 || dirty1 & /*metadata*/ 128 && div1_class_value1 !== (div1_class_value1 = `day ${ctx1[7].classes.join(" ")}`)) && {
                    class: div1_class_value1
                },
                dirty1 & /*metadata*/ 128 && /*metadata*/ (ctx1[7].dataAttributes || {})
            ]));
            toggle_class(div11, "active", /*selectedId*/ ctx1[6] === getDateUID_1(/*date*/ ctx1[0], "day"));
            toggle_class(div11, "adjacent-month", !/*date*/ ctx1[0].isSame(/*displayedMonth*/ ctx1[5], "month"));
            toggle_class(div11, "today", /*date*/ ctx1[0].isSame(/*today*/ ctx1[4], "day"));
            toggle_class(div11, "svelte-q3wqg9", true);
        },
        i (local1) {
            if (current1) return;
            for(let i1 = 0; i1 < each_value1.length; i1 += 1){
                transition_in(each_blocks1[i1]);
            }
            current1 = true;
        },
        o (local1) {
            each_blocks1 = each_blocks1.filter(Boolean);
            for(let i1 = 0; i1 < each_blocks1.length; i1 += 1){
                transition_out(each_blocks1[i1]);
            }
            current1 = false;
        },
        d (detaching1) {
            if (detaching1) detach(div11);
            destroy_each(each_blocks1, detaching1);
            mounted1 = false;
            run_all(dispose1);
        }
    };
}
function create_fragment$4(ctx1) {
    let td1;
    let metadataresolver1;
    let current1;
    metadataresolver1 = new MetadataResolver({
        props: {
            metadata: /*metadata*/ ctx1[7],
            $$slots: {
                default: [
                    create_default_slot$1,
                    ({ metadata: metadata1 })=>({
                            7: metadata1
                        }),
                    ({ metadata: metadata1 })=>metadata1 ? 128 : 0
                ]
            },
            $$scope: {
                ctx: ctx1
            }
        }
    });
    return {
        c () {
            td1 = element("td");
            create_component(metadataresolver1.$$.fragment);
        },
        m (target1, anchor1) {
            insert(target1, td1, anchor1);
            mount_component(metadataresolver1, td1, null);
            current1 = true;
        },
        p (ctx1, [dirty1]) {
            const metadataresolver_changes1 = {};
            if (dirty1 & /*metadata*/ 128) metadataresolver_changes1.metadata = /*metadata*/ ctx1[7];
            if (dirty1 & /*$$scope, metadata, selectedId, date, displayedMonth, today, onClick, onContextMenu, onHover*/ 16639) {
                metadataresolver_changes1.$$scope = {
                    dirty: dirty1,
                    ctx: ctx1
                };
            }
            metadataresolver1.$set(metadataresolver_changes1);
        },
        i (local1) {
            if (current1) return;
            transition_in(metadataresolver1.$$.fragment, local1);
            current1 = true;
        },
        o (local1) {
            transition_out(metadataresolver1.$$.fragment, local1);
            current1 = false;
        },
        d (detaching1) {
            if (detaching1) detach(td1);
            destroy_component(metadataresolver1);
        }
    };
}
function instance$4($$self1, $$props1, $$invalidate1) {
    let { date: date1 } = $$props1;
    let { metadata: metadata1 } = $$props1;
    let { onHover: onHover1 } = $$props1;
    let { onClick: onClick1 } = $$props1;
    let { onContextMenu: onContextMenu1 } = $$props1;
    let { today: today1 } = $$props1;
    let { displayedMonth: displayedMonth1 = null } = $$props1;
    let { selectedId: selectedId1 = null } = $$props1;
    const click_handler1 = (e1)=>onClick1(date1, isMetaPressed(e1));
    const contextmenu_handler1 = (e1)=>onContextMenu1(date1, e1);
    const pointerover_handler1 = (e1)=>onHover1(date1, e1.target, isMetaPressed(e1));
    $$self1.$$set = ($$props1)=>{
        if ("date" in $$props1) $$invalidate1(0, date1 = $$props1.date);
        if ("metadata" in $$props1) $$invalidate1(7, metadata1 = $$props1.metadata);
        if ("onHover" in $$props1) $$invalidate1(1, onHover1 = $$props1.onHover);
        if ("onClick" in $$props1) $$invalidate1(2, onClick1 = $$props1.onClick);
        if ("onContextMenu" in $$props1) $$invalidate1(3, onContextMenu1 = $$props1.onContextMenu);
        if ("today" in $$props1) $$invalidate1(4, today1 = $$props1.today);
        if ("displayedMonth" in $$props1) $$invalidate1(5, displayedMonth1 = $$props1.displayedMonth);
        if ("selectedId" in $$props1) $$invalidate1(6, selectedId1 = $$props1.selectedId);
    };
    return [
        date1,
        onHover1,
        onClick1,
        onContextMenu1,
        today1,
        displayedMonth1,
        selectedId1,
        metadata1,
        click_handler1,
        contextmenu_handler1,
        pointerover_handler1
    ];
}
class Day extends SvelteComponent {
    constructor(options1){
        super();
        if (!document.getElementById("svelte-q3wqg9-style")) add_css$4();
        init(this, options1, instance$4, create_fragment$4, not_equal, {
            date: 0,
            metadata: 7,
            onHover: 1,
            onClick: 2,
            onContextMenu: 3,
            today: 4,
            displayedMonth: 5,
            selectedId: 6
        });
    }
}
/* src/components/Arrow.svelte generated by Svelte v3.35.0 */ function add_css$3() {
    var style1 = element("style");
    style1.id = "svelte-156w7na-style";
    style1.textContent = ".arrow.svelte-156w7na.svelte-156w7na{align-items:center;cursor:pointer;display:flex;justify-content:center;width:24px}.arrow.is-mobile.svelte-156w7na.svelte-156w7na{width:32px}.right.svelte-156w7na.svelte-156w7na{transform:rotate(180deg)}.arrow.svelte-156w7na svg.svelte-156w7na{color:var(--color-arrow);height:16px;width:16px}";
    append(document.head, style1);
}
function create_fragment$3(ctx1) {
    let div3;
    let svg1;
    let path1;
    let mounted1;
    let dispose1;
    return {
        c () {
            div3 = element("div");
            svg1 = svg_element("svg");
            path1 = svg_element("path");
            attr(path1, "fill", "currentColor");
            attr(path1, "d", "M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z");
            attr(svg1, "focusable", "false");
            attr(svg1, "role", "img");
            attr(svg1, "xmlns", "http://www.w3.org/2000/svg");
            attr(svg1, "viewBox", "0 0 320 512");
            attr(svg1, "class", "svelte-156w7na");
            attr(div3, "class", "arrow svelte-156w7na");
            attr(div3, "aria-label", /*tooltip*/ ctx1[1]);
            toggle_class(div3, "is-mobile", /*isMobile*/ ctx1[3]);
            toggle_class(div3, "right", /*direction*/ ctx1[2] === "right");
        },
        m (target1, anchor1) {
            insert(target1, div3, anchor1);
            append(div3, svg1);
            append(svg1, path1);
            if (!mounted1) {
                dispose1 = listen(div3, "click", function() {
                    if (is_function(/*onClick*/ ctx1[0])) /*onClick*/ ctx1[0].apply(this, arguments);
                });
                mounted1 = true;
            }
        },
        p (new_ctx1, [dirty1]) {
            ctx1 = new_ctx1;
            if (dirty1 & /*tooltip*/ 2) {
                attr(div3, "aria-label", /*tooltip*/ ctx1[1]);
            }
            if (dirty1 & /*direction*/ 4) {
                toggle_class(div3, "right", /*direction*/ ctx1[2] === "right");
            }
        },
        i: noop,
        o: noop,
        d (detaching1) {
            if (detaching1) detach(div3);
            mounted1 = false;
            dispose1();
        }
    };
}
function instance$3($$self1, $$props1, $$invalidate1) {
    let { onClick: onClick1 } = $$props1;
    let { tooltip: tooltip1 } = $$props1;
    let { direction: direction1 } = $$props1;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let isMobile1 = window.app.isMobile;
    $$self1.$$set = ($$props1)=>{
        if ("onClick" in $$props1) $$invalidate1(0, onClick1 = $$props1.onClick);
        if ("tooltip" in $$props1) $$invalidate1(1, tooltip1 = $$props1.tooltip);
        if ("direction" in $$props1) $$invalidate1(2, direction1 = $$props1.direction);
    };
    return [
        onClick1,
        tooltip1,
        direction1,
        isMobile1
    ];
}
class Arrow extends SvelteComponent {
    constructor(options1){
        super();
        if (!document.getElementById("svelte-156w7na-style")) add_css$3();
        init(this, options1, instance$3, create_fragment$3, safe_not_equal, {
            onClick: 0,
            tooltip: 1,
            direction: 2
        });
    }
}
/* src/components/Nav.svelte generated by Svelte v3.35.0 */ function add_css$2() {
    var style1 = element("style");
    style1.id = "svelte-1vwr9dd-style";
    style1.textContent = ".nav.svelte-1vwr9dd.svelte-1vwr9dd{align-items:center;display:flex;margin:0.6em 0 1em;padding:0 8px;width:100%}.nav.is-mobile.svelte-1vwr9dd.svelte-1vwr9dd{padding:0}.title.svelte-1vwr9dd.svelte-1vwr9dd{color:var(--color-text-title);font-size:1.5em;margin:0}.is-mobile.svelte-1vwr9dd .title.svelte-1vwr9dd{font-size:1.3em}.month.svelte-1vwr9dd.svelte-1vwr9dd{font-weight:500;text-transform:capitalize}.year.svelte-1vwr9dd.svelte-1vwr9dd{color:var(--interactive-accent)}.right-nav.svelte-1vwr9dd.svelte-1vwr9dd{display:flex;justify-content:center;margin-left:auto}.reset-button.svelte-1vwr9dd.svelte-1vwr9dd{cursor:pointer;border-radius:4px;color:var(--text-muted);font-size:0.7em;font-weight:600;letter-spacing:1px;margin:0 4px;padding:0px 4px;text-transform:uppercase}.is-mobile.svelte-1vwr9dd .reset-button.svelte-1vwr9dd{display:none}";
    append(document.head, style1);
}
function create_fragment$2(ctx1) {
    let div21;
    let h31;
    let span01;
    let t0_value1 = /*displayedMonth*/ ctx1[0].format("MMM") + "";
    let t01;
    let t11;
    let span11;
    let t2_value1 = /*displayedMonth*/ ctx1[0].format("YYYY") + "";
    let t21;
    let t31;
    let div11;
    let arrow01;
    let t41;
    let div01;
    let t61;
    let arrow11;
    let current1;
    let mounted1;
    let dispose1;
    arrow01 = new Arrow({
        props: {
            direction: "left",
            onClick: /*decrementDisplayedMonth*/ ctx1[3],
            tooltip: "Previous Month"
        }
    });
    arrow11 = new Arrow({
        props: {
            direction: "right",
            onClick: /*incrementDisplayedMonth*/ ctx1[2],
            tooltip: "Next Month"
        }
    });
    return {
        c () {
            div21 = element("div");
            h31 = element("h3");
            span01 = element("span");
            t01 = text(t0_value1);
            t11 = space();
            span11 = element("span");
            t21 = text(t2_value1);
            t31 = space();
            div11 = element("div");
            create_component(arrow01.$$.fragment);
            t41 = space();
            div01 = element("div");
            div01.textContent = `${ctx1[4]}`;
            t61 = space();
            create_component(arrow11.$$.fragment);
            attr(span01, "class", "month svelte-1vwr9dd");
            attr(span11, "class", "year svelte-1vwr9dd");
            attr(h31, "class", "title svelte-1vwr9dd");
            attr(div01, "class", "reset-button svelte-1vwr9dd");
            attr(div11, "class", "right-nav svelte-1vwr9dd");
            attr(div21, "class", "nav svelte-1vwr9dd");
            toggle_class(div21, "is-mobile", /*isMobile*/ ctx1[5]);
        },
        m (target1, anchor1) {
            insert(target1, div21, anchor1);
            append(div21, h31);
            append(h31, span01);
            append(span01, t01);
            append(h31, t11);
            append(h31, span11);
            append(span11, t21);
            append(div21, t31);
            append(div21, div11);
            mount_component(arrow01, div11, null);
            append(div11, t41);
            append(div11, div01);
            append(div11, t61);
            mount_component(arrow11, div11, null);
            current1 = true;
            if (!mounted1) {
                dispose1 = [
                    listen(h31, "click", function() {
                        if (is_function(/*resetDisplayedMonth*/ ctx1[1])) /*resetDisplayedMonth*/ ctx1[1].apply(this, arguments);
                    }),
                    listen(div01, "click", function() {
                        if (is_function(/*resetDisplayedMonth*/ ctx1[1])) /*resetDisplayedMonth*/ ctx1[1].apply(this, arguments);
                    })
                ];
                mounted1 = true;
            }
        },
        p (new_ctx1, [dirty1]) {
            ctx1 = new_ctx1;
            if ((!current1 || dirty1 & /*displayedMonth*/ 1) && t0_value1 !== (t0_value1 = /*displayedMonth*/ ctx1[0].format("MMM") + "")) set_data(t01, t0_value1);
            if ((!current1 || dirty1 & /*displayedMonth*/ 1) && t2_value1 !== (t2_value1 = /*displayedMonth*/ ctx1[0].format("YYYY") + "")) set_data(t21, t2_value1);
            const arrow0_changes1 = {};
            if (dirty1 & /*decrementDisplayedMonth*/ 8) arrow0_changes1.onClick = /*decrementDisplayedMonth*/ ctx1[3];
            arrow01.$set(arrow0_changes1);
            const arrow1_changes1 = {};
            if (dirty1 & /*incrementDisplayedMonth*/ 4) arrow1_changes1.onClick = /*incrementDisplayedMonth*/ ctx1[2];
            arrow11.$set(arrow1_changes1);
        },
        i (local1) {
            if (current1) return;
            transition_in(arrow01.$$.fragment, local1);
            transition_in(arrow11.$$.fragment, local1);
            current1 = true;
        },
        o (local1) {
            transition_out(arrow01.$$.fragment, local1);
            transition_out(arrow11.$$.fragment, local1);
            current1 = false;
        },
        d (detaching1) {
            if (detaching1) detach(div21);
            destroy_component(arrow01);
            destroy_component(arrow11);
            mounted1 = false;
            run_all(dispose1);
        }
    };
}
function instance$2($$self1, $$props1, $$invalidate1) {
    let { displayedMonth: displayedMonth1 } = $$props1;
    let { today: today1 } = $$props1;
    let { resetDisplayedMonth: resetDisplayedMonth1 } = $$props1;
    let { incrementDisplayedMonth: incrementDisplayedMonth1 } = $$props1;
    let { decrementDisplayedMonth: decrementDisplayedMonth1 } = $$props1;
    // Get the word 'Today' but localized to the current language
    const todayDisplayStr1 = today1.calendar().split(/\d|\s/)[0];
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let isMobile1 = window.app.isMobile;
    $$self1.$$set = ($$props1)=>{
        if ("displayedMonth" in $$props1) $$invalidate1(0, displayedMonth1 = $$props1.displayedMonth);
        if ("today" in $$props1) $$invalidate1(6, today1 = $$props1.today);
        if ("resetDisplayedMonth" in $$props1) $$invalidate1(1, resetDisplayedMonth1 = $$props1.resetDisplayedMonth);
        if ("incrementDisplayedMonth" in $$props1) $$invalidate1(2, incrementDisplayedMonth1 = $$props1.incrementDisplayedMonth);
        if ("decrementDisplayedMonth" in $$props1) $$invalidate1(3, decrementDisplayedMonth1 = $$props1.decrementDisplayedMonth);
    };
    return [
        displayedMonth1,
        resetDisplayedMonth1,
        incrementDisplayedMonth1,
        decrementDisplayedMonth1,
        todayDisplayStr1,
        isMobile1,
        today1
    ];
}
class Nav extends SvelteComponent {
    constructor(options1){
        super();
        if (!document.getElementById("svelte-1vwr9dd-style")) add_css$2();
        init(this, options1, instance$2, create_fragment$2, safe_not_equal, {
            displayedMonth: 0,
            today: 6,
            resetDisplayedMonth: 1,
            incrementDisplayedMonth: 2,
            decrementDisplayedMonth: 3
        });
    }
}
/* src/components/WeekNum.svelte generated by Svelte v3.35.0 */ function add_css$1() {
    var style1 = element("style");
    style1.id = "svelte-egt0yd-style";
    style1.textContent = "td.svelte-egt0yd{border-right:1px solid var(--background-modifier-border)}.week-num.svelte-egt0yd{background-color:var(--color-background-weeknum);border-radius:4px;color:var(--color-text-weeknum);cursor:pointer;font-size:0.65em;height:100%;padding:4px;text-align:center;transition:background-color 0.1s ease-in, color 0.1s ease-in;vertical-align:baseline}.week-num.svelte-egt0yd:hover{background-color:var(--interactive-hover)}.week-num.active.svelte-egt0yd:hover{background-color:var(--interactive-accent-hover)}.active.svelte-egt0yd{color:var(--text-on-accent);background-color:var(--interactive-accent)}.dot-container.svelte-egt0yd{display:flex;flex-wrap:wrap;justify-content:center;line-height:6px;min-height:6px}";
    append(document.head, style1);
}
function get_each_context$1(ctx1, list1, i1) {
    const child_ctx1 = ctx1.slice();
    child_ctx1[11] = list1[i1];
    return child_ctx1;
}
// (35:8) {#each metadata.dots as dot}
function create_each_block$1(ctx1) {
    let dot1;
    let current1;
    const dot_spread_levels1 = [
        /*dot*/ ctx1[11]
    ];
    let dot_props1 = {};
    for(let i1 = 0; i1 < dot_spread_levels1.length; i1 += 1){
        dot_props1 = assign(dot_props1, dot_spread_levels1[i1]);
    }
    dot1 = new Dot({
        props: dot_props1
    });
    return {
        c () {
            create_component(dot1.$$.fragment);
        },
        m (target1, anchor1) {
            mount_component(dot1, target1, anchor1);
            current1 = true;
        },
        p (ctx1, dirty1) {
            const dot_changes1 = dirty1 & /*metadata*/ 64 ? get_spread_update(dot_spread_levels1, [
                get_spread_object(/*dot*/ ctx1[11])
            ]) : {};
            dot1.$set(dot_changes1);
        },
        i (local1) {
            if (current1) return;
            transition_in(dot1.$$.fragment, local1);
            current1 = true;
        },
        o (local1) {
            transition_out(dot1.$$.fragment, local1);
            current1 = false;
        },
        d (detaching1) {
            destroy_component(dot1, detaching1);
        }
    };
}
// (24:2) <MetadataResolver metadata="{metadata}" let:metadata>
function create_default_slot(ctx1) {
    let div11;
    let t01;
    let t11;
    let div01;
    let div1_class_value1;
    let current1;
    let mounted1;
    let dispose1;
    let each_value1 = /*metadata*/ ctx1[6].dots;
    let each_blocks1 = [];
    for(let i1 = 0; i1 < each_value1.length; i1 += 1){
        each_blocks1[i1] = create_each_block$1(get_each_context$1(ctx1, each_value1, i1));
    }
    const out1 = (i1)=>transition_out(each_blocks1[i1], 1, 1, ()=>{
            each_blocks1[i1] = null;
        });
    return {
        c () {
            div11 = element("div");
            t01 = text(/*weekNum*/ ctx1[0]);
            t11 = space();
            div01 = element("div");
            for(let i1 = 0; i1 < each_blocks1.length; i1 += 1){
                each_blocks1[i1].c();
            }
            attr(div01, "class", "dot-container svelte-egt0yd");
            attr(div11, "class", div1_class_value1 = "" + (null_to_empty(`week-num ${ctx1[6].classes.join(" ")}`) + " svelte-egt0yd"));
            toggle_class(div11, "active", /*selectedId*/ ctx1[5] === getDateUID_1(/*days*/ ctx1[1][0], "week"));
        },
        m (target1, anchor1) {
            insert(target1, div11, anchor1);
            append(div11, t01);
            append(div11, t11);
            append(div11, div01);
            for(let i1 = 0; i1 < each_blocks1.length; i1 += 1){
                each_blocks1[i1].m(div01, null);
            }
            current1 = true;
            if (!mounted1) {
                dispose1 = [
                    listen(div11, "click", function() {
                        if (is_function(/*onClick*/ ctx1[3] && /*click_handler*/ ctx1[8])) /*onClick*/ (ctx1[3] && /*click_handler*/ ctx1[8]).apply(this, arguments);
                    }),
                    listen(div11, "contextmenu", function() {
                        if (is_function(/*onContextMenu*/ ctx1[4] && /*contextmenu_handler*/ ctx1[9])) /*onContextMenu*/ (ctx1[4] && /*contextmenu_handler*/ ctx1[9]).apply(this, arguments);
                    }),
                    listen(div11, "pointerover", function() {
                        if (is_function(/*onHover*/ ctx1[2] && /*pointerover_handler*/ ctx1[10])) /*onHover*/ (ctx1[2] && /*pointerover_handler*/ ctx1[10]).apply(this, arguments);
                    })
                ];
                mounted1 = true;
            }
        },
        p (new_ctx1, dirty1) {
            ctx1 = new_ctx1;
            if (!current1 || dirty1 & /*weekNum*/ 1) set_data(t01, /*weekNum*/ ctx1[0]);
            if (dirty1 & /*metadata*/ 64) {
                each_value1 = /*metadata*/ ctx1[6].dots;
                let i1;
                for(i1 = 0; i1 < each_value1.length; i1 += 1){
                    const child_ctx1 = get_each_context$1(ctx1, each_value1, i1);
                    if (each_blocks1[i1]) {
                        each_blocks1[i1].p(child_ctx1, dirty1);
                        transition_in(each_blocks1[i1], 1);
                    } else {
                        each_blocks1[i1] = create_each_block$1(child_ctx1);
                        each_blocks1[i1].c();
                        transition_in(each_blocks1[i1], 1);
                        each_blocks1[i1].m(div01, null);
                    }
                }
                group_outros();
                for(i1 = each_value1.length; i1 < each_blocks1.length; i1 += 1){
                    out1(i1);
                }
                check_outros();
            }
            if (!current1 || dirty1 & /*metadata*/ 64 && div1_class_value1 !== (div1_class_value1 = "" + (null_to_empty(`week-num ${ctx1[6].classes.join(" ")}`) + " svelte-egt0yd"))) {
                attr(div11, "class", div1_class_value1);
            }
            if (dirty1 & /*metadata, selectedId, getDateUID, days*/ 98) {
                toggle_class(div11, "active", /*selectedId*/ ctx1[5] === getDateUID_1(/*days*/ ctx1[1][0], "week"));
            }
        },
        i (local1) {
            if (current1) return;
            for(let i1 = 0; i1 < each_value1.length; i1 += 1){
                transition_in(each_blocks1[i1]);
            }
            current1 = true;
        },
        o (local1) {
            each_blocks1 = each_blocks1.filter(Boolean);
            for(let i1 = 0; i1 < each_blocks1.length; i1 += 1){
                transition_out(each_blocks1[i1]);
            }
            current1 = false;
        },
        d (detaching1) {
            if (detaching1) detach(div11);
            destroy_each(each_blocks1, detaching1);
            mounted1 = false;
            run_all(dispose1);
        }
    };
}
function create_fragment$1(ctx1) {
    let td1;
    let metadataresolver1;
    let current1;
    metadataresolver1 = new MetadataResolver({
        props: {
            metadata: /*metadata*/ ctx1[6],
            $$slots: {
                default: [
                    create_default_slot,
                    ({ metadata: metadata1 })=>({
                            6: metadata1
                        }),
                    ({ metadata: metadata1 })=>metadata1 ? 64 : 0
                ]
            },
            $$scope: {
                ctx: ctx1
            }
        }
    });
    return {
        c () {
            td1 = element("td");
            create_component(metadataresolver1.$$.fragment);
            attr(td1, "class", "svelte-egt0yd");
        },
        m (target1, anchor1) {
            insert(target1, td1, anchor1);
            mount_component(metadataresolver1, td1, null);
            current1 = true;
        },
        p (ctx1, [dirty1]) {
            const metadataresolver_changes1 = {};
            if (dirty1 & /*metadata*/ 64) metadataresolver_changes1.metadata = /*metadata*/ ctx1[6];
            if (dirty1 & /*$$scope, metadata, selectedId, days, onClick, startOfWeek, onContextMenu, onHover, weekNum*/ 16639) {
                metadataresolver_changes1.$$scope = {
                    dirty: dirty1,
                    ctx: ctx1
                };
            }
            metadataresolver1.$set(metadataresolver_changes1);
        },
        i (local1) {
            if (current1) return;
            transition_in(metadataresolver1.$$.fragment, local1);
            current1 = true;
        },
        o (local1) {
            transition_out(metadataresolver1.$$.fragment, local1);
            current1 = false;
        },
        d (detaching1) {
            if (detaching1) detach(td1);
            destroy_component(metadataresolver1);
        }
    };
}
function instance$1($$self1, $$props1, $$invalidate1) {
    let { weekNum: weekNum1 } = $$props1;
    let { days: days1 } = $$props1;
    let { metadata: metadata1 } = $$props1;
    let { onHover: onHover1 } = $$props1;
    let { onClick: onClick1 } = $$props1;
    let { onContextMenu: onContextMenu1 } = $$props1;
    let { selectedId: selectedId1 = null } = $$props1;
    let startOfWeek1;
    const click_handler1 = (e1)=>onClick1(startOfWeek1, isMetaPressed(e1));
    const contextmenu_handler1 = (e1)=>onContextMenu1(days1[0], e1);
    const pointerover_handler1 = (e1)=>onHover1(startOfWeek1, e1.target, isMetaPressed(e1));
    $$self1.$$set = ($$props1)=>{
        if ("weekNum" in $$props1) $$invalidate1(0, weekNum1 = $$props1.weekNum);
        if ("days" in $$props1) $$invalidate1(1, days1 = $$props1.days);
        if ("metadata" in $$props1) $$invalidate1(6, metadata1 = $$props1.metadata);
        if ("onHover" in $$props1) $$invalidate1(2, onHover1 = $$props1.onHover);
        if ("onClick" in $$props1) $$invalidate1(3, onClick1 = $$props1.onClick);
        if ("onContextMenu" in $$props1) $$invalidate1(4, onContextMenu1 = $$props1.onContextMenu);
        if ("selectedId" in $$props1) $$invalidate1(5, selectedId1 = $$props1.selectedId);
    };
    $$self1.$$.update = ()=>{
        if ($$self1.$$.dirty & /*days*/ 2) {
            $$invalidate1(7, startOfWeek1 = getStartOfWeek(days1));
        }
    };
    return [
        weekNum1,
        days1,
        onHover1,
        onClick1,
        onContextMenu1,
        selectedId1,
        metadata1,
        startOfWeek1,
        click_handler1,
        contextmenu_handler1,
        pointerover_handler1
    ];
}
class WeekNum extends SvelteComponent {
    constructor(options1){
        super();
        if (!document.getElementById("svelte-egt0yd-style")) add_css$1();
        init(this, options1, instance$1, create_fragment$1, not_equal, {
            weekNum: 0,
            days: 1,
            metadata: 6,
            onHover: 2,
            onClick: 3,
            onContextMenu: 4,
            selectedId: 5
        });
    }
}
async function metadataReducer(promisedMetadata1) {
    const meta1 = {
        dots: [],
        classes: [],
        dataAttributes: {}
    };
    const metas1 = await Promise.all(promisedMetadata1);
    return metas1.reduce((acc1, meta1)=>({
            classes: [
                ...acc1.classes,
                ...meta1.classes || []
            ],
            dataAttributes: Object.assign(acc1.dataAttributes, meta1.dataAttributes),
            dots: [
                ...acc1.dots,
                ...meta1.dots || []
            ]
        }), meta1);
}
function getDailyMetadata(sources1, date1, ..._args1) {
    return metadataReducer(sources1.map((source1)=>source1.getDailyMetadata(date1)));
}
function getWeeklyMetadata(sources1, date1, ..._args1) {
    return metadataReducer(sources1.map((source1)=>source1.getWeeklyMetadata(date1)));
}
/* src/components/Calendar.svelte generated by Svelte v3.35.0 */ function add_css() {
    var style1 = element("style");
    style1.id = "svelte-pcimu8-style";
    style1.textContent = ".container.svelte-pcimu8{--color-background-heading:transparent;--color-background-day:transparent;--color-background-weeknum:transparent;--color-background-weekend:transparent;--color-dot:var(--text-muted);--color-arrow:var(--text-muted);--color-button:var(--text-muted);--color-text-title:var(--text-normal);--color-text-heading:var(--text-muted);--color-text-day:var(--text-normal);--color-text-today:var(--interactive-accent);--color-text-weeknum:var(--text-muted)}.container.svelte-pcimu8{padding:0 8px}.container.is-mobile.svelte-pcimu8{padding:0}th.svelte-pcimu8{text-align:center}.weekend.svelte-pcimu8{background-color:var(--color-background-weekend)}.calendar.svelte-pcimu8{border-collapse:collapse;width:100%}th.svelte-pcimu8{background-color:var(--color-background-heading);color:var(--color-text-heading);font-size:0.6em;letter-spacing:1px;padding:4px;text-transform:uppercase}";
    append(document.head, style1);
}
function get_each_context(ctx1, list1, i1) {
    const child_ctx1 = ctx1.slice();
    child_ctx1[18] = list1[i1];
    return child_ctx1;
}
function get_each_context_1(ctx1, list1, i1) {
    const child_ctx1 = ctx1.slice();
    child_ctx1[21] = list1[i1];
    return child_ctx1;
}
function get_each_context_2(ctx1, list1, i1) {
    const child_ctx1 = ctx1.slice();
    child_ctx1[24] = list1[i1];
    return child_ctx1;
}
function get_each_context_3(ctx1, list1, i1) {
    const child_ctx1 = ctx1.slice();
    child_ctx1[27] = list1[i1];
    return child_ctx1;
}
// (55:6) {#if showWeekNums}
function create_if_block_2(ctx1) {
    let col1;
    return {
        c () {
            col1 = element("col");
        },
        m (target1, anchor1) {
            insert(target1, col1, anchor1);
        },
        d (detaching1) {
            if (detaching1) detach(col1);
        }
    };
}
// (58:6) {#each month[1].days as date}
function create_each_block_3(ctx1) {
    let col1;
    return {
        c () {
            col1 = element("col");
            attr(col1, "class", "svelte-pcimu8");
            toggle_class(col1, "weekend", isWeekend(/*date*/ ctx1[27]));
        },
        m (target1, anchor1) {
            insert(target1, col1, anchor1);
        },
        p (ctx1, dirty1) {
            if (dirty1 & /*isWeekend, month*/ 16384) {
                toggle_class(col1, "weekend", isWeekend(/*date*/ ctx1[27]));
            }
        },
        d (detaching1) {
            if (detaching1) detach(col1);
        }
    };
}
// (64:8) {#if showWeekNums}
function create_if_block_1(ctx1) {
    let th1;
    return {
        c () {
            th1 = element("th");
            th1.textContent = "W";
            attr(th1, "class", "svelte-pcimu8");
        },
        m (target1, anchor1) {
            insert(target1, th1, anchor1);
        },
        d (detaching1) {
            if (detaching1) detach(th1);
        }
    };
}
// (67:8) {#each daysOfWeek as dayOfWeek}
function create_each_block_2(ctx1) {
    let th1;
    let t_value1 = /*dayOfWeek*/ ctx1[24] + "";
    let t5;
    return {
        c () {
            th1 = element("th");
            t5 = text(t_value1);
            attr(th1, "class", "svelte-pcimu8");
        },
        m (target1, anchor1) {
            insert(target1, th1, anchor1);
            append(th1, t5);
        },
        p (ctx1, dirty1) {
            if (dirty1 & /*daysOfWeek*/ 32768 && t_value1 !== (t_value1 = /*dayOfWeek*/ ctx1[24] + "")) set_data(t5, t_value1);
        },
        d (detaching1) {
            if (detaching1) detach(th1);
        }
    };
}
// (75:10) {#if showWeekNums}
function create_if_block(ctx1) {
    let weeknum1;
    let current1;
    const weeknum_spread_levels1 = [
        /*week*/ ctx1[18],
        {
            metadata: getWeeklyMetadata(/*sources*/ ctx1[8], /*week*/ ctx1[18].days[0], /*today*/ ctx1[10])
        },
        {
            onClick: /*onClickWeek*/ ctx1[7]
        },
        {
            onContextMenu: /*onContextMenuWeek*/ ctx1[5]
        },
        {
            onHover: /*onHoverWeek*/ ctx1[3]
        },
        {
            selectedId: /*selectedId*/ ctx1[9]
        }
    ];
    let weeknum_props1 = {};
    for(let i1 = 0; i1 < weeknum_spread_levels1.length; i1 += 1){
        weeknum_props1 = assign(weeknum_props1, weeknum_spread_levels1[i1]);
    }
    weeknum1 = new WeekNum({
        props: weeknum_props1
    });
    return {
        c () {
            create_component(weeknum1.$$.fragment);
        },
        m (target1, anchor1) {
            mount_component(weeknum1, target1, anchor1);
            current1 = true;
        },
        p (ctx1, dirty1) {
            const weeknum_changes1 = dirty1 & /*month, getWeeklyMetadata, sources, today, onClickWeek, onContextMenuWeek, onHoverWeek, selectedId*/ 18344 ? get_spread_update(weeknum_spread_levels1, [
                dirty1 & /*month*/ 16384 && get_spread_object(/*week*/ ctx1[18]),
                dirty1 & /*getWeeklyMetadata, sources, month, today*/ 17664 && {
                    metadata: getWeeklyMetadata(/*sources*/ ctx1[8], /*week*/ ctx1[18].days[0], /*today*/ ctx1[10])
                },
                dirty1 & /*onClickWeek*/ 128 && {
                    onClick: /*onClickWeek*/ ctx1[7]
                },
                dirty1 & /*onContextMenuWeek*/ 32 && {
                    onContextMenu: /*onContextMenuWeek*/ ctx1[5]
                },
                dirty1 & /*onHoverWeek*/ 8 && {
                    onHover: /*onHoverWeek*/ ctx1[3]
                },
                dirty1 & /*selectedId*/ 512 && {
                    selectedId: /*selectedId*/ ctx1[9]
                }
            ]) : {};
            weeknum1.$set(weeknum_changes1);
        },
        i (local1) {
            if (current1) return;
            transition_in(weeknum1.$$.fragment, local1);
            current1 = true;
        },
        o (local1) {
            transition_out(weeknum1.$$.fragment, local1);
            current1 = false;
        },
        d (detaching1) {
            destroy_component(weeknum1, detaching1);
        }
    };
}
// (85:10) {#each week.days as day (day.format())}
function create_each_block_1(key_11, ctx1) {
    let first1;
    let day1;
    let current1;
    day1 = new Day({
        props: {
            date: /*day*/ ctx1[21],
            today: /*today*/ ctx1[10],
            displayedMonth: /*displayedMonth*/ ctx1[0],
            onClick: /*onClickDay*/ ctx1[6],
            onContextMenu: /*onContextMenuDay*/ ctx1[4],
            onHover: /*onHoverDay*/ ctx1[2],
            metadata: getDailyMetadata(/*sources*/ ctx1[8], /*day*/ ctx1[21], /*today*/ ctx1[10]),
            selectedId: /*selectedId*/ ctx1[9]
        }
    });
    return {
        key: key_11,
        first: null,
        c () {
            first1 = empty();
            create_component(day1.$$.fragment);
            this.first = first1;
        },
        m (target1, anchor1) {
            insert(target1, first1, anchor1);
            mount_component(day1, target1, anchor1);
            current1 = true;
        },
        p (new_ctx1, dirty1) {
            ctx1 = new_ctx1;
            const day_changes1 = {};
            if (dirty1 & /*month*/ 16384) day_changes1.date = /*day*/ ctx1[21];
            if (dirty1 & /*today*/ 1024) day_changes1.today = /*today*/ ctx1[10];
            if (dirty1 & /*displayedMonth*/ 1) day_changes1.displayedMonth = /*displayedMonth*/ ctx1[0];
            if (dirty1 & /*onClickDay*/ 64) day_changes1.onClick = /*onClickDay*/ ctx1[6];
            if (dirty1 & /*onContextMenuDay*/ 16) day_changes1.onContextMenu = /*onContextMenuDay*/ ctx1[4];
            if (dirty1 & /*onHoverDay*/ 4) day_changes1.onHover = /*onHoverDay*/ ctx1[2];
            if (dirty1 & /*sources, month, today*/ 17664) day_changes1.metadata = getDailyMetadata(/*sources*/ ctx1[8], /*day*/ ctx1[21], /*today*/ ctx1[10]);
            if (dirty1 & /*selectedId*/ 512) day_changes1.selectedId = /*selectedId*/ ctx1[9];
            day1.$set(day_changes1);
        },
        i (local1) {
            if (current1) return;
            transition_in(day1.$$.fragment, local1);
            current1 = true;
        },
        o (local1) {
            transition_out(day1.$$.fragment, local1);
            current1 = false;
        },
        d (detaching1) {
            if (detaching1) detach(first1);
            destroy_component(day1, detaching1);
        }
    };
}
// (73:6) {#each month as week (week.weekNum)}
function create_each_block(key_11, ctx1) {
    let tr1;
    let t01;
    let each_blocks1 = [];
    let each_1_lookup1 = new Map();
    let t11;
    let current1;
    let if_block2 = /*showWeekNums*/ ctx1[1] && create_if_block(ctx1);
    let each_value_11 = /*week*/ ctx1[18].days;
    const get_key1 = (ctx1)=>/*day*/ ctx1[21].format();
    for(let i1 = 0; i1 < each_value_11.length; i1 += 1){
        let child_ctx1 = get_each_context_1(ctx1, each_value_11, i1);
        let key1 = get_key1(child_ctx1);
        each_1_lookup1.set(key1, each_blocks1[i1] = create_each_block_1(key1, child_ctx1));
    }
    return {
        key: key_11,
        first: null,
        c () {
            tr1 = element("tr");
            if (if_block2) if_block2.c();
            t01 = space();
            for(let i1 = 0; i1 < each_blocks1.length; i1 += 1){
                each_blocks1[i1].c();
            }
            t11 = space();
            this.first = tr1;
        },
        m (target1, anchor1) {
            insert(target1, tr1, anchor1);
            if (if_block2) if_block2.m(tr1, null);
            append(tr1, t01);
            for(let i1 = 0; i1 < each_blocks1.length; i1 += 1){
                each_blocks1[i1].m(tr1, null);
            }
            append(tr1, t11);
            current1 = true;
        },
        p (new_ctx1, dirty1) {
            ctx1 = new_ctx1;
            if (/*showWeekNums*/ ctx1[1]) {
                if (if_block2) {
                    if_block2.p(ctx1, dirty1);
                    if (dirty1 & /*showWeekNums*/ 2) {
                        transition_in(if_block2, 1);
                    }
                } else {
                    if_block2 = create_if_block(ctx1);
                    if_block2.c();
                    transition_in(if_block2, 1);
                    if_block2.m(tr1, t01);
                }
            } else if (if_block2) {
                group_outros();
                transition_out(if_block2, 1, 1, ()=>{
                    if_block2 = null;
                });
                check_outros();
            }
            if (dirty1 & /*month, today, displayedMonth, onClickDay, onContextMenuDay, onHoverDay, getDailyMetadata, sources, selectedId*/ 18261) {
                each_value_11 = /*week*/ ctx1[18].days;
                group_outros();
                each_blocks1 = update_keyed_each(each_blocks1, dirty1, get_key1, 1, ctx1, each_value_11, each_1_lookup1, tr1, outro_and_destroy_block, create_each_block_1, t11, get_each_context_1);
                check_outros();
            }
        },
        i (local1) {
            if (current1) return;
            transition_in(if_block2);
            for(let i1 = 0; i1 < each_value_11.length; i1 += 1){
                transition_in(each_blocks1[i1]);
            }
            current1 = true;
        },
        o (local1) {
            transition_out(if_block2);
            for(let i1 = 0; i1 < each_blocks1.length; i1 += 1){
                transition_out(each_blocks1[i1]);
            }
            current1 = false;
        },
        d (detaching1) {
            if (detaching1) detach(tr1);
            if (if_block2) if_block2.d();
            for(let i1 = 0; i1 < each_blocks1.length; i1 += 1){
                each_blocks1[i1].d();
            }
        }
    };
}
function create_fragment(ctx1) {
    let div3;
    let nav1;
    let t01;
    let table1;
    let colgroup1;
    let t11;
    let t21;
    let thead1;
    let tr1;
    let t31;
    let t41;
    let tbody1;
    let each_blocks1 = [];
    let each2_lookup1 = new Map();
    let current1;
    nav1 = new Nav({
        props: {
            today: /*today*/ ctx1[10],
            displayedMonth: /*displayedMonth*/ ctx1[0],
            incrementDisplayedMonth: /*incrementDisplayedMonth*/ ctx1[11],
            decrementDisplayedMonth: /*decrementDisplayedMonth*/ ctx1[12],
            resetDisplayedMonth: /*resetDisplayedMonth*/ ctx1[13]
        }
    });
    let if_block01 = /*showWeekNums*/ ctx1[1] && create_if_block_2();
    let each_value_31 = /*month*/ ctx1[14][1].days;
    let each_blocks_21 = [];
    for(let i1 = 0; i1 < each_value_31.length; i1 += 1){
        each_blocks_21[i1] = create_each_block_3(get_each_context_3(ctx1, each_value_31, i1));
    }
    let if_block11 = /*showWeekNums*/ ctx1[1] && create_if_block_1();
    let each_value_21 = /*daysOfWeek*/ ctx1[15];
    let each_blocks_11 = [];
    for(let i1 = 0; i1 < each_value_21.length; i1 += 1){
        each_blocks_11[i1] = create_each_block_2(get_each_context_2(ctx1, each_value_21, i1));
    }
    let each_value1 = /*month*/ ctx1[14];
    const get_key1 = (ctx1)=>/*week*/ ctx1[18].weekNum;
    for(let i1 = 0; i1 < each_value1.length; i1 += 1){
        let child_ctx1 = get_each_context(ctx1, each_value1, i1);
        let key1 = get_key1(child_ctx1);
        each2_lookup1.set(key1, each_blocks1[i1] = create_each_block(key1, child_ctx1));
    }
    return {
        c () {
            div3 = element("div");
            create_component(nav1.$$.fragment);
            t01 = space();
            table1 = element("table");
            colgroup1 = element("colgroup");
            if (if_block01) if_block01.c();
            t11 = space();
            for(let i1 = 0; i1 < each_blocks_21.length; i1 += 1){
                each_blocks_21[i1].c();
            }
            t21 = space();
            thead1 = element("thead");
            tr1 = element("tr");
            if (if_block11) if_block11.c();
            t31 = space();
            for(let i1 = 0; i1 < each_blocks_11.length; i1 += 1){
                each_blocks_11[i1].c();
            }
            t41 = space();
            tbody1 = element("tbody");
            for(let i1 = 0; i1 < each_blocks1.length; i1 += 1){
                each_blocks1[i1].c();
            }
            attr(table1, "class", "calendar svelte-pcimu8");
            attr(div3, "id", "calendar-container");
            attr(div3, "class", "container svelte-pcimu8");
            toggle_class(div3, "is-mobile", /*isMobile*/ ctx1[16]);
        },
        m (target1, anchor1) {
            insert(target1, div3, anchor1);
            mount_component(nav1, div3, null);
            append(div3, t01);
            append(div3, table1);
            append(table1, colgroup1);
            if (if_block01) if_block01.m(colgroup1, null);
            append(colgroup1, t11);
            for(let i1 = 0; i1 < each_blocks_21.length; i1 += 1){
                each_blocks_21[i1].m(colgroup1, null);
            }
            append(table1, t21);
            append(table1, thead1);
            append(thead1, tr1);
            if (if_block11) if_block11.m(tr1, null);
            append(tr1, t31);
            for(let i1 = 0; i1 < each_blocks_11.length; i1 += 1){
                each_blocks_11[i1].m(tr1, null);
            }
            append(table1, t41);
            append(table1, tbody1);
            for(let i1 = 0; i1 < each_blocks1.length; i1 += 1){
                each_blocks1[i1].m(tbody1, null);
            }
            current1 = true;
        },
        p (ctx1, [dirty1]) {
            const nav_changes1 = {};
            if (dirty1 & /*today*/ 1024) nav_changes1.today = /*today*/ ctx1[10];
            if (dirty1 & /*displayedMonth*/ 1) nav_changes1.displayedMonth = /*displayedMonth*/ ctx1[0];
            nav1.$set(nav_changes1);
            if (/*showWeekNums*/ ctx1[1]) {
                if (if_block01) ;
                else {
                    if_block01 = create_if_block_2();
                    if_block01.c();
                    if_block01.m(colgroup1, t11);
                }
            } else if (if_block01) {
                if_block01.d(1);
                if_block01 = null;
            }
            if (dirty1 & /*isWeekend, month*/ 16384) {
                each_value_31 = /*month*/ ctx1[14][1].days;
                let i1;
                for(i1 = 0; i1 < each_value_31.length; i1 += 1){
                    const child_ctx1 = get_each_context_3(ctx1, each_value_31, i1);
                    if (each_blocks_21[i1]) {
                        each_blocks_21[i1].p(child_ctx1, dirty1);
                    } else {
                        each_blocks_21[i1] = create_each_block_3(child_ctx1);
                        each_blocks_21[i1].c();
                        each_blocks_21[i1].m(colgroup1, null);
                    }
                }
                for(; i1 < each_blocks_21.length; i1 += 1){
                    each_blocks_21[i1].d(1);
                }
                each_blocks_21.length = each_value_31.length;
            }
            if (/*showWeekNums*/ ctx1[1]) {
                if (if_block11) ;
                else {
                    if_block11 = create_if_block_1();
                    if_block11.c();
                    if_block11.m(tr1, t31);
                }
            } else if (if_block11) {
                if_block11.d(1);
                if_block11 = null;
            }
            if (dirty1 & /*daysOfWeek*/ 32768) {
                each_value_21 = /*daysOfWeek*/ ctx1[15];
                let i1;
                for(i1 = 0; i1 < each_value_21.length; i1 += 1){
                    const child_ctx1 = get_each_context_2(ctx1, each_value_21, i1);
                    if (each_blocks_11[i1]) {
                        each_blocks_11[i1].p(child_ctx1, dirty1);
                    } else {
                        each_blocks_11[i1] = create_each_block_2(child_ctx1);
                        each_blocks_11[i1].c();
                        each_blocks_11[i1].m(tr1, null);
                    }
                }
                for(; i1 < each_blocks_11.length; i1 += 1){
                    each_blocks_11[i1].d(1);
                }
                each_blocks_11.length = each_value_21.length;
            }
            if (dirty1 & /*month, today, displayedMonth, onClickDay, onContextMenuDay, onHoverDay, getDailyMetadata, sources, selectedId, getWeeklyMetadata, onClickWeek, onContextMenuWeek, onHoverWeek, showWeekNums*/ 18431) {
                each_value1 = /*month*/ ctx1[14];
                group_outros();
                each_blocks1 = update_keyed_each(each_blocks1, dirty1, get_key1, 1, ctx1, each_value1, each2_lookup1, tbody1, outro_and_destroy_block, create_each_block, null, get_each_context);
                check_outros();
            }
        },
        i (local1) {
            if (current1) return;
            transition_in(nav1.$$.fragment, local1);
            for(let i1 = 0; i1 < each_value1.length; i1 += 1){
                transition_in(each_blocks1[i1]);
            }
            current1 = true;
        },
        o (local1) {
            transition_out(nav1.$$.fragment, local1);
            for(let i1 = 0; i1 < each_blocks1.length; i1 += 1){
                transition_out(each_blocks1[i1]);
            }
            current1 = false;
        },
        d (detaching1) {
            if (detaching1) detach(div3);
            destroy_component(nav1);
            if (if_block01) if_block01.d();
            destroy_each(each_blocks_21, detaching1);
            if (if_block11) if_block11.d();
            destroy_each(each_blocks_11, detaching1);
            for(let i1 = 0; i1 < each_blocks1.length; i1 += 1){
                each_blocks1[i1].d();
            }
        }
    };
}
function instance($$self1, $$props1, $$invalidate1) {
    let { localeData: localeData1 } = $$props1;
    let { showWeekNums: showWeekNums1 = false } = $$props1;
    let { onHoverDay: onHoverDay1 } = $$props1;
    let { onHoverWeek: onHoverWeek1 } = $$props1;
    let { onContextMenuDay: onContextMenuDay1 } = $$props1;
    let { onContextMenuWeek: onContextMenuWeek1 } = $$props1;
    let { onClickDay: onClickDay1 } = $$props1;
    let { onClickWeek: onClickWeek1 } = $$props1;
    let { sources: sources1 = [] } = $$props1;
    let { selectedId: selectedId1 } = $$props1;
    let { today: today1 = window.moment() } = $$props1;
    let { displayedMonth: displayedMonth1 = today1 } = $$props1;
    let month1;
    let daysOfWeek1;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let isMobile1 = window.app.isMobile;
    function incrementDisplayedMonth1() {
        $$invalidate1(0, displayedMonth1 = displayedMonth1.clone().add(1, "month"));
    }
    function decrementDisplayedMonth1() {
        $$invalidate1(0, displayedMonth1 = displayedMonth1.clone().subtract(1, "month"));
    }
    function resetDisplayedMonth1() {
        $$invalidate1(0, displayedMonth1 = today1.clone());
    }
    $$self1.$$set = ($$props1)=>{
        if ("localeData" in $$props1) $$invalidate1(17, localeData1 = $$props1.localeData);
        if ("showWeekNums" in $$props1) $$invalidate1(1, showWeekNums1 = $$props1.showWeekNums);
        if ("onHoverDay" in $$props1) $$invalidate1(2, onHoverDay1 = $$props1.onHoverDay);
        if ("onHoverWeek" in $$props1) $$invalidate1(3, onHoverWeek1 = $$props1.onHoverWeek);
        if ("onContextMenuDay" in $$props1) $$invalidate1(4, onContextMenuDay1 = $$props1.onContextMenuDay);
        if ("onContextMenuWeek" in $$props1) $$invalidate1(5, onContextMenuWeek1 = $$props1.onContextMenuWeek);
        if ("onClickDay" in $$props1) $$invalidate1(6, onClickDay1 = $$props1.onClickDay);
        if ("onClickWeek" in $$props1) $$invalidate1(7, onClickWeek1 = $$props1.onClickWeek);
        if ("sources" in $$props1) $$invalidate1(8, sources1 = $$props1.sources);
        if ("selectedId" in $$props1) $$invalidate1(9, selectedId1 = $$props1.selectedId);
        if ("today" in $$props1) $$invalidate1(10, today1 = $$props1.today);
        if ("displayedMonth" in $$props1) $$invalidate1(0, displayedMonth1 = $$props1.displayedMonth);
    };
    $$self1.$$.update = ()=>{
        if ($$self1.$$.dirty & /*displayedMonth, localeData*/ 131073) {
            $$invalidate1(14, month1 = getMonth(displayedMonth1, localeData1));
        }
        if ($$self1.$$.dirty & /*today, localeData*/ 132096) {
            $$invalidate1(15, daysOfWeek1 = getDaysOfWeek(today1, localeData1));
        }
    };
    return [
        displayedMonth1,
        showWeekNums1,
        onHoverDay1,
        onHoverWeek1,
        onContextMenuDay1,
        onContextMenuWeek1,
        onClickDay1,
        onClickWeek1,
        sources1,
        selectedId1,
        today1,
        incrementDisplayedMonth1,
        decrementDisplayedMonth1,
        resetDisplayedMonth1,
        month1,
        daysOfWeek1,
        isMobile1,
        localeData1
    ];
}
class Calendar extends SvelteComponent {
    constructor(options1){
        super();
        if (!document.getElementById("svelte-pcimu8-style")) add_css();
        init(this, options1, instance, create_fragment, not_equal, {
            localeData: 17,
            showWeekNums: 1,
            onHoverDay: 2,
            onHoverWeek: 3,
            onContextMenuDay: 4,
            onContextMenuWeek: 5,
            onClickDay: 6,
            onClickWeek: 7,
            sources: 8,
            selectedId: 9,
            today: 10,
            displayedMonth: 0,
            incrementDisplayedMonth: 11,
            decrementDisplayedMonth: 12,
            resetDisplayedMonth: 13
        });
    }
    get incrementDisplayedMonth() {
        return this.$$.ctx[11];
    }
    get decrementDisplayedMonth() {
        return this.$$.ctx[12];
    }
    get resetDisplayedMonth() {
        return this.$$.ctx[13];
    }
}
/** Generic code for embedded Dataviews. */ class DataviewRefreshableRenderer extends obsidian.MarkdownRenderChild {
    constructor(container1, index1, app1, settings1){
        super(container1);
        this.container = container1;
        this.index = index1;
        this.app = app1;
        this.settings = settings1;
        this.maybeRefresh = ()=>{
            // If the index revision has changed recently, then queue a reload.
            // But only if we're mounted in the DOM and auto-refreshing is active.
            if (this.lastReload != this.index.revision && this.container.isShown() && this.settings.refreshEnabled) {
                this.lastReload = this.index.revision;
                this.render();
            }
        };
        this.lastReload = 0;
    }
    onload() {
        this.render();
        this.lastReload = this.index.revision;
        // Refresh after index changes stop.
        this.registerEvent(this.app.workspace.on("dataview:refresh-views", this.maybeRefresh));
        // ...or when the DOM is shown (sidebar expands, tab selected, nodes scrolled into view).
        this.register(this.container.onNodeInserted(this.maybeRefresh));
    }
}
class DataviewCalendarRenderer extends DataviewRefreshableRenderer {
    constructor(query1, container1, index1, origin1, settings1, app1){
        super(container1, index1, app1, settings1);
        this.query = query1;
        this.container = container1;
        this.index = index1;
        this.origin = origin1;
        this.settings = settings1;
        this.app = app1;
    }
    async render() {
        var _a1;
        this.container.innerHTML = "";
        let maybeResult1 = await asyncTryOrPropogate(()=>executeCalendar(this.query, this.index, this.origin, this.settings));
        if (!maybeResult1.successful) {
            renderErrorPre(this.container, "Dataview: " + maybeResult1.error);
            return;
        } else if (maybeResult1.value.data.length == 0 && this.settings.warnOnEmptyResult) {
            renderErrorPre(this.container, "Dataview: Query returned 0 results.");
            return;
        }
        let dateMap1 = new Map();
        for (let data1 of maybeResult1.value.data){
            const dot1 = {
                color: "default",
                className: "note",
                isFilled: true,
                link: data1.link
            };
            const d1 = data1.date.toFormat("yyyyLLdd");
            if (!dateMap1.has(d1)) {
                dateMap1.set(d1, [
                    dot1
                ]);
            } else {
                (_a1 = dateMap1.get(d1)) === null || _a1 === void 0 ? void 0 : _a1.push(dot1);
            }
        }
        const querySource1 = {
            getDailyMetadata: async (date1)=>{
                return {
                    dots: dateMap1.get(date1.format("YYYYMMDD")) || []
                };
            }
        };
        const sources1 = [
            querySource1
        ];
        const renderer1 = this;
        this.calendar = new Calendar({
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            target: this.container,
            props: {
                onHoverDay (date1, targetEl1) {
                    const vals1 = dateMap1.get(date1.format("YYYYMMDD"));
                    if (!vals1 || vals1.length == 0) {
                        return;
                    }
                    if ((vals1 === null || vals1 === void 0 ? void 0 : vals1.length) == 0) {
                        return;
                    }
                    renderer1.app.workspace.trigger("link-hover", {}, targetEl1, vals1[0].link.path, vals1[0].link.path);
                },
                onClickDay: async (date1)=>{
                    const vals1 = dateMap1.get(date1.format("YYYYMMDD"));
                    if (!vals1 || vals1.length == 0) {
                        return;
                    }
                    if ((vals1 === null || vals1 === void 0 ? void 0 : vals1.length) == 0) {
                        return;
                    }
                    const file1 = renderer1.app.metadataCache.getFirstLinkpathDest(vals1[0].link.path, "");
                    if (file1 == null) {
                        return;
                    }
                    const leaf1 = renderer1.app.workspace.getUnpinnedLeaf();
                    await leaf1.openFile(file1, {
                        active: true
                    });
                },
                showWeekNums: false,
                sources: sources1
            }
        });
    }
    onClose() {
        if (this.calendar) {
            this.calendar.$destroy();
        }
        return Promise.resolve();
    }
}
/** Fancy wrappers for the JavaScript API, used both by external plugins AND by the dataview javascript view. */ /** Asynchronous API calls related to file / system IO. */ class DataviewInlineIOApi {
    constructor(api1, currentFile1){
        this.api = api1;
        this.currentFile = currentFile1;
    }
    /** Load the contents of a CSV asynchronously, returning a data array of rows (or undefined if it does not exist). */ async csv(path1, originFile1) {
        return this.api.csv(path1, originFile1 || this.currentFile);
    }
    /** Asynchronously load the contents of any link or path in an Obsidian vault. */ async load(path1, originFile1) {
        return this.api.load(path1, originFile1 || this.currentFile);
    }
    /** Normalize a link or path relative to an optional origin file. Returns a textual fully-qualified-path. */ normalize(path1, originFile1) {
        return this.api.normalize(path1, originFile1 || this.currentFile);
    }
}
class DataviewInlineApi {
    constructor(api1, component1, container1, currentFilePath1){
        var _a1, _b1;
        /** Value utilities which allow for type-checking and comparisons. */ this.value = Values;
        /** Widget utility functions for creating built-in widgets. */ this.widget = Widgets;
        /** Re-exporting of luxon for people who can't easily require it. Sorry! */ this.luxon = Luxon;
        this.index = api1.index;
        this.app = api1.app;
        this.settings = api1.settings;
        this.component = component1;
        this.container = container1;
        this.currentFilePath = currentFilePath1;
        this.api = api1;
        this.io = new DataviewInlineIOApi(this.api.io, this.currentFilePath);
        // Set up the evaluation context with variables from the current file.
        let fileMeta1 = (_b1 = (_a1 = this.index.pages.get(this.currentFilePath)) === null || _a1 === void 0 ? void 0 : _a1.serialize(this.index)) !== null && _b1 !== void 0 ? _b1 : {};
        this.evaluationContext = new Context(defaultLinkHandler(this.index, this.currentFilePath), this.settings, {
            this: fileMeta1
        });
        this.func = Functions.bindAll(DEFAULT_FUNCTIONS, this.evaluationContext);
    }
    /////////////////////////////
    // Index + Data Collection //
    /////////////////////////////
    /** Return an array of paths (as strings) corresponding to pages which match the query. */ pagePaths(query1) {
        return this.api.pagePaths(query1, this.currentFilePath);
    }
    /** Map a page path to the actual data contained within that page. */ page(path1) {
        return this.api.page(path1, this.currentFilePath);
    }
    /** Return an array of page objects corresponding to pages which match the query. */ pages(query1) {
        return this.api.pages(query1, this.currentFilePath);
    }
    /** Return the information about the current page. */ current() {
        return this.page(this.currentFilePath);
    }
    ///////////////////////////////
    // Dataview Query Evaluation //
    ///////////////////////////////
    /** Execute a Dataview query, returning the results in programmatic form. */ async query(source1, originFile1, settings1) {
        return this.api.query(source1, originFile1 !== null && originFile1 !== void 0 ? originFile1 : this.currentFilePath, settings1);
    }
    /** Error-throwing version of {@link query}. */ async tryQuery(source1, originFile1, settings1) {
        return this.api.tryQuery(source1, originFile1 !== null && originFile1 !== void 0 ? originFile1 : this.currentFilePath, settings1);
    }
    /** Execute a Dataview query, returning the results in Markdown. */ async queryMarkdown(source1, originFile1, settings1) {
        return this.api.queryMarkdown(source1, originFile1 !== null && originFile1 !== void 0 ? originFile1 : this.currentFilePath, settings1);
    }
    /** Error-throwing version of {@link queryMarkdown}. */ async tryQueryMarkdown(source1, originFile1, settings1) {
        return this.api.tryQueryMarkdown(source1, originFile1 !== null && originFile1 !== void 0 ? originFile1 : this.currentFilePath, settings1);
    }
    /**
     * Evaluate a dataview expression (like '2 + 2' or 'link("hello")'), returning the evaluated result.
     * This takes an optional second argument which provides definitions for variables, such as:
     *
     * ```
     * dv.evaluate("x + 6", { x: 2 }) = 8
     * dv.evaluate('link(target)', { target: "Okay" }) = [[Okay]]
     * ```
     *
     * Note that `this` is implicitly available and refers to the current file.
     *
     * This method returns a Result type instead of throwing an error; you can check the result of the
     * execution via `result.successful` and obtain `result.value` or `result.error` resultingly. If
     * you'd rather this method throw on an error, use `dv.tryEvaluate`.
     */ evaluate(expression1, context1) {
        let field1 = EXPRESSION.field.parse(expression1);
        if (!field1.status) return Result.failure(`Failed to parse expression "${expression1}"`);
        return this.evaluationContext.evaluate(field1.value, context1);
    }
    /** Error-throwing version of `dv.evaluate`. */ tryEvaluate(expression1, context1) {
        return this.evaluate(expression1, context1).orElseThrow();
    }
    /** Execute a Dataview query and embed it into the current view. */ async execute(source1) {
        this.api.execute(source1, this.container, this.component, this.currentFilePath);
    }
    /** Execute a DataviewJS query and embed it into the current view. */ async executeJs(code1) {
        this.api.executeJs(code1, this.container, this.component, this.currentFilePath);
    }
    /////////////
    // Utility //
    /////////////
    /**
     * Convert an input element or array into a Dataview data-array. If the input is already a data array,
     * it is returned unchanged.
     */ array(raw1) {
        return this.api.array(raw1);
    }
    /** Return true if theg given value is a javascript array OR a dataview data array. */ isArray(raw1) {
        return this.api.isArray(raw1);
    }
    /** Return true if the given value is a dataview data array; this returns FALSE for plain JS arrays. */ isDataArray(raw1) {
        return DataArray.isDataArray(raw1);
    }
    /** Create a dataview file link to the given path. */ fileLink(path1, embed1 = false, display1) {
        return Link.file(path1, embed1, display1);
    }
    /** Create a dataview section link to the given path. */ sectionLink(path1, section1, embed1 = false, display1) {
        return Link.header(path1, section1, embed1, display1);
    }
    /** Create a dataview block link to the given path. */ blockLink(path1, blockId1, embed1 = false, display1) {
        return Link.block(path1, blockId1, embed1, display1);
    }
    /** Attempt to extract a date from a string, link or date. */ date(pathlike1) {
        return this.api.date(pathlike1);
    }
    /** Attempt to extract a duration from a string or duration. */ duration(dur1) {
        return this.api.duration(dur1);
    }
    /** Parse a raw textual value into a complex Dataview type, if possible. */ parse(value1) {
        return this.api.parse(value1);
    }
    /** Convert a basic JS type into a Dataview type by parsing dates, links, durations, and so on. */ literal(value1) {
        return this.api.literal(value1);
    }
    /** Deep clone the given literal, returning a new literal which is independent of the original. */ clone(value1) {
        return Values.deepCopy(value1);
    }
    /**
     * Compare two arbitrary JavaScript values using Dataview's default comparison rules. Returns a negative value if
     * a < b, 0 if a = b, and a positive value if a > b.
     */ compare(a1, b1) {
        return Values.compareValue(a1, b1);
    }
    /** Return true if the two given JavaScript values are equal using Dataview's default comparison rules. */ equal(a1, b1) {
        return this.compare(a1, b1) == 0;
    }
    /////////////////////////
    // Rendering Functions //
    /////////////////////////
    /** Render an HTML element, containing arbitrary text. */ el(el1, text1, { container: container1 = this.container, ...options1 } = {}) {
        let wrapped1 = Values.wrapValue(text1);
        if (wrapped1 === null || wrapped1 === undefined) {
            return container1.createEl(el1, Object.assign({
                text: text1
            }, options1));
        }
        let _el1 = container1.createEl(el1, options1);
        renderValue(wrapped1.value, _el1, this.currentFilePath, this.component, this.settings, true);
        return _el1;
    }
    /** Render an HTML header; the level can be anything from 1 - 6. */ header(level1, text1, options1) {
        let header1 = {
            1: "h1",
            2: "h2",
            3: "h3",
            4: "h4",
            5: "h5",
            6: "h6"
        }[level1];
        if (!header1) throw Error(`Unrecognized level '${level1}' (expected 1, 2, 3, 4, 5, or 6)`);
        return this.el(header1, text1, options1);
    }
    /** Render an HTML paragraph, containing arbitrary text. */ paragraph(text1, options1) {
        return this.el("p", text1, options1);
    }
    /** Render an inline span, containing arbitrary text. */ span(text1, options1) {
        return this.el("span", text1, options1);
    }
    /**
     * Render HTML from the output of a template "view" saved as a file in the vault.
     * Takes a filename and arbitrary input data.
     */ async view(viewName1, input1) {
        // Look for `${viewName}.js` first, then for `${viewName}/view.js`.
        let simpleViewFile1 = this.app.metadataCache.getFirstLinkpathDest(viewName1 + ".js", this.currentFilePath);
        if (simpleViewFile1) {
            let contents1 = await this.app.vault.read(simpleViewFile1);
            if (contents1.contains("await")) contents1 = "(async () => { " + contents1 + " })()";
            let func1 = new Function("dv", "input", contents1);
            try {
                // This may directly render, in which case it will likely return undefined or null.
                let result1 = await Promise.resolve(func1(this, input1));
                if (result1) await renderValue(result1, this.container, this.currentFilePath, this.component, this.settings, true);
            } catch (ex1) {
                renderErrorPre(this.container, `Dataview: Failed to execute view '${simpleViewFile1.path}'.\n\n${ex1}`);
            }
            return;
        }
        // No `{viewName}.js`, so look for a folder instead.
        let viewPath1 = `${viewName1}/view.js`;
        let viewFile1 = this.app.metadataCache.getFirstLinkpathDest(viewPath1, this.currentFilePath);
        if (!viewFile1) {
            renderErrorPre(this.container, `Dataview: custom view not found for '${viewPath1}' or '${viewName1}.js'.`);
            return;
        }
        let viewContents1 = await this.app.vault.read(viewFile1);
        if (viewContents1.contains("await")) viewContents1 = "(async () => { " + viewContents1 + " })()";
        let viewFunction1 = new Function("dv", "input", viewContents1);
        try {
            let result1 = await Promise.resolve(viewFunction1(this, input1));
            if (result1) await renderValue(result1, this.container, this.currentFilePath, this.component, this.settings, true);
        } catch (ex1) {
            renderErrorPre(this.container, `Dataview: Error while executing view '${viewFile1.path}'.\n\n${ex1}`);
        }
        // Check for optional CSS.
        let cssFile1 = this.app.metadataCache.getFirstLinkpathDest(`${viewName1}/view.css`, this.currentFilePath);
        if (!cssFile1) return;
        let cssContents1 = await this.app.vault.read(cssFile1);
        this.container.createEl("style", {
            text: cssContents1,
            attr: {
                scope: " "
            }
        });
    }
    /** Render a dataview list of the given values. */ list(values1) {
        return this.api.list(values1, this.container, this.component, this.currentFilePath);
    }
    /** Render a dataview table with the given headers, and the 2D array of values. */ table(headers1, values1) {
        return this.api.table(headers1, values1, this.container, this.component, this.currentFilePath);
    }
    /** Render a dataview task view with the given tasks. */ taskList(tasks1, groupByFile1 = true) {
        return this.api.taskList(tasks1, groupByFile1, this.container, this.component, this.currentFilePath);
    }
    ////////////////////////
    // Markdown Rendering //
    ////////////////////////
    /** Render a table directly to markdown, returning the markdown. */ markdownTable(headers1, values1, settings1) {
        return this.api.markdownTable(headers1, values1, settings1);
    }
    /** Render a list directly to markdown, returning the markdown. */ markdownList(values1, settings1) {
        return this.api.markdownList(values1, settings1);
    }
    /** Render at ask list directly to markdown, returning the markdown. */ markdownTaskList(values1, settings1) {
        return this.api.markdownTaskList(values1, settings1);
    }
}
/**
 * Evaluate a script where 'this' for the script is set to the given context. Allows you to define global variables.
 */ function evalInContext(script, context) {
    return (function() {
        return eval(script);
    }).call(context);
}
/**
 * Evaluate a script possibly asynchronously, if the script contains `async/await` blocks.
 */ async function asyncEvalInContext(script1, context1) {
    if (script1.includes("await")) {
        return evalInContext("(async () => { " + script1 + " })()", context1);
    } else {
        return Promise.resolve(evalInContext(script1, context1));
    }
}
class DataviewJSRenderer extends DataviewRefreshableRenderer {
    constructor(api1, script1, container1, origin1){
        super(container1, api1.index, api1.app, api1.settings);
        this.api = api1;
        this.script = script1;
        this.container = container1;
        this.origin = origin1;
    }
    async render() {
        this.container.innerHTML = "";
        if (!this.settings.enableDataviewJs) {
            this.containerEl.innerHTML = "";
            renderErrorPre(this.container, "Dataview JS queries are disabled. You can enable them in the Dataview settings.");
            return;
        }
        // Assume that the code is javascript, and try to eval it.
        try {
            await asyncEvalInContext(DataviewJSRenderer.PREAMBLE + this.script, new DataviewInlineApi(this.api, this, this.container, this.origin));
        } catch (e1) {
            this.containerEl.innerHTML = "";
            renderErrorPre(this.container, "Evaluation Error: " + e1.stack);
        }
    }
}
DataviewJSRenderer.PREAMBLE = "const dataview = this;const dv = this;";
/** Inline JS renderer accessible using '=$' by default. */ class DataviewInlineJSRenderer extends DataviewRefreshableRenderer {
    constructor(api1, script1, container1, target1, origin1){
        super(container1, api1.index, api1.app, api1.settings);
        this.api = api1;
        this.script = script1;
        this.container = container1;
        this.target = target1;
        this.origin = origin1;
    }
    async render() {
        var _a1;
        (_a1 = this.errorbox) === null || _a1 === void 0 ? void 0 : _a1.remove();
        if (!this.settings.enableDataviewJs || !this.settings.enableInlineDataviewJs) {
            let temp1 = document.createElement("span");
            temp1.innerText = "(disabled; enable in settings)";
            this.target.replaceWith(temp1);
            this.target = temp1;
            return;
        }
        // Assume that the code is javascript, and try to eval it.
        try {
            let temp1 = document.createElement("span");
            let result1 = await asyncEvalInContext(DataviewInlineJSRenderer.PREAMBLE + this.script, new DataviewInlineApi(this.api, this, temp1, this.origin));
            this.target.replaceWith(temp1);
            this.target = temp1;
            if (result1 === undefined) return;
            renderValue(result1, temp1, this.origin, this, this.settings, false);
        } catch (e1) {
            this.errorbox = this.container.createEl("div");
            renderErrorPre(this.errorbox, "Dataview (for inline JS query '" + this.script + "'): " + e1);
        }
    }
}
DataviewInlineJSRenderer.PREAMBLE = "const dataview = this;const dv=this;";
////////////
// Tables //
////////////
/** Render a table of literals to Markdown. */ function markdownTable(headers1, values1, settings1) {
    if (values1.length > 0 && headers1.length != values1[0].length) throw new Error(`The number of headers (${headers1.length}) must match the number of columns (${values1[0].length})`);
    settings1 = settings1 !== null && settings1 !== void 0 ? settings1 : DEFAULT_SETTINGS;
    const mvalues1 = [];
    const maxLengths1 = Array.from(headers1, (v4)=>escapeTable(v4).length);
    // Pre-construct the table in memory so we can size columns.
    for(let row1 = 0; row1 < values1.length; row1++){
        const current1 = [];
        for(let col1 = 0; col1 < values1[row1].length; col1++){
            const text1 = tableLiteral(values1[row1][col1], settings1.allowHtml, settings1);
            current1.push(text1);
            maxLengths1[col1] = Math.max(maxLengths1[col1], text1.length);
        }
        mvalues1.push(current1);
    }
    // Then construct the actual table...
    // Append the header fields first.
    let table1 = `| ${headers1.map((v4, i1)=>padright(escapeTable(v4), " ", maxLengths1[i1])).join(" | ")} |\n`;
    // Then the separating column.
    table1 += `| ${maxLengths1.map((i1)=>padright("", "-", i1)).join(" | ")} |\n`;
    // Then the data colunns.
    for(let row1 = 0; row1 < values1.length; row1++){
        table1 += `| ${mvalues1[row1].map((v4, i1)=>padright(v4, " ", maxLengths1[i1])).join(" | ")} |\n`;
    }
    return table1;
}
/** Convert a value to a Markdown-friendly string. */ function tableLiteral(value1, allowHtml1 = true, settings1) {
    return escapeTable(rawTableLiteral(value1, allowHtml1, settings1));
}
/** Convert a value to a Markdown-friendly string; does not do escaping. */ function rawTableLiteral(value1, allowHtml1 = true, settings1) {
    if (!allowHtml1) return Values.toString(value1, settings1);
    if (Values.isArray(value1)) {
        return `<ul>${value1.map((v4)=>"<li>" + tableLiteral(v4, allowHtml1, settings1) + "</li>").join("")}</ul>`;
    } else if (Values.isObject(value1)) {
        const inner1 = Object.entries(value1).map(([k3, v4])=>{
            return `<li><b>${tableLiteral(k3, allowHtml1, settings1)}</b>: ${tableLiteral(v4, allowHtml1, settings1)}</li>`;
        }).join("");
        return `<ul>${inner1}</ul>`;
    } else {
        return Values.toString(value1, settings1);
    }
}
/** Don't need to import a library for this one... */ function padright(text1, padding1, length1) {
    if (text1.length >= length1) return text1;
    return text1 + padding1.repeat(length1 - text1.length);
}
/** Escape bars inside table content to prevent it from messing up table rows. */ function escapeTable(text1) {
    return text1.split(/(?!\\)\|/i).join("\\|");
}
///////////
// Lists //
///////////
/** Render a list of literal elements to a markdown list. */ function markdownList(values1, settings1) {
    return markdownListRec(values1, settings1, 0);
}
/** Internal recursive function which renders markdown lists. */ function markdownListRec(input1, settings1, depth1 = 0) {
    if (Values.isArray(input1)) {
        let result1 = depth1 == 0 ? "" : "\n";
        for (let value1 of input1){
            result1 += "    ".repeat(depth1) + "- ";
            result1 += markdownListRec(value1, settings1, depth1);
            result1 += "\n";
        }
        return result1;
    } else if (Values.isObject(input1)) {
        let result1 = depth1 == 0 ? "" : "\n";
        for (let [key1, value1] of Object.entries(input1)){
            result1 += "    ".repeat(depth1) + "- ";
            result1 += Values.toString(key1) + ": ";
            result1 += markdownListRec(value1, settings1, depth1);
            result1 += "\n";
        }
        return result1;
    } else if (Values.isWidget(input1) && Widgets.isListPair(input1)) {
        return `${Values.toString(input1.key)}: ${markdownListRec(input1.value, settings1, depth1 + 1)}`;
    }
    return Values.toString(input1);
}
///////////
// Tasks //
///////////
/** Render the result of a task query to markdown. */ function markdownTaskList(tasks1, settings1, depth1 = 0) {
    var _a1, _b1;
    if (Groupings.isGrouping(tasks1)) {
        let result1 = "";
        for (let element1 of tasks1){
            result1 += "#".repeat(depth1 + 1) + " " + Values.toString(element1.key) + "\n\n";
            result1 += markdownTaskList(element1.rows, settings1, depth1 + 1);
        }
        return result1;
    } else {
        // Remove task line duplicates if present to match `taskList()` behavior.
        const [dedupTasks1, _5] = nestItems(tasks1);
        let result1 = "";
        for (let element1 of dedupTasks1){
            result1 += "    ".repeat(depth1) + "- ";
            if (element1.task) {
                result1 += `[${element1.status}] ${((_a1 = element1.visual) !== null && _a1 !== void 0 ? _a1 : element1.text).split("\n").join(" ")}\n`;
            } else {
                result1 += `${((_b1 = element1.visual) !== null && _b1 !== void 0 ? _b1 : element1.text).split("\n").join(" ")}\n`;
            }
            result1 += markdownTaskList(element1.children, settings1, depth1 + 1);
        }
        return result1;
    }
}
/** The general, externally accessible plugin API (available at `app.plugins.plugins.dataview.api` or as global `DataviewAPI`). */ /** Asynchronous API calls related to file / system IO. */ class DataviewIOApi {
    constructor(api1){
        this.api = api1;
    }
    /** Load the contents of a CSV asynchronously, returning a data array of rows (or undefined if it does not exist). */ async csv(path1, originFile1) {
        if (!Values.isLink(path1) && !Values.isString(path1)) {
            throw Error(`dv.io.csv only handles string or link paths; was provided type '${typeof path1}'.`);
        }
        let data1 = await this.api.index.csv.get(this.normalize(path1, originFile1));
        if (data1.successful) return DataArray.from(data1.value, this.api.settings);
        else throw Error(`Could not find CSV for path '${path1}' (relative to origin '${originFile1 !== null && originFile1 !== void 0 ? originFile1 : "/"}')`);
    }
    /** Asynchronously load the contents of any link or path in an Obsidian vault. */ async load(path1, originFile1) {
        if (!Values.isLink(path1) && !Values.isString(path1)) {
            throw Error(`dv.io.load only handles string or link paths; was provided type '${typeof path1}'.`);
        }
        let existingFile1 = this.api.index.vault.getAbstractFileByPath(this.normalize(path1, originFile1));
        if (!existingFile1 || !(existingFile1 instanceof obsidian.TFile)) return undefined;
        return this.api.index.vault.cachedRead(existingFile1);
    }
    /** Normalize a link or path relative to an optional origin file. Returns a textual fully-qualified-path. */ normalize(path1, originFile1) {
        let realPath1;
        if (Values.isLink(path1)) realPath1 = path1.path;
        else realPath1 = path1;
        return this.api.index.prefix.resolveRelative(realPath1, originFile1);
    }
}
/** Global API for accessing the Dataview API, executing dataview queries, and  */ class DataviewApi {
    constructor(app1, index1, settings1, verNum1){
        this.app = app1;
        this.index = index1;
        this.settings = settings1;
        this.verNum = verNum1;
        /** Value utility functions for comparisons and type-checking. */ this.value = Values;
        /** Widget utility functions for creating built-in widgets. */ this.widget = Widgets;
        /** Re-exporting of luxon for people who can't easily require it. Sorry! */ this.luxon = Luxon;
        /** Utilities to check the current Dataview version and comapre it to SemVer version ranges. */ this.version = (()=>{
            const { verNum: version1 } = this;
            return {
                get current () {
                    return version1;
                },
                compare: (op1, ver1)=>compare(version1, ver1, op1),
                satisfies: (range1)=>satisfies(version1, range1)
            };
        })();
        this.evaluationContext = new Context(defaultLinkHandler(index1, ""), settings1);
        this.func = Functions.bindAll(DEFAULT_FUNCTIONS, this.evaluationContext);
        this.io = new DataviewIOApi(this);
    }
    /////////////////////////////
    // Index + Data Collection //
    /////////////////////////////
    /** Return an array of paths (as strings) corresponding to pages which match the query. */ pagePaths(query1, originFile1) {
        let source1;
        try {
            if (!query1 || query1.trim() === "") source1 = Sources.folder("");
            else source1 = EXPRESSION.source.tryParse(query1);
        } catch (ex1) {
            throw new Error(`Failed to parse query in 'pagePaths': ${ex1}`);
        }
        return matchingSourcePaths(source1, this.index, originFile1).map((s1)=>DataArray.from(s1, this.settings)).orElseThrow();
    }
    /** Map a page path to the actual data contained within that page. */ page(path1, originFile1) {
        if (!(typeof path1 === "string") && !Values.isLink(path1)) {
            throw Error("dv.page only handles string and link paths; was provided type '" + typeof path1 + "'");
        }
        let rawPath1 = path1 instanceof Link ? path1.path : path1;
        let normPath1 = this.app.metadataCache.getFirstLinkpathDest(rawPath1, originFile1 !== null && originFile1 !== void 0 ? originFile1 : "");
        if (!normPath1) return undefined;
        let pageObject1 = this.index.pages.get(normPath1.path);
        if (!pageObject1) return undefined;
        return this._addDataArrays(pageObject1.serialize(this.index));
    }
    /** Return an array of page objects corresponding to pages which match the source query. */ pages(query1, originFile1) {
        return this.pagePaths(query1, originFile1).flatMap((p3)=>{
            let res1 = this.page(p3, originFile1);
            return res1 ? [
                res1
            ] : [];
        });
    }
    /** Remaps important metadata to add data arrays.  */ _addDataArrays(pageObject1) {
        // Remap the "file" metadata entries to be data arrays.
        for (let [key1, value1] of Object.entries(pageObject1.file)){
            if (Array.isArray(value1)) pageObject1.file[key1] = DataArray.wrap(value1, this.settings);
        }
        return pageObject1;
    }
    /////////////
    // Utility //
    /////////////
    /**
     * Convert an input element or array into a Dataview data-array. If the input is already a data array,
     * it is returned unchanged.
     */ array(raw1) {
        if (DataArray.isDataArray(raw1)) return raw1;
        if (Array.isArray(raw1)) return DataArray.wrap(raw1, this.settings);
        return DataArray.wrap([
            raw1
        ], this.settings);
    }
    /** Return true if the given value is a javascript array OR a dataview data array. */ isArray(raw1) {
        return DataArray.isDataArray(raw1) || Array.isArray(raw1);
    }
    /** Return true if the given value is a dataview data array; this returns FALSE for plain JS arrays. */ isDataArray(raw1) {
        return DataArray.isDataArray(raw1);
    }
    /** Create a dataview file link to the given path. */ fileLink(path1, embed1 = false, display1) {
        return Link.file(path1, embed1, display1);
    }
    /** Create a dataview section link to the given path. */ sectionLink(path1, section1, embed1 = false, display1) {
        return Link.header(path1, section1, embed1, display1);
    }
    /** Create a dataview block link to the given path. */ blockLink(path1, blockId1, embed1 = false, display1) {
        return Link.block(path1, blockId1, embed1, display1);
    }
    /** Attempt to extract a date from a string, link or date. */ date(pathlike1) {
        return this.func.date(pathlike1);
    }
    /** Attempt to extract a duration from a string or duration. */ duration(str1) {
        return this.func.dur(str1);
    }
    /** Parse a raw textual value into a complex Dataview type, if possible. */ parse(value1) {
        let raw1 = EXPRESSION.inlineField.parse(value1);
        if (raw1.status) return raw1.value;
        else return value1;
    }
    /** Convert a basic JS type into a Dataview type by parsing dates, links, durations, and so on. */ literal(value1) {
        return parseFrontmatter(value1);
    }
    /** Deep clone the given literal, returning a new literal which is independent of the original. */ clone(value1) {
        return Values.deepCopy(value1);
    }
    /**
     * Compare two arbitrary JavaScript values using Dataview's default comparison rules. Returns a negative value if
     * a < b, 0 if a = b, and a positive value if a > b.
     */ compare(a1, b1) {
        return Values.compareValue(a1, b1, this.evaluationContext.linkHandler.normalize);
    }
    /** Return true if the two given JavaScript values are equal using Dataview's default comparison rules. */ equal(a1, b1) {
        return this.compare(a1, b1) == 0;
    }
    ///////////////////////////////
    // Dataview Query Evaluation //
    ///////////////////////////////
    /**
     * Execute an arbitrary Dataview query, returning a query result which:
     *
     * 1. Indicates the type of query,
     * 2. Includes the raw AST of the parsed query.
     * 3. Includes the output in the form relevant to that query type.
     *
     * List queries will return a list of objects ({ id, value }); table queries return a header array
     * and a 2D array of values; and task arrays return a Grouping<Task> type which allows for recursive
     * task nesting.
     */ async query(source1, originFile1, settings1) {
        const query1 = typeof source1 === "string" ? parseQuery(source1) : Result.success(source1);
        if (!query1.successful) return query1.cast();
        const header1 = query1.value.header;
        switch(header1.type){
            case "calendar":
                const cres1 = await executeCalendar(query1.value, this.index, originFile1 !== null && originFile1 !== void 0 ? originFile1 : "", this.settings);
                if (!cres1.successful) return cres1.cast();
                return Result.success({
                    type: "calendar",
                    values: cres1.value.data
                });
            case "task":
                const tasks1 = await executeTask(query1.value, originFile1 !== null && originFile1 !== void 0 ? originFile1 : "", this.index, this.settings);
                if (!tasks1.successful) return tasks1.cast();
                return Result.success({
                    type: "task",
                    values: tasks1.value.tasks
                });
            case "list":
                if ((settings1 === null || settings1 === void 0 ? void 0 : settings1.forceId) !== undefined) header1.showId = settings1.forceId;
                const lres1 = await executeList(query1.value, this.index, originFile1 !== null && originFile1 !== void 0 ? originFile1 : "", this.settings);
                if (!lres1.successful) return lres1.cast();
                // TODO: WITHOUT ID probably shouldn't exist, or should be moved to the engine itself.
                // For now, until I fix it up in an upcoming refactor, we re-implement the behavior here.
                return Result.success({
                    type: "list",
                    values: lres1.value.data,
                    primaryMeaning: lres1.value.primaryMeaning
                });
            case "table":
                if ((settings1 === null || settings1 === void 0 ? void 0 : settings1.forceId) !== undefined) header1.showId = settings1.forceId;
                const tres1 = await executeTable(query1.value, this.index, originFile1 !== null && originFile1 !== void 0 ? originFile1 : "", this.settings);
                if (!tres1.successful) return tres1.cast();
                return Result.success({
                    type: "table",
                    values: tres1.value.data,
                    headers: tres1.value.names,
                    idMeaning: tres1.value.idMeaning
                });
        }
    }
    /** Error-throwing version of {@link query}. */ async tryQuery(source1, originFile1, settings1) {
        return (await this.query(source1, originFile1, settings1)).orElseThrow();
    }
    /** Execute an arbitrary dataview query, returning the results in well-formatted markdown. */ async queryMarkdown(source1, originFile1, settings1) {
        const result1 = await this.query(source1, originFile1, settings1);
        if (!result1.successful) return result1.cast();
        switch(result1.value.type){
            case "list":
                return Result.success(this.markdownList(result1.value.values, settings1));
            case "table":
                return Result.success(this.markdownTable(result1.value.headers, result1.value.values, settings1));
            case "task":
                return Result.success(this.markdownTaskList(result1.value.values, settings1));
            case "calendar":
                return Result.failure("Cannot render calendar queries to markdown.");
        }
    }
    /** Error-throwing version of {@link queryMarkdown}. */ async tryQueryMarkdown(source1, originFile1, settings1) {
        return (await this.queryMarkdown(source1, originFile1, settings1)).orElseThrow();
    }
    /**
     * Evaluate a dataview expression (like '2 + 2' or 'link("hello")'), returning the evaluated result.
     * This takes an optional second argument which provides definitions for variables, such as:
     *
     * ```
     * dv.evaluate("x + 6", { x: 2 }) = 8
     * dv.evaluate('link(target)', { target: "Okay" }) = [[Okay]]
     * ```
     *
     * This method returns a Result type instead of throwing an error; you can check the result of the
     * execution via `result.successful` and obtain `result.value` or `result.error` resultingly. If
     * you'd rather this method throw on an error, use `dv.tryEvaluate`.
     */ evaluate(expression1, context1) {
        let field1 = EXPRESSION.field.parse(expression1);
        if (!field1.status) return Result.failure(`Failed to parse expression "${expression1}"`);
        return this.evaluationContext.evaluate(field1.value, context1);
    }
    /** Error-throwing version of `dv.evaluate`. */ tryEvaluate(expression1, context1) {
        return this.evaluate(expression1, context1).orElseThrow();
    }
    ///////////////
    // Rendering //
    ///////////////
    /**
     * Execute the given query, rendering results into the given container using the components lifecycle.
     * Your component should be a *real* component which calls onload() on it's child components at some point,
     * or a MarkdownPostProcessorContext!
     *
     * Note that views made in this way are live updating and will automatically clean themselves up when
     * the component is unloaded or the container is removed.
     */ async execute(source1, container1, component1, filePath1) {
        if (isDataviewDisabled(filePath1)) {
            renderCodeBlock(container1, source1);
            return;
        }
        let maybeQuery1 = tryOrPropogate(()=>parseQuery(source1));
        // In case of parse error, just render the error.
        if (!maybeQuery1.successful) {
            renderErrorPre(container1, "Dataview: " + maybeQuery1.error);
            return;
        }
        let query1 = maybeQuery1.value;
        let init1 = {
            app: this.app,
            settings: this.settings,
            index: this.index,
            container: container1
        };
        let childComponent1;
        switch(query1.header.type){
            case "task":
                childComponent1 = createTaskView(init1, query1, filePath1);
                component1.addChild(childComponent1);
                break;
            case "list":
                childComponent1 = createListView(init1, query1, filePath1);
                component1.addChild(childComponent1);
                break;
            case "table":
                childComponent1 = createTableView(init1, query1, filePath1);
                component1.addChild(childComponent1);
                break;
            case "calendar":
                childComponent1 = new DataviewCalendarRenderer(query1, container1, this.index, filePath1, this.settings, this.app);
                component1.addChild(childComponent1);
                break;
        }
        childComponent1.load();
    }
    /**
     * Execute the given DataviewJS query, rendering results into the given container using the components lifecycle.
     * See {@link execute} for general rendering semantics.
     */ async executeJs(code1, container1, component1, filePath1) {
        if (isDataviewDisabled(filePath1)) {
            renderCodeBlock(container1, code1, "javascript");
            return;
        }
        const renderer1 = new DataviewJSRenderer(this, code1, container1, filePath1);
        renderer1.load();
        component1.addChild(renderer1);
    }
    /** Render a dataview list of the given values. */ async list(values1, container1, component1, filePath1) {
        if (!values1) return;
        if (values1 !== undefined && values1 !== null && !Array.isArray(values1) && !DataArray.isDataArray(values1)) values1 = Array.from(values1);
        // Append a child div, since React will keep re-rendering otherwise.
        let subcontainer1 = container1.createEl("div");
        component1.addChild(createFixedListView({
            app: this.app,
            settings: this.settings,
            index: this.index,
            container: subcontainer1
        }, values1, filePath1));
    }
    /** Render a dataview table with the given headers, and the 2D array of values. */ async table(headers1, values1, container1, component1, filePath1) {
        if (!headers1) headers1 = [];
        if (!values1) values1 = [];
        if (!Array.isArray(headers1) && !DataArray.isDataArray(headers1)) headers1 = Array.from(headers1);
        // Append a child div, since React will keep re-rendering otherwise.
        let subcontainer1 = container1.createEl("div");
        component1.addChild(createFixedTableView({
            app: this.app,
            settings: this.settings,
            index: this.index,
            container: subcontainer1
        }, headers1, values1, filePath1));
    }
    /** Render a dataview task view with the given tasks. */ async taskList(tasks1, groupByFile1 = true, container1, component1, filePath1 = "") {
        let groupedTasks1 = !Groupings.isGrouping(tasks1) && groupByFile1 ? this.array(tasks1).groupBy((t5)=>Link.file(t5.path)) : tasks1;
        // Append a child div, since React will override several task lists otherwise.
        let taskContainer1 = container1.createEl("div");
        component1.addChild(createFixedTaskView({
            app: this.app,
            settings: this.settings,
            index: this.index,
            container: taskContainer1
        }, groupedTasks1, filePath1));
    }
    /** Render an arbitrary value into a container. */ async renderValue(value1, container1, component1, filePath1, inline1 = false) {
        return renderValue(value1, container1, filePath1, component1, this.settings, inline1);
    }
    /////////////////
    // Data Export //
    /////////////////
    /** Render data to a markdown table. */ markdownTable(headers1, values1, settings1) {
        if (!headers1) headers1 = [];
        if (!values1) values1 = [];
        const combined1 = Object.assign({}, this.settings, settings1);
        return markdownTable(headers1, values1, combined1);
    }
    /** Render data to a markdown list. */ markdownList(values1, settings1) {
        if (!values1) values1 = [];
        const combined1 = Object.assign({}, this.settings, settings1);
        return markdownList(values1, combined1);
    }
    /** Render tasks or list items to a markdown task list. */ markdownTaskList(values1, settings1) {
        if (!values1) values1 = [];
        const sparse1 = nestGroups(values1);
        const combined1 = Object.assign({}, this.settings, settings1);
        return markdownTaskList(sparse1, combined1);
    }
}
/** Determines if source-path has a `?no-dataview` annotation that disables dataview. */ function isDataviewDisabled(sourcePath1) {
    let questionLocation1 = sourcePath1.lastIndexOf("?");
    if (questionLocation1 == -1) return false;
    return sourcePath1.substring(questionLocation1).contains("no-dataview");
}
/** Refreshable renderer which renders inline instead of in a div. */ class DataviewInlineRenderer extends DataviewRefreshableRenderer {
    constructor(field1, fieldText1, container1, target1, index1, origin1, settings1, app1){
        super(container1, index1, app1, settings1);
        this.field = field1;
        this.fieldText = fieldText1;
        this.container = container1;
        this.target = target1;
        this.index = index1;
        this.origin = origin1;
        this.settings = settings1;
        this.app = app1;
    }
    async render() {
        var _a1;
        (_a1 = this.errorbox) === null || _a1 === void 0 ? void 0 : _a1.remove();
        let result1 = tryOrPropogate(()=>executeInline(this.field, this.origin, this.index, this.settings));
        if (!result1.successful) {
            this.errorbox = this.container.createEl("div");
            renderErrorPre(this.errorbox, "Dataview (for inline query '" + this.fieldText + "'): " + result1.error);
        } else {
            let temp1 = document.createElement("span");
            temp1.addClasses([
                "dataview",
                "dataview-inline-query"
            ]);
            await renderValue(result1.value, temp1, this.origin, this, this.settings, false);
            this.target.replaceWith(temp1);
        }
    }
}
/** Replaces raw textual inline fields in text containers with pretty HTML equivalents. */ async function replaceInlineFields(ctx1, init1) {
    let inlineFields1 = extractInlineFields(init1.container.innerHTML);
    if (inlineFields1.length == 0) return;
    let component1 = new obsidian.MarkdownRenderChild(init1.container);
    ctx1.addChild(component1);
    // Iterate through the raw HTML and replace inline field matches with corresponding rendered values.
    let result1 = init1.container.innerHTML;
    for(let x1 = inlineFields1.length - 1; x1 >= 0; x1--){
        let field1 = inlineFields1[x1];
        let renderContainer1 = document.createElement("span");
        renderContainer1.addClasses([
            "dataview",
            "inline-field"
        ]);
        // Block inline fields render the key, parenthesis ones do not.
        if (field1.wrapping == "[") {
            const key1 = renderContainer1.createSpan({
                cls: [
                    "dataview",
                    "inline-field-key"
                ],
                attr: {
                    "data-dv-key": field1.key,
                    "data-dv-norm-key": canonicalizeVarName(field1.key)
                }
            });
            // Explicitly set the inner HTML to respect any key formatting that we should carry over.
            key1.innerHTML = field1.key;
            renderContainer1.createSpan({
                cls: [
                    "dataview",
                    "inline-field-value"
                ],
                attr: {
                    id: "dataview-inline-field-" + x1
                }
            });
        } else {
            renderContainer1.createSpan({
                cls: [
                    "dataview",
                    "inline-field-standalone-value"
                ],
                attr: {
                    id: "dataview-inline-field-" + x1
                }
            });
        }
        result1 = result1.slice(0, field1.start) + renderContainer1.outerHTML + result1.slice(field1.end);
    }
    // Use a <template> block to render this HTML properly to nodes.
    const template1 = document.createElement("template");
    template1.innerHTML = result1;
    // Replace the container children with the new rendered children.
    // TODO: Replace this with a dom-to-dom diff to reduce the actual amount of updates.
    init1.container.replaceChildren(...template1.content.childNodes);
    for(let index1 = 0; index1 < inlineFields1.length; index1++){
        const box1 = init1.container.querySelector("#dataview-inline-field-" + index1);
        if (!box1) continue;
        const context1 = Object.assign({}, init1, {
            container: box1,
            component: component1
        });
        S$1(v$1(DataviewContext.Provider, {
            value: context1
        }, v$1(Lit, {
            value: parseInlineValue(inlineFields1[index1].value),
            inline: true,
            sourcePath: ctx1.sourcePath
        })), box1);
    }
}
/*
 * inspired and adapted from https://github.com/artisticat1/obsidian-latex-suite/blob/main/src/conceal.ts
 *
 * The original work is MIT-licensed.
 *
 * MIT License
 *
 * Copyright (c) 2022 artisticat1
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * */ function selectionAndRangeOverlap(selection1, rangeFrom1, rangeTo1) {
    for (const range1 of selection1.ranges){
        if (range1.from <= rangeTo1 && range1.to >= rangeFrom1) {
            return true;
        }
    }
    return false;
}
class InlineWidget extends view.WidgetType {
    constructor(cssClasses1, rawQuery1, el1, view1){
        super();
        this.cssClasses = cssClasses1;
        this.rawQuery = rawQuery1;
        this.el = el1;
        this.view = view1;
    }
    // Widgets only get updated when the raw query changes/the element gets focus and loses it
    // to prevent redraws when the editor updates.
    eq(other1) {
        if (other1.rawQuery === this.rawQuery) {
            // change CSS classes without redrawing the element
            for (let value1 of other1.cssClasses){
                if (!this.cssClasses.includes(value1)) {
                    this.el.removeClass(value1);
                } else {
                    this.el.addClass(value1);
                }
            }
            return true;
        }
        return false;
    }
    // Add CSS classes and return HTML element.
    // In "complex" cases it will get filled with the correct text/child elements later.
    toDOM(view1) {
        this.el.addClasses(this.cssClasses);
        return this.el;
    }
    /* Make queries only editable when shift is pressed (or navigated inside with the keyboard
     * or the mouse is placed at the end, but that is always possible regardless of this method).
     * Mostly useful for links, and makes results selectable.
     * If the widgets should always be expandable, make this always return false.
     */ ignoreEvent(event1) {
        // instanceof check does not work in pop-out windows, so check it like this
        if (event1.type === "mousedown") {
            const currentPos1 = this.view.posAtCoords({
                x: event1.x,
                y: event1.y
            });
            if (event1.shiftKey) {
                // Set the cursor after the element so that it doesn't select starting from the last cursor position.
                if (currentPos1) {
                    const { editor: editor1 } = this.view.state.field(obsidian.editorInfoField);
                    if (editor1) {
                        editor1.setCursor(editor1.offsetToPos(currentPos1));
                    }
                }
                return false;
            }
        }
        return true;
    }
}
function getCssClasses(props1) {
    const classes1 = [];
    if (props1.has("strong")) {
        classes1.push("cm-strong");
    }
    if (props1.has("em")) {
        classes1.push("cm-em");
    }
    if (props1.has("highlight")) {
        classes1.push("cm-highlight");
    }
    if (props1.has("strikethrough")) {
        classes1.push("cm-strikethrough");
    }
    if (props1.has("comment")) {
        classes1.push("cm-comment");
    }
    return classes1;
}
function inlinePlugin(app, index, settings, api) {
    return view.ViewPlugin.fromClass(class {
        constructor(view$11){
            var _a1;
            this.component = new obsidian.Component();
            this.component.load();
            this.decorations = (_a1 = this.inlineRender(view$11)) !== null && _a1 !== void 0 ? _a1 : view.Decoration.none;
        }
        update(update1) {
            var _a1;
            // only activate in LP and not source mode
            if (!update1.state.field(obsidian.editorLivePreviewField)) {
                this.decorations = view.Decoration.none;
                return;
            }
            if (update1.docChanged) {
                this.decorations = this.decorations.map(update1.changes);
                this.updateTree(update1.view);
            } else if (update1.selectionSet) {
                this.updateTree(update1.view);
            } else if (update1.viewportChanged /*|| update.selectionSet*/ ) {
                this.decorations = (_a1 = this.inlineRender(update1.view)) !== null && _a1 !== void 0 ? _a1 : view.Decoration.none;
            }
        }
        updateTree(view1) {
            for (const { from: from1, to: to1 } of view1.visibleRanges){
                language.syntaxTree(view1.state).iterate({
                    from: from1,
                    to: to1,
                    enter: ({ node: node1 })=>{
                        const { render: render1, isQuery: isQuery1 } = this.renderNode(view1, node1);
                        if (!render1 && isQuery1) {
                            this.removeDeco(node1);
                            return;
                        } else if (!render1) {
                            return;
                        } else if (render1) {
                            this.addDeco(node1, view1);
                        }
                    }
                });
            }
        }
        removeDeco(node1) {
            this.decorations.between(node1.from - 1, node1.to + 1, (from1, to1, value1)=>{
                this.decorations = this.decorations.update({
                    filterFrom: from1,
                    filterTo: to1,
                    filter: (from1, to1, value1)=>false
                });
            });
        }
        addDeco(node1, view1) {
            var _a1;
            const from1 = node1.from - 1;
            const to1 = node1.to + 1;
            let exists1 = false;
            this.decorations.between(from1, to1, (from1, to1, value1)=>{
                exists1 = true;
            });
            if (!exists1) {
                const currentFile1 = app.workspace.getActiveFile();
                if (!currentFile1) return;
                const newDeco1 = (_a1 = this.renderWidget(node1, view1, currentFile1)) === null || _a1 === void 0 ? void 0 : _a1.value;
                if (newDeco1) {
                    this.decorations = this.decorations.update({
                        add: [
                            {
                                from: from1,
                                to: to1,
                                value: newDeco1
                            }
                        ]
                    });
                }
            }
        }
        // checks whether a node should get rendered/unrendered
        renderNode(view1, node1) {
            const type1 = node1.type;
            // current node is inline code
            const tokenProps1 = type1.prop(language.tokenClassNodeProp);
            const props1 = new Set(tokenProps1 === null || tokenProps1 === void 0 ? void 0 : tokenProps1.split(" "));
            if (props1.has("inline-code") && !props1.has("formatting")) {
                // contains the position of inline code
                const start1 = node1.from;
                const end1 = node1.to;
                // don't continue if current cursor position and inline code node (including formatting
                // symbols) overlap
                const selection1 = view1.state.selection;
                if (selectionAndRangeOverlap(selection1, start1 - 1, end1 + 1)) {
                    if (this.isInlineQuery(view1, start1, end1)) {
                        return {
                            render: false,
                            isQuery: true
                        };
                    } else {
                        return {
                            render: false,
                            isQuery: false
                        };
                    }
                } else if (this.isInlineQuery(view1, start1, end1)) {
                    return {
                        render: true,
                        isQuery: true
                    };
                }
            }
            return {
                render: false,
                isQuery: false
            };
        }
        isInlineQuery(view1, start1, end1) {
            const text1 = view1.state.doc.sliceString(start1, end1);
            const isInlineQuery1 = text1.startsWith(settings.inlineQueryPrefix) || text1.startsWith(settings.inlineJsQueryPrefix);
            return isInlineQuery1;
        }
        inlineRender(view$11) {
            // still doesn't work as expected for tables and callouts
            if (!index.initialized) return;
            const currentFile1 = app.workspace.getActiveFile();
            if (!currentFile1) return;
            const widgets1 = [];
            /* before:
             *     em for italics
             *     highlight for highlight
             * after:
             *     strong for bold
             *     strikethrough for strikethrough
             */ for (const { from: from1, to: to1 } of view$11.visibleRanges){
                language.syntaxTree(view$11.state).iterate({
                    from: from1,
                    to: to1,
                    enter: ({ node: node1 })=>{
                        if (!this.renderNode(view$11, node1).render) return;
                        const widget1 = this.renderWidget(node1, view$11, currentFile1);
                        if (widget1) {
                            widgets1.push(widget1);
                        }
                    }
                });
            }
            return view.Decoration.set(widgets1, true);
        }
        renderWidget(node, view$1, currentFile) {
            const type = node.type;
            // contains the position of inline code
            const start = node.from;
            const end = node.to;
            // safety net against unclosed inline code
            if (view$1.state.doc.sliceString(end, end + 1) === "\n") {
                return;
            }
            const text = view$1.state.doc.sliceString(start, end);
            let code = "";
            let result = "";
            const PREAMBLE = "const dataview=this;const dv=this;";
            const el = createSpan({
                cls: [
                    "dataview",
                    "dataview-inline"
                ]
            });
            /* If the query result is predefined text (e.g. in the case of errors), set innerText to it.
             * Otherwise, pass on an empty element and fill it in later.
             * This is necessary because {@link InlineWidget.toDOM} is synchronous but some rendering
             * asynchronous.
             */ if (text.startsWith(settings.inlineQueryPrefix)) {
                if (settings.enableInlineDataview) {
                    code = text.substring(settings.inlineQueryPrefix.length).trim();
                    const field = tryOrPropogate(()=>parseField(code));
                    if (!field.successful) {
                        result = `Dataview (inline field '${code}'): ${field.error}`;
                        el.innerText = result;
                    } else {
                        const fieldValue = field.value;
                        const intermediateResult = tryOrPropogate(()=>executeInline(fieldValue, currentFile.path, index, settings));
                        if (!intermediateResult.successful) {
                            result = `Dataview (for inline query '${fieldValue}'): ${intermediateResult.error}`;
                            el.innerText = result;
                        } else {
                            const { value } = intermediateResult;
                            result = value;
                            renderValue(result, el, currentFile.path, this.component, settings);
                        }
                    }
                } else {
                    result = "(disabled; enable in settings)";
                    el.innerText = result;
                }
            } else if (text.startsWith(settings.inlineJsQueryPrefix)) {
                if (settings.enableInlineDataviewJs) {
                    code = text.substring(settings.inlineJsQueryPrefix.length).trim();
                    try {
                        // for setting the correct context for dv/dataview
                        const myEl = createDiv();
                        const dvInlineApi = new DataviewInlineApi(api, this.component, myEl, currentFile.path);
                        if (code.includes("await")) {
                            evalInContext("(async () => { " + PREAMBLE + code + " })()").then((result1)=>{
                                renderValue(result1, el, currentFile.path, this.component, settings);
                            });
                        } else {
                            result = evalInContext(PREAMBLE + code);
                            renderValue(result, el, currentFile.path, this.component, settings);
                        }
                        function evalInContext(script) {
                            return (function() {
                                return eval(script);
                            }).call(dvInlineApi);
                        }
                    } catch (e) {
                        result = `Dataview (for inline JS query '${code}'): ${e}`;
                        el.innerText = result;
                    }
                } else {
                    result = "(disabled; enable in settings)";
                    el.innerText = result;
                }
            } else {
                return;
            }
            const tokenProps = type.prop(language.tokenClassNodeProp);
            const props = new Set(tokenProps === null || tokenProps === void 0 ? void 0 : tokenProps.split(" "));
            const classes = getCssClasses(props);
            return view.Decoration.replace({
                widget: new InlineWidget(classes, code, el, view$1),
                inclusive: false,
                block: false
            }).range(start - 1, end + 1);
        }
        destroy() {
            this.component.unload();
        }
    }, {
        decorations: (v4)=>v4.decorations
    });
}
class DataviewPlugin extends obsidian.Plugin {
    constructor(){
        super(...arguments);
        this.debouncedRefresh = ()=>null;
    }
    async onload() {
        var _a1;
        // Settings initialization; write defaults first time around.
        this.settings = Object.assign(DEFAULT_SETTINGS, (_a1 = await this.loadData()) !== null && _a1 !== void 0 ? _a1 : {});
        this.addSettingTab(new GeneralSettingsTab(this.app, this));
        this.index = this.addChild(FullIndex.create(this.app, this.manifest.version, ()=>{
            if (this.settings.refreshEnabled) this.debouncedRefresh();
        }));
        // Set up automatic (intelligent) view refreshing that debounces.
        this.updateRefreshSettings();
        // From this point onwards the dataview API is fully functional (even if the index needs to do some background indexing).
        this.api = new DataviewApi(this.app, this.index, this.settings, this.manifest.version);
        // Register API to global window object.
        (window["DataviewAPI"] = this.api) && this.register(()=>delete window["DataviewAPI"]);
        // Dataview query language code blocks.
        this.registerPriorityCodeblockPostProcessor("dataview", -100, async (source1, el1, ctx1)=>this.dataview(source1, el1, ctx1, ctx1.sourcePath));
        // DataviewJS codeblocks.
        this.registerPriorityCodeblockPostProcessor(this.settings.dataviewJsKeyword, -100, async (source1, el1, ctx1)=>this.dataviewjs(source1, el1, ctx1, ctx1.sourcePath));
        // Dataview inline queries.
        this.registerPriorityMarkdownPostProcessor(-100, async (el1, ctx1)=>{
            // Allow for turning off inline queries.
            if (!this.settings.enableInlineDataview || isDataviewDisabled(ctx1.sourcePath)) return;
            this.dataviewInline(el1, ctx1, ctx1.sourcePath);
        });
        // Dataview inline-inline query fancy rendering. Runs at a low priority; should apply to Dataview views.
        this.registerPriorityMarkdownPostProcessor(100, async (el1, ctx1)=>{
            // Allow for lame people to disable the pretty rendering.
            if (!this.settings.prettyRenderInlineFields || isDataviewDisabled(ctx1.sourcePath)) return;
            // Handle p, header elements explicitly (opt-in rather than opt-out for now).
            for (let p3 of el1.findAllSelf("p,h1,h2,h3,h4,h5,h6,li,span,th,td")){
                const init1 = {
                    app: this.app,
                    index: this.index,
                    settings: this.settings,
                    container: p3
                };
                await replaceInlineFields(ctx1, init1);
            }
        });
        // editor extension for inline queries
        if (this.settings.enableInlineDataview || this.settings.enableInlineDataviewJs) {
            this.cmExtension = [
                inlinePlugin(this.app, this.index, this.settings, this.api)
            ];
            this.registerEditorExtension(this.cmExtension);
        }
        // Dataview "force refresh" operation.
        this.addCommand({
            id: "dataview-force-refresh-views",
            name: "Force Refresh All Views and Blocks",
            callback: ()=>{
                this.index.revision += 1;
                this.app.workspace.trigger("dataview:refresh-views");
            }
        });
        this.addCommand({
            id: "dataview-drop-cache",
            name: "Drop All Cached File Metadata",
            callback: ()=>{
                this.index.reinitialize();
            }
        });
        // Run index initialization, which actually traverses the vault to index files.
        if (!this.app.workspace.layoutReady) {
            this.app.workspace.onLayoutReady(async ()=>this.index.initialize());
        } else {
            this.index.initialize();
        }
        // Not required anymore, though holding onto it for backwards-compatibility.
        this.app.metadataCache.trigger("dataview:api-ready", this.api);
        console.log(`Dataview: version ${this.manifest.version} (requires obsidian ${this.manifest.minAppVersion})`);
    }
    updateRefreshSettings() {
        this.debouncedRefresh = obsidian.debounce(()=>this.app.workspace.trigger("dataview:refresh-views"), this.settings.refreshInterval, true);
    }
    onunload() {
        console.log(`Dataview: version ${this.manifest.version} unloaded.`);
    }
    /** Register a markdown post processor with the given priority. */ registerPriorityMarkdownPostProcessor(priority1, processor1) {
        let registered1 = this.registerMarkdownPostProcessor(processor1);
        registered1.sortOrder = priority1;
    }
    /** Register a markdown codeblock post processor with the given priority. */ registerPriorityCodeblockPostProcessor(language1, priority1, processor1) {
        let registered1 = this.registerMarkdownCodeBlockProcessor(language1, processor1);
        registered1.sortOrder = priority1;
    }
    /**
     * Based on the source, generate a dataview view. This works by doing an initial parsing pass, and then adding
     * a long-lived view object to the given component for life-cycle management.
     */ async dataview(source1, el1, component1, sourcePath1) {
        this.api.execute(source1, el1, component1, sourcePath1);
    }
    /** Generate a DataviewJS view running the given source in the given element. */ async dataviewjs(source1, el1, component1, sourcePath1) {
        this.api.executeJs(source1, el1, component1, sourcePath1);
    }
    /** Render all dataview inline expressions in the given element. */ async dataviewInline(el1, component1, sourcePath1) {
        if (isDataviewDisabled(sourcePath1)) return;
        // Search for <code> blocks inside this element; for each one, look for things of the form `= ...`.
        let codeblocks1 = el1.querySelectorAll("code");
        for(let index1 = 0; index1 < codeblocks1.length; index1++){
            let codeblock1 = codeblocks1.item(index1);
            // Skip code inside of pre elements if not explicitly enabled.
            if (codeblock1.parentElement && codeblock1.parentElement.nodeName.toLowerCase() == "pre" && !this.settings.inlineQueriesInCodeblocks) continue;
            let text1 = codeblock1.innerText.trim();
            if (this.settings.inlineJsQueryPrefix.length > 0 && text1.startsWith(this.settings.inlineJsQueryPrefix)) {
                let code1 = text1.substring(this.settings.inlineJsQueryPrefix.length).trim();
                if (code1.length == 0) continue;
                component1.addChild(new DataviewInlineJSRenderer(this.api, code1, el1, codeblock1, sourcePath1));
            } else if (this.settings.inlineQueryPrefix.length > 0 && text1.startsWith(this.settings.inlineQueryPrefix)) {
                let potentialField1 = text1.substring(this.settings.inlineQueryPrefix.length).trim();
                if (potentialField1.length == 0) continue;
                let field1 = tryOrPropogate(()=>parseField(potentialField1));
                if (!field1.successful) {
                    let errorBlock1 = el1.createEl("div");
                    renderErrorPre(errorBlock1, `Dataview (inline field '${potentialField1}'): ${field1.error}`);
                } else {
                    let fieldValue1 = field1.value;
                    component1.addChild(new DataviewInlineRenderer(fieldValue1, text1, el1, codeblock1, this.index, sourcePath1, this.settings, this.app));
                }
            }
        }
    }
    /** Update plugin settings. */ async updateSettings(settings1) {
        Object.assign(this.settings, settings1);
        this.updateRefreshSettings();
        await this.saveData(this.settings);
    }
    /** @deprecated Call the given callback when the dataview API has initialized. */ withApi(callback1) {
        callback1(this.api);
    }
    /**
     * Create an API element localized to the given path, with lifecycle management managed by the given component.
     * The API will output results to the given HTML element.
     */ localApi(path1, component1, el1) {
        return new DataviewInlineApi(this.api, component1, el1, path1);
    }
}
/** All of the dataview settings in a single, nice tab. */ class GeneralSettingsTab extends obsidian.PluginSettingTab {
    constructor(app1, plugin1){
        super(app1, plugin1);
        this.plugin = plugin1;
    }
    display() {
        this.containerEl.empty();
        this.containerEl.createEl("h2", {
            text: "General Settings"
        });
        new obsidian.Setting(this.containerEl).setName("Enable Inline Queries").setDesc("Enable or disable executing regular inline Dataview queries.").addToggle((toggle1)=>toggle1.setValue(this.plugin.settings.enableInlineDataview).onChange(async (value1)=>await this.plugin.updateSettings({
                    enableInlineDataview: value1
                })));
        new obsidian.Setting(this.containerEl).setName("Enable JavaScript Queries").setDesc("Enable or disable executing DataviewJS queries.").addToggle((toggle1)=>toggle1.setValue(this.plugin.settings.enableDataviewJs).onChange(async (value1)=>await this.plugin.updateSettings({
                    enableDataviewJs: value1
                })));
        new obsidian.Setting(this.containerEl).setName("Enable Inline JavaScript Queries").setDesc("Enable or disable executing inline DataviewJS queries. Requires that DataviewJS queries are enabled.").addToggle((toggle1)=>toggle1.setValue(this.plugin.settings.enableInlineDataviewJs).onChange(async (value1)=>await this.plugin.updateSettings({
                    enableInlineDataviewJs: value1
                })));
        new obsidian.Setting(this.containerEl).setName("Enable Inline Field Highlighting").setDesc("Enables or disables visual highlighting / pretty rendering for inline fields.").addToggle((toggle1)=>toggle1.setValue(this.plugin.settings.prettyRenderInlineFields).onChange(async (value1)=>await this.plugin.updateSettings({
                    prettyRenderInlineFields: value1
                })));
        this.containerEl.createEl("h2", {
            text: "Codeblock Settings"
        });
        new obsidian.Setting(this.containerEl).setName("DataviewJS Keyword").setDesc("Keyword for DataviewJS blocks. Defaults to 'dataviewjs'. Reload required for changes to take effect.").addText((text1)=>text1.setPlaceholder("dataviewjs").setValue(this.plugin.settings.dataviewJsKeyword).onChange(async (value1)=>{
                if (value1.length == 0) return;
                await this.plugin.updateSettings({
                    dataviewJsKeyword: value1
                });
            }));
        new obsidian.Setting(this.containerEl).setName("Inline Query Prefix").setDesc("The prefix to inline queries (to mark them as Dataview queries). Defaults to '='.").addText((text1)=>text1.setPlaceholder("=").setValue(this.plugin.settings.inlineQueryPrefix).onChange(async (value1)=>{
                if (value1.length == 0) return;
                await this.plugin.updateSettings({
                    inlineQueryPrefix: value1
                });
            }));
        new obsidian.Setting(this.containerEl).setName("JavaScript Inline Query Prefix").setDesc("The prefix to JavaScript inline queries (to mark them as DataviewJS queries). Defaults to '$='.").addText((text1)=>text1.setPlaceholder("$=").setValue(this.plugin.settings.inlineJsQueryPrefix).onChange(async (value1)=>{
                if (value1.length == 0) return;
                await this.plugin.updateSettings({
                    inlineJsQueryPrefix: value1
                });
            }));
        new obsidian.Setting(this.containerEl).setName("Codeblock Inline Queries").setDesc("If enabled, inline queries will also be evaluated inside full codeblocks.").addToggle((toggle1)=>toggle1.setValue(this.plugin.settings.inlineQueriesInCodeblocks).onChange(async (value1)=>await this.plugin.updateSettings({
                    inlineQueriesInCodeblocks: value1
                })));
        this.containerEl.createEl("h2", {
            text: "View Settings"
        });
        this.containerEl.createEl("h3", {
            text: "General"
        });
        new obsidian.Setting(this.containerEl).setName("Display result count").setDesc("If toggled off, the small number in the result header of TASK and TABLE Queries will be hidden.").addToggle((toggle1)=>toggle1.setValue(this.plugin.settings.showResultCount).onChange(async (value1)=>{
                await this.plugin.updateSettings({
                    showResultCount: value1
                });
                this.plugin.index.touch();
            }));
        new obsidian.Setting(this.containerEl).setName("Warn on Empty Result").setDesc("If set, queries which return 0 results will render a warning message.").addToggle((toggle1)=>toggle1.setValue(this.plugin.settings.warnOnEmptyResult).onChange(async (value1)=>{
                await this.plugin.updateSettings({
                    warnOnEmptyResult: value1
                });
                this.plugin.index.touch();
            }));
        new obsidian.Setting(this.containerEl).setName("Render Null As").setDesc("What null/non-existent should show up as in tables, by default. This supports Markdown notation.").addText((text1)=>text1.setPlaceholder("-").setValue(this.plugin.settings.renderNullAs).onChange(async (value1)=>{
                await this.plugin.updateSettings({
                    renderNullAs: value1
                });
                this.plugin.index.touch();
            }));
        new obsidian.Setting(this.containerEl).setName("Automatic View Refreshing").setDesc("If enabled, views will automatically refresh when files in your vault change; this can negatively affect" + " some functionality like embeds in views, so turn it off if such functionality is not working.").addToggle((toggle1)=>toggle1.setValue(this.plugin.settings.refreshEnabled).onChange(async (value1)=>{
                await this.plugin.updateSettings({
                    refreshEnabled: value1
                });
                this.plugin.index.touch();
            }));
        new obsidian.Setting(this.containerEl).setName("Refresh Interval").setDesc("How long to wait (in milliseconds) for files to stop changing before updating views.").addText((text1)=>text1.setPlaceholder("500").setValue("" + this.plugin.settings.refreshInterval).onChange(async (value1)=>{
                let parsed1 = parseInt(value1);
                if (isNaN(parsed1)) return;
                parsed1 = parsed1 < 100 ? 100 : parsed1;
                await this.plugin.updateSettings({
                    refreshInterval: parsed1
                });
            }));
        let dformat1 = new obsidian.Setting(this.containerEl).setName("Date Format").setDesc("The default date format (see Luxon date format options)." + " Currently: " + DateTime.now().toFormat(this.plugin.settings.defaultDateFormat, {
            locale: currentLocale()
        })).addText((text1)=>text1.setPlaceholder(DEFAULT_QUERY_SETTINGS.defaultDateFormat).setValue(this.plugin.settings.defaultDateFormat).onChange(async (value1)=>{
                dformat1.setDesc("The default date format (see Luxon date format options)." + " Currently: " + DateTime.now().toFormat(value1, {
                    locale: currentLocale()
                }));
                await this.plugin.updateSettings({
                    defaultDateFormat: value1
                });
                this.plugin.index.touch();
            }));
        let dtformat1 = new obsidian.Setting(this.containerEl).setName("Date + Time Format").setDesc("The default date and time format (see Luxon date format options)." + " Currently: " + DateTime.now().toFormat(this.plugin.settings.defaultDateTimeFormat, {
            locale: currentLocale()
        })).addText((text1)=>text1.setPlaceholder(DEFAULT_QUERY_SETTINGS.defaultDateTimeFormat).setValue(this.plugin.settings.defaultDateTimeFormat).onChange(async (value1)=>{
                dtformat1.setDesc("The default date and time format (see Luxon date format options)." + " Currently: " + DateTime.now().toFormat(value1, {
                    locale: currentLocale()
                }));
                await this.plugin.updateSettings({
                    defaultDateTimeFormat: value1
                });
                this.plugin.index.touch();
            }));
        this.containerEl.createEl("h3", {
            text: "Table Settings"
        });
        new obsidian.Setting(this.containerEl).setName("Primary Column Name").setDesc("The name of the default ID column in tables; this is the auto-generated first column that links to the source file.").addText((text1)=>text1.setPlaceholder("File").setValue(this.plugin.settings.tableIdColumnName).onChange(async (value1)=>{
                await this.plugin.updateSettings({
                    tableIdColumnName: value1
                });
                this.plugin.index.touch();
            }));
        new obsidian.Setting(this.containerEl).setName("Grouped Column Name").setDesc("The name of the default ID column in tables, when the table is on grouped data; this is the auto-generated first column" + "that links to the source file/group.").addText((text1)=>text1.setPlaceholder("Group").setValue(this.plugin.settings.tableGroupColumnName).onChange(async (value1)=>{
                await this.plugin.updateSettings({
                    tableGroupColumnName: value1
                });
                this.plugin.index.touch();
            }));
        this.containerEl.createEl("h3", {
            text: "Task Settings"
        });
        let taskCompletionSubsettingsEnabled1 = this.plugin.settings.taskCompletionTracking;
        let taskCompletionInlineSubsettingsEnabled1 = taskCompletionSubsettingsEnabled1 && !this.plugin.settings.taskCompletionUseEmojiShorthand;
        new obsidian.Setting(this.containerEl).setName("Automatic Task Completion Tracking").setDesc(createFragment((el1)=>{
            el1.appendText("If enabled, Dataview will automatically append tasks with their completion date when they are checked in Dataview views.");
            el1.createEl("br");
            el1.appendText("Example with default field name and date format: - [x] my task [completion:: 2022-01-01]");
        })).addToggle((toggle1)=>toggle1.setValue(this.plugin.settings.taskCompletionTracking).onChange(async (value1)=>{
                await this.plugin.updateSettings({
                    taskCompletionTracking: value1
                });
                taskCompletionSubsettingsEnabled1 = value1;
                this.display();
            }));
        let taskEmojiShorthand1 = new obsidian.Setting(this.containerEl).setName("Use Emoji Shorthand for Completion").setDisabled(!taskCompletionSubsettingsEnabled1);
        if (taskCompletionSubsettingsEnabled1) taskEmojiShorthand1.setDesc(createFragment((el1)=>{
            el1.appendText('If enabled, will use emoji shorthand instead of inline field formatting to fill out implicit task field "completion".');
            el1.createEl("br");
            el1.appendText("Example: - [x] my task ✅ 2022-01-01");
            el1.createEl("br");
            el1.appendText("Disable this to customize the completion date format or field name, or to use Dataview inline field formatting.");
            el1.createEl("br");
            el1.appendText('Only available when "Automatic Task Completion Tracking" is enabled.');
        })).addToggle((toggle1)=>toggle1.setValue(this.plugin.settings.taskCompletionUseEmojiShorthand).onChange(async (value1)=>{
                await this.plugin.updateSettings({
                    taskCompletionUseEmojiShorthand: value1
                });
                taskCompletionInlineSubsettingsEnabled1 = taskCompletionSubsettingsEnabled1 && !value1;
                this.display();
            }));
        else taskEmojiShorthand1.setDesc('Only available when "Automatic Task Completion Tracking" is enabled.');
        let taskFieldName1 = new obsidian.Setting(this.containerEl).setName("Completion Field Name").setDisabled(!taskCompletionInlineSubsettingsEnabled1);
        if (taskCompletionInlineSubsettingsEnabled1) taskFieldName1.setDesc(createFragment((el1)=>{
            el1.appendText("Text used as inline field key for task completion date when toggling a task's checkbox in a dataview view.");
            el1.createEl("br");
            el1.appendText('Only available when "Automatic Task Completion Tracking" is enabled and "Use Emoji Shorthand for Completion" is disabled.');
        })).addText((text1)=>text1.setValue(this.plugin.settings.taskCompletionText).onChange(async (value1)=>{
                await this.plugin.updateSettings({
                    taskCompletionText: value1.trim()
                });
            }));
        else taskFieldName1.setDesc('Only available when "Automatic Task Completion Tracking" is enabled and "Use Emoji Shorthand for Completion" is disabled.');
        let taskDtFormat1 = new obsidian.Setting(this.containerEl).setName("Completion Date Format").setDisabled(!taskCompletionInlineSubsettingsEnabled1);
        if (taskCompletionInlineSubsettingsEnabled1) {
            let descTextLines1 = [
                "Date-time format for task completion date when toggling a task's checkbox in a dataview view (see Luxon date format options).",
                'Only available when "Automatic Task Completion Tracking" is enabled and "Use Emoji Shorthand for Completion" is disabled.',
                "Currently: "
            ];
            taskDtFormat1.setDesc(createFragment((el1)=>{
                el1.appendText(descTextLines1[0]);
                el1.createEl("br");
                el1.appendText(descTextLines1[1]);
                el1.createEl("br");
                el1.appendText(descTextLines1[2] + DateTime.now().toFormat(this.plugin.settings.taskCompletionDateFormat, {
                    locale: currentLocale()
                }));
            })).addText((text1)=>text1.setPlaceholder(DEFAULT_SETTINGS.taskCompletionDateFormat).setValue(this.plugin.settings.taskCompletionDateFormat).onChange(async (value1)=>{
                    taskDtFormat1.setDesc(createFragment((el1)=>{
                        el1.appendText(descTextLines1[0]);
                        el1.createEl("br");
                        el1.appendText(descTextLines1[1]);
                        el1.createEl("br");
                        el1.appendText(descTextLines1[2] + DateTime.now().toFormat(value1.trim(), {
                            locale: currentLocale()
                        }));
                    }));
                    await this.plugin.updateSettings({
                        taskCompletionDateFormat: value1.trim()
                    });
                    this.plugin.index.touch();
                }));
        } else {
            taskDtFormat1.setDesc('Only available when "Automatic Task Completion Tracking" is enabled and "Use Emoji Shorthand for Completion" is disabled.');
        }
        new obsidian.Setting(this.containerEl).setName("Recursive Sub-Task Completion")// I gotta word this better :/
        .setDesc("If enabled, completing a task in a DataView will automatically complete its subtasks too.").addToggle((toggle1)=>toggle1.setValue(this.plugin.settings.recursiveSubTaskCompletion).onChange(async (value1)=>await this.plugin.updateSettings({
                    recursiveSubTaskCompletion: value1
                })));
    }
}
module.exports = DataviewPlugin; //# sourceMappingURL=data:application/json;charset=utf-8;base64,


/***/ }),

/***/ 3076:
/***/ ((module) => {

module.exports = require("next/dist/server/future/route-modules/route-module.js");

/***/ }),

/***/ 4140:
/***/ ((module) => {

module.exports = require("next/dist/server/get-page-files.js");

/***/ }),

/***/ 9716:
/***/ ((module) => {

module.exports = require("next/dist/server/htmlescape.js");

/***/ }),

/***/ 3100:
/***/ ((module) => {

module.exports = require("next/dist/server/render.js");

/***/ }),

/***/ 6368:
/***/ ((module) => {

module.exports = require("next/dist/server/utils.js");

/***/ }),

/***/ 6724:
/***/ ((module) => {

module.exports = require("next/dist/shared/lib/constants.js");

/***/ }),

/***/ 8743:
/***/ ((module) => {

module.exports = require("next/dist/shared/lib/html-context.js");

/***/ }),

/***/ 8524:
/***/ ((module) => {

module.exports = require("next/dist/shared/lib/is-plain-object.js");

/***/ }),

/***/ 9232:
/***/ ((module) => {

module.exports = require("next/dist/shared/lib/utils.js");

/***/ }),

/***/ 6689:
/***/ ((module) => {

module.exports = require("react");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, [2940,5035,3722], () => (__webpack_exec__(8912)));
module.exports = __webpack_exports__;

})();