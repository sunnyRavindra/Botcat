"use strict";(self.webpackChunkdaku=self.webpackChunkdaku||[]).push([[9279],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(t),g=a,y=u["".concat(p,".").concat(g)]||u[g]||m[g]||i;return t?r.createElement(y,l(l({ref:n},c),{},{components:t})):r.createElement(y,l({ref:n},c))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=g;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},6840:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const i={title:"TypeScript"},l=void 0,o={unversionedId:"ProgramingLanguage/TypeScript",id:"ProgramingLanguage/TypeScript",title:"TypeScript",description:"Tutorial web site",source:"@site/docs/ProgramingLanguage/TypeScript.md",sourceDirName:"ProgramingLanguage",slug:"/ProgramingLanguage/TypeScript",permalink:"/ProgramingLanguage/TypeScript",draft:!1,tags:[],version:"current",frontMatter:{title:"TypeScript"},sidebar:"myAutogeneratedSidebar",previous:{title:"JavaScript",permalink:"/ProgramingLanguage/Javascript"},next:{title:"DSA",permalink:"/ProgramingLanguage/DSA"}},p={},s=[{value:"Important commands",id:"important-commands",level:3},{value:"Types",id:"types",level:3},{value:"Contextual typing",id:"contextual-typing",level:3},{value:"Tuple",id:"tuple",level:3},{value:"Enum",id:"enum",level:3}],c={toc:s},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.typescripttutorial.net/typescript-tutorial/what-is-typescript/"},"Tutorial web site")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://www.typescripttutorial.net/wp-content/uploads/2020/05/what-is-typescript-compiler.png",alt:"TypeScript"})),(0,a.kt)("h3",{id:"important-commands"},"Important commands"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Typescript"},"yarn install\xa0-g\xa0typescript # install\ntsc --v # version\nnpm\xa0install\xa0-g\xa0ts-node # ts to js converter \n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"tsc app.ts")," compiles to code to js file\n",(0,a.kt)("inlineCode",{parentName:"p"},"node app.js")," runs the js file\n",(0,a.kt)("inlineCode",{parentName:"p"},"ts-node app.ts")," run ts file directly"),(0,a.kt)("h3",{id:"types"},"Types"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Primitive types\nString\nnumber\nboolean\nnull\nundefined\nsymbol - constant"),(0,a.kt)("li",{parentName:"ul"},"Object Type")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Typescript"},"\nlet newString: string = 'Hello world';\n\nconst newNumber: number = 1;\n\nlet newBool: boolean = true;\n\nlet newArray: number[] = [1, 2, 3, 4];\n\nlet newFuctionVariable: (name: string) => string;\nnewFuctionVariable = function(name: string) {\n  return `Hi ${name}`;\n}; // this is valid\n// this is invalid cause we are assigning wrong data function to the variable\n// newFuctionVariable = function() {\n//   console.log('Hello');\n// }; \nconsole.log('This is a String : ' + newString);\nconsole.log('This is a Number : ' + newNumber);\nconsole.log('This is a Boolean: ' + newBool);\nconsole.log('This is a Array: ' + newArray);\n\n//Object\nlet employee: { \nfirstName: string;\nlastName: string;\nage: number;\njobTitle: string;\n};\n\nlet big: bigint = 9007199254740991n; //bigint\n//In typescript numbers are floting point and bigint are long in java\n\n//String literals\n``let profile: string = `I'm ${firstName}.  I'm a ${title}`;``\n``let description = `This TypeScript string can  span multiple  lines `;``\n")),(0,a.kt)("h3",{id:"contextual-typing"},"Contextual typing"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"document.addEventListener('click', function (event) {     console.log(event.button); //  });")),(0,a.kt)("h3",{id:"tuple"},"Tuple"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Tuple is Final list.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Typescript"},"let skill: [string, number]; \nskill = ['Programming', 5];\n\n// Optional parameters\nlet bgColor, headerColor: [number, number, number, number?];\n")),(0,a.kt)("h3",{id:"enum"},"Enum"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Typescript"},"enum name {constant1, constant2, ...};\n")))}m.isMDXComponent=!0}}]);