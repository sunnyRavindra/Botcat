"use strict";(self.webpackChunkdaku=self.webpackChunkdaku||[]).push([[5134],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=l(n),b=i,d=p["".concat(s,".").concat(b)]||p[b]||m[b]||o;return n?r.createElement(d,u(u({ref:t},c),{},{components:n})):r.createElement(d,u({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,u=new Array(o);u[0]=b;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[p]="string"==typeof e?e:i,u[1]=a;for(var l=2;l<o;l++)u[l]=n[l];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},7156:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>u,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const o={title:"Cucumber Basics"},u=void 0,a={unversionedId:"SDET/Cucumber/Introduction",id:"SDET/Cucumber/Introduction",title:"Cucumber Basics",description:"Cucumber is the BDD Framework for running automated tests. Cucumber does not Automate your testcases!",source:"@site/docs/SDET/Cucumber/Introduction.md",sourceDirName:"SDET/Cucumber",slug:"/SDET/Cucumber/Introduction",permalink:"/SDET/Cucumber/Introduction",draft:!1,tags:[],version:"current",frontMatter:{title:"Cucumber Basics"},sidebar:"SDETSidebar",previous:{title:"Browser Options",permalink:"/SDET/Selenium/BrowserOptions"},next:{title:"Framework Architecture",permalink:"/SDET/Cucumber/Architecture"}},s={},l=[{value:"Gherkin",id:"gherkin",level:3},{value:"Cucumber Terminology",id:"cucumber-terminology",level:3},{value:"Feature",id:"feature",level:3},{value:"Runner File",id:"runner-file",level:3},{value:"Tags",id:"tags",level:3},{value:"Hooks",id:"hooks",level:3}],c={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Cucumber is the BDD Framework for running automated tests. Cucumber does not Automate your testcases!"),(0,i.kt)("h3",{id:"gherkin"},"Gherkin"),(0,i.kt)("p",null,"a\xa0Business Readable, Domain Specific Language  that lets you describe software's behavior."),(0,i.kt)("h3",{id:"cucumber-terminology"},"Cucumber Terminology"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Scenario"),(0,i.kt)("li",{parentName:"ul"},"Feature"),(0,i.kt)("li",{parentName:"ul"},"Feature file"),(0,i.kt)("li",{parentName:"ul"},"Scenario outline"),(0,i.kt)("li",{parentName:"ul"},"Step Definition")),(0,i.kt)("h3",{id:"feature"},"Feature"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Cucumber"},'\nBackground:\n  Start Browser\n\nFeature: Test Suite \n  Scenario: test case\n    Given step with int 1\n    When step with string "two"\n    Then step three\n    And step four\n    Then step five\n    But step six\n\n### Step Defination\n```Cucumber\n    @Given("step with int {int}")\n    public void step_with_int(Integer int1) {\n        System.out.println("Step 1");\n    }\n\n    @When("step with string {string}")\n    public void step_with_string(String string) {\n        System.out.println("Step 2");\n    }\n\n    @Then("step three")\n    public void step_three() {\n        System.out.println("Step 3");\n    }\n\n    @Then("step four")\n    public void step_four() {\n        System.out.println("Step 4");\n    }\n\n    @Then("step five")\n    public void step_five() {\n        System.out.println("Step 5");\n    }\n\n    @Then("step six")\n    public void step_six() {\n        System.out.println("Step 6");\n    }\n')),(0,i.kt)("h3",{id:"runner-file"},"Runner File"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},'import io.cucumber.testng.AbstractTestNGCucumberTests;\nimport io.cucumber.testng.CucumberOptions;\n\n@CucumberOptions(\nfeatures = "src/test/java/features",\nglue = "stepDefination",\nmonochrome = true,\ntags = "@Smoke",\ndryrun = true,\nplugin = {"pretty", "html:target/cucumber.html","json:target/cucumber.json", "com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:" }\n)\n\npublic class smokeRunner extends AbstractTestNGCucumberTests {}\n')),(0,i.kt)("h3",{id:"tags"},"Tags"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Cucumber@"},'  @Smoke\n  Scenario: test case\n    Given step with int 1\n\n  @Regression\n  Scenario: test case\n    Given step with int 1\n\n  @Smoke @Regression\n  Scenario: test case\n    Given step with int 1\n\n# Runner Params\ntags = "@Smoke"\ntags = "@Smoke and @Regression"\ntags = "@Smoke or @Regression"\ntags = "not @Smoke"\n')),(0,i.kt)("h3",{id:"hooks"},"Hooks"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class hooks {\n\n    @Before\n    public void beforeAll() {\n        System.out.println("------------------");\n        System.out.println("Before all");\n        System.out.println("------------------");\n    }\n\n    @After\n    public void afterAll() {\n        System.out.println("------------------");\n        System.out.println("After all");\n        System.out.println("------------------");\n    }\n\n    @Before("@Smoke")\n    public void beforeAllSmoke() {\n        System.out.println("------------------");\n        System.out.println("Before all smoke");\n        System.out.println("------------------");\n    }\n\n    @After("@Smoke")\n    public void afterAllSmoke() {\n        System.out.println("------------------");\n        System.out.println("After all smoke");\n        System.out.println("------------------");\n    }\n\n}\n')),(0,i.kt)("p",null,"cucumber dependency injection (picocontainer)"),(0,i.kt)("p",null,"step defination should be written using SRP (Single Responsibility Principle)"))}m.isMDXComponent=!0}}]);