"use strict";(self.webpackChunkdaku=self.webpackChunkdaku||[]).push([[2505],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>p});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},b=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(t),b=r,p=m["".concat(s,".").concat(b)]||m[b]||d[b]||i;return t?a.createElement(p,o(o({ref:n},u),{},{components:t})):a.createElement(p,o({ref:n},u))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=b;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},5943:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const i={title:"SQL Data Manupulation"},o="Data Manupulation",l={unversionedId:"SDET/Security-Testing/SQL-Data-Manupulation",id:"SDET/Security-Testing/SQL-Data-Manupulation",title:"SQL Data Manupulation",description:"Add data into table",source:"@site/docs/SDET/Security-Testing/SQL-Data-Manupulation.md",sourceDirName:"SDET/Security-Testing",slug:"/SDET/Security-Testing/SQL-Data-Manupulation",permalink:"/SDET/Security-Testing/SQL-Data-Manupulation",draft:!1,tags:[],version:"current",frontMatter:{title:"SQL Data Manupulation"},sidebar:"SDETSidebar",previous:{title:"SQL Basics",permalink:"/SDET/Security-Testing/SQL-Basics"},next:{title:"SQL DataTypes",permalink:"/SDET/Security-Testing/SQL-DataTypes"}},s={},c=[{value:"Add data into table",id:"add-data-into-table",level:3},{value:"Accessing Database",id:"accessing-database",level:3},{value:"Reguler expression usage",id:"reguler-expression-usage",level:3},{value:"Updating Database",id:"updating-database",level:3},{value:"Group By, Order by, Limits, Union, UnionAll, Sub Queries, Views, Intersect, Exists, Case",id:"group-by-order-by-limits-union-unionall-sub-queries-views-intersect-exists-case",level:3},{value:"Joins",id:"joins",level:3},{value:"Variables and Functions",id:"variables-and-functions",level:3},{value:"Stored Proc",id:"stored-proc",level:3}],u={toc:c},m="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-manupulation"},"Data Manupulation"),(0,r.kt)("h3",{id:"add-data-into-table"},"Add data into table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'insert into tablename (columnName1,columnName2) values("Test Value","Test Value2")\n')),(0,r.kt)("h3",{id:"accessing-database"},"Accessing Database"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Show all values from the table\nselect * from tableName;\n\n# Show a specific row\nselect * from tableName where id =1;\n\n# Show count of rows\nselect count(*) from tableName;\n\n# showing non NUll values\nselect * from tableName where name is NOT NULL\n\n# Show data where age not equal to 40;\nselect * from tableName where age != 40;\n\n# Show unique rows\nselect distinct * from tableName \n\n# In operator\nselect * from tableName where  id in(1,2,3);\n\n# Between operator\nselect * from tableName where id between 1 and 10;\n\n# Get todays date year time day and week\nselect time(now()), day(now()), year(now()), week(now());\n")),(0,r.kt)("h3",{id:"reguler-expression-usage"},"Reguler expression usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Show rows with name starting with s + any letter + u\nselect * from tableName where (name like "%s_u" && age > 40) || (name like "%su" && age < 40) ;\n\n# Show rows with name containing letter  o\nselect * from tableName where name like "%o%";\n\n# Show rows with name not starting with su\nselect * from tableName where name not like "su%";\n')),(0,r.kt)("h3",{id:"updating-database"},"Updating Database"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Adding new column to an existing table \nalter table tableName add columnName varchar(20); \n\n# Removing a column from an existing table\nalter table tableName drop columnName\n\n# Added Foreign key to existing table (this act like Enums in db world)\nalter table tableName add constrain fk_addForeignkey foreign key (columnName) reference tablename (columnName)\n\n# Update values in existing table\nupdate tableName set columnName1 = "Value" where id = 1;\n\n# Add index to and existing table(this adds index to the columns rows which helps in fetching the data quickly)\nalter table tableName add index idx_index(columnName);\n')),(0,r.kt)("h3",{id:"group-by-order-by-limits-union-unionall-sub-queries-views-intersect-exists-case"},"Group By, Order by, Limits, Union, UnionAll, Sub Queries, Views, Intersect, Exists, Case"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Accending Order\nselect * from tableName order by columnName1 asc, columnName2 desc;\n\n# Decending Order\nselect * from tableName order by columnName1 desc, columnName2 desc;\n\n# Group By\nselect columnName2 from tableName where condition group by columnName2 having condition order by columnName2 asc/desc;\n\n#Limits\nselect * from TableName Limit 1, 10;\n\n# note - Both the tables needs to be similer for this to work\n# Union Rmoves duplicates while unionall doesnt \nselect * from TableName condition\nunion/union all\nselect * from TableName condition\n\n# Intersect\n# Returns values which are in both the tables \n# both the columns should be same in both the tables\n# Functionality only available in Oracle DB\nselect * from TableName condition\nintersect\nselect * from TableName condition\n# in mysql find solutions for intersect is as per below\nselect * from table1 where id in (select id from table2);\n\n# Exists\n# this runs the second query first and if that is true only then the first query is run \nselect * from table1 exists(select * from table1 where id =1);\n\n# case\nselect columns, case id \nwhen 1 then columns * 2 \nwhen 2 then columns * 4 \nelse columns\nend\n'new_column_name', column3\nfrom table\n\n\n# Sub Queries\nselect * from TableName where column in (select * from table);\n\n# View\ncreate view viewName as (your SQL query);\n# View is a virtual table whose access can be provided to restricted users(developer decides which columns to be visible in the views)\n# View creates something which looks like table but in the background it just runs the query and creates a table/view.\n# Hene views can be slow to access.\n# note - data can be inserted into the view but it will endup inserting in the main table (might not be visible in view)\n")),(0,r.kt)("h3",{id:"joins"},"Joins"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Inner Join \nselect a.columnName1 , b.columnName2 from table1 as a join table2 as b on a.columnName1 = b.columnName2;\n\n# Left Join \nselect a.columnName1 , b.columnName2 from table1 as a left join table2 as b on a.columnName1 = b.columnName2;\n\n# Right Join \nselect a.columnName1 , b.columnName2 from table1 as a right join table2 as b on a.columnName1 = b.columnName2;\n")),(0,r.kt)("h3",{id:"variables-and-functions"},"Variables and Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# Varibale\nset @varName = "Value";\n\n# Function\n\n# Join Strings\nselect concat(columnName,string2,string3,and so on ...) from tableName;\n\n# Uppercase String\nselect ucase(string);\n\n# Lower case String\nselect lcase(string)\n')),(0,r.kt)("h3",{id:"stored-proc"},"Stored Proc"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# running multiple qureies at ones from another application\n# Create Procedure\ncreate procedure ProcedureName(in id1 int, id2 int, title text )\nbegin\nselect id, title into @id, @title from tableName where columnName1 < id1 and columnName2 > id2 and columnName3 = title;\nend;\n# note - you should be using a databse for prcedures to work\n\n# Drop Procedure\ndrop prcedure ProcedureName;\n\n# invoking a procedure\ncall ProcedureName(1,2);\n\n# Create Function \n# just returns one single value\ncreate function functionName(id int, name text) returns numberic(10,2) \nbegin\n  declare results numberic(10,2);\n  select id into @results from tablename where id= 1;\n\n  return results\nend; \n\n# calling Function \nselect functionName(1,2,"text"); \n# functions will return one value \n\n')))}d.isMDXComponent=!0}}]);