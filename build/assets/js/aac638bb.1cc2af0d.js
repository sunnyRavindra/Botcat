"use strict";(self.webpackChunkdaku=self.webpackChunkdaku||[]).push([[102],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,m=c["".concat(l,".").concat(d)]||c[d]||y[d]||i;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1235:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>y,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={title:"SQL DataTypes"},s=void 0,o={unversionedId:"Security-Testing/SQL-DataTypes",id:"Security-Testing/SQL-DataTypes",title:"SQL DataTypes",description:"Numeric Types",source:"@site/docs/Security-Testing/SQL-DataTypes.md",sourceDirName:"Security-Testing",slug:"/Security-Testing/SQL-DataTypes",permalink:"/Security-Testing/SQL-DataTypes",draft:!1,tags:[],version:"current",frontMatter:{title:"SQL DataTypes"},sidebar:"myAutogeneratedSidebar",previous:{title:"SQL Data Manupulation",permalink:"/Security-Testing/SQL-Data-Manupulation"},next:{title:"SQL Injection",permalink:"/Security-Testing/SQL-Injection"}},l={},p=[{value:"Numeric Types",id:"numeric-types",level:3},{value:"Date and Time Types",id:"date-and-time-types",level:3},{value:"String Types",id:"string-types",level:3},{value:"JSON Types",id:"json-types",level:3},{value:"Spatial Types",id:"spatial-types",level:3},{value:"Other types",id:"other-types",level:3},{value:"Custom User-Defined Types",id:"custom-user-defined-types",level:3},{value:"Temporal Types (Introduced in MySQL 8.0)",id:"temporal-types-introduced-in-mysql-80",level:3}],u={toc:p},c="wrapper";function y(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"numeric-types"},"Numeric Types"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"INT or INTEGER: A whole number.\n\nTINYINT: A very small integer.\n\nSMALLINT: A small integer.\n\nMEDIUMINT: A medium-sized integer.\n\nBIGINT: A large integer.\n\nFLOAT: A single-precision floating-point number.\n\nDOUBLE or REAL: A double-precision floating-point number.\n\nDECIMAL or NUMERIC: A fixed-point decimal number.\n")),(0,a.kt)("h3",{id:"date-and-time-types"},"Date and Time Types"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"DATE: Date in 'YYYY-MM-DD' format.\n\nTIME: Time in 'HH:MM:SS' format.\n\nDATETIME: Date and time in 'YYYY-MM-DD HH:MM:SS' format.\n\nTIMESTAMP: A timestamp representing a datetime value.\n\nYEAR: A year in 2-digit or 4-digit format.\n")),(0,a.kt)("h3",{id:"string-types"},"String Types"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"CHAR: Fixed-length character string.\n\nVARCHAR: Variable-length character string.\n\nBINARY: Fixed-length binary string.\n\nVARBINARY: Variable-length binary string.\n\nTINYBLOB, TINYTEXT: Tiny binary or text data.\n\nBLOB, TEXT: Binary or text data of various sizes.\n\nMEDIUMBLOB, MEDIUMTEXT: Medium-sized binary or text data.\n\nLONGBLOB, LONGTEXT: Large binary or text data.\n\nENUM: Enumeration of possible values.\n\nSET: Set of values, where each value can be selected.\n")),(0,a.kt)("h3",{id:"json-types"},"JSON Types"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"JSON: JSON data type for storing JSON-encoded data.\n")),(0,a.kt)("h3",{id:"spatial-types"},"Spatial Types"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"GEOMETRY: For geometric shapes.\n\nPOINT: For a point in space.\n\nLINESTRING: For a series of points.\n\nPOLYGON: For a closed shape.\n")),(0,a.kt)("h3",{id:"other-types"},"Other types"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"BIT: A bit field type.\n\nBOOLEAN or BOOL: A synonym for TINYINT(1).\n\nSERIAL: An alias for BIGINT UNSIGNED AUTO_INCREMENT.\n")),(0,a.kt)("h3",{id:"custom-user-defined-types"},"Custom User-Defined Types"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"MySQL allows you to create your own custom data types using the CREATE TYPE statement.\n")),(0,a.kt)("h3",{id:"temporal-types-introduced-in-mysql-80"},"Temporal Types (Introduced in MySQL 8.0)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"YEAR,\nYEAR_MONTH,\nYEAR_DAY,\nMONTH_DAY,\nDAY_TIME,\nHOUR_MINUTE,\nMINUTE_SECOND,\nSECOND_MICROSECOND,\nTIME_ZONE,\nand more. These types are used for working with temporal values.\n")))}y.isMDXComponent=!0}}]);