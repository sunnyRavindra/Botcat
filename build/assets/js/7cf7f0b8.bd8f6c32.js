"use strict";(self.webpackChunkdaku=self.webpackChunkdaku||[]).push([[1381],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,d=p["".concat(s,".").concat(m)]||p[m]||g[m]||i;return t?r.createElement(d,l(l({ref:n},u),{},{components:t})):r.createElement(d,l({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2490:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const i={title:"Cucumber"},l=void 0,o={unversionedId:"2Cucumber",id:"2Cucumber",title:"Cucumber",description:"Basics",source:"@site/docs/2Cucumber.md",sourceDirName:".",slug:"/2Cucumber",permalink:"/2Cucumber",draft:!1,tags:[],version:"current",frontMatter:{title:"Cucumber"},sidebar:"myAutogeneratedSidebar",previous:{title:"TestNg",permalink:"/1TestNg"},next:{title:"Docker",permalink:"/2Docker"}},s={},c=[{value:"Basics",id:"basics",level:3},{value:"Create Cucumber Project",id:"create-cucumber-project",level:3},{value:"Gherkin",id:"gherkin",level:3},{value:"Cucumber Terminology",id:"cucumber-terminology",level:3},{value:"Feature",id:"feature",level:3},{value:"Runner File",id:"runner-file",level:3},{value:"Tags",id:"tags",level:3},{value:"Hooks",id:"hooks",level:3},{value:"ExtentReports Cucumber7 Adapter",id:"extentreports-cucumber7-adapter",level:3},{value:"extent.properties",id:"extentproperties",level:3},{value:"Spark-config.xml",id:"spark-configxml",level:3},{value:"Take ScreenShots on failure",id:"take-screenshots-on-failure",level:3},{value:"Dependency Injection",id:"dependency-injection",level:3},{value:"Factory Desgin Pattern",id:"factory-desgin-pattern",level:3},{value:"Dependency Injection",id:"dependency-injection-1",level:3},{value:"Factory Desgin Pattern",id:"factory-desgin-pattern-1",level:3},{value:"Parallel Test using Surefire",id:"parallel-test-using-surefire",level:3},{value:"Parallel Tests using FireSure",id:"parallel-tests-using-firesure",level:3}],u={toc:c},p="wrapper";function g(e){let{components:n,...i}=e;return(0,a.kt)(p,(0,r.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"basics"},"Basics"),(0,a.kt)("p",null,"Cucumber is the BDD Framework for running automated tests. Cucumber does not Automate your testcases."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Cucumber.png",src:t(8980).Z,width:"1270",height:"809"})),(0,a.kt)("h3",{id:"create-cucumber-project"},"Create Cucumber Project"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'mvn archetype:generate                      \\\n   "-DarchetypeGroupId=io.cucumber"           \\\n   "-DarchetypeArtifactId=cucumber-archetype" \\\n   "-DarchetypeVersion=7.15.0"               \\\n   "-DgroupId=hellocucumber"                  \\\n   "-DartifactId=hellocucumber"               \\\n   "-Dpackage=hellocucumber"                  \\\n   "-Dversion=1.0.0-SNAPSHOT"                 \\\n   "-DinteractiveMode=false"\n')),(0,a.kt)("h3",{id:"gherkin"},"Gherkin"),(0,a.kt)("p",null,"a\xa0Business Readable, Domain Specific Language  that lets you describe software's behavior."),(0,a.kt)("h3",{id:"cucumber-terminology"},"Cucumber Terminology"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Scenario"),(0,a.kt)("li",{parentName:"ul"},"Feature"),(0,a.kt)("li",{parentName:"ul"},"Feature file"),(0,a.kt)("li",{parentName:"ul"},"Scenario outline"),(0,a.kt)("li",{parentName:"ul"},"Step Definition")),(0,a.kt)("h3",{id:"feature"},"Feature"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Cucumber"},'\nBackground:\n  Start Browser\n\nFeature: Test Suite \n  Scenario: test case\n    Given step with int 1\n    When step with string "two"\n    Then step three\n    And step four\n    Then step five\n    But step six\n\n### Step Defination\n```Cucumber\n    @Given("step with int {int}")\n    public void step_with_int(Integer int1) {\n        System.out.println("Step 1");\n    }\n\n    @When("step with string {string}")\n    public void step_with_string(String string) {\n        System.out.println("Step 2");\n    }\n\n    @Then("step three")\n    public void step_three() {\n        System.out.println("Step 3");\n    }\n\n    @Then("step four")\n    public void step_four() {\n        System.out.println("Step 4");\n    }\n\n    @Then("step five")\n    public void step_five() {\n        System.out.println("Step 5");\n    }\n\n    @Then("step six")\n    public void step_six() {\n        System.out.println("Step 6");\n    }\n')),(0,a.kt)("h3",{id:"runner-file"},"Runner File"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},'import io.cucumber.testng.AbstractTestNGCucumberTests;\nimport io.cucumber.testng.CucumberOptions;\n\n@CucumberOptions(\nfeatures = "src/test/java/features",\nglue = "stepDefination",\nmonochrome = true,\ntags = "@Smoke",\ndryrun = true,\nplugin = {"pretty", "html:target/cucumber.html","json:target/cucumber.json", "com.aventstack.extentreports.cucumber.adapter.ExtentCucumberAdapter:" }\n)\n\npublic class smokeRunner extends AbstractTestNGCucumberTests {}\n')),(0,a.kt)("h3",{id:"tags"},"Tags"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Cucumber@"},'  @Smoke\n  Scenario: test case\n    Given step with int 1\n\n  @Regression\n  Scenario: test case\n    Given step with int 1\n\n  @Smoke @Regression\n  Scenario: test case\n    Given step with int 1\n\n# Runner Params\ntags = "@Smoke"\ntags = "@Smoke and @Regression"\ntags = "@Smoke or @Regression"\ntags = "not @Smoke"\n')),(0,a.kt)("h3",{id:"hooks"},"Hooks"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class hooks {\n\n    @Before\n    public void beforeAll() {\n        System.out.println("------------------");\n        System.out.println("Before all");\n        System.out.println("------------------");\n    }\n\n    @After\n    public void afterAll() {\n        System.out.println("------------------");\n        System.out.println("After all");\n        System.out.println("------------------");\n    }\n\n    @Before("@Smoke")\n    public void beforeAllSmoke() {\n        System.out.println("------------------");\n        System.out.println("Before all smoke");\n        System.out.println("------------------");\n    }\n\n    @After("@Smoke")\n    public void afterAllSmoke() {\n        System.out.println("------------------");\n        System.out.println("After all smoke");\n        System.out.println("------------------");\n    }\n\n}\n')),(0,a.kt)("p",null,"cucumber dependency injection (picocontainer)"),(0,a.kt)("p",null,"step definition should be written using SRP (Single Responsibility Principle)"),(0,a.kt)("h3",{id:"extentreports-cucumber7-adapter"},"ExtentReports Cucumber7 Adapter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"https://ghchirp.site/3196/\n")),(0,a.kt)("h3",{id:"extentproperties"},"extent.properties"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"extent.reporter.spark.start=true\nextent.reporter.spark.out=target/extentReport/report.html\n")),(0,a.kt)("h3",{id:"spark-configxml"},"Spark-config.xml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<extentreports>\n    <configuration>\n        \x3c!-- report theme --\x3e\n        \x3c!-- standard, dark --\x3e\n        <theme>dark</theme>\n\n        \x3c!-- document encoding --\x3e\n        \x3c!-- defaults to UTF-8 --\x3e\n        <encoding>UTF-8</encoding>\n\n        \x3c!-- protocol for script and stylesheets --\x3e\n        \x3c!-- defaults to https --\x3e\n        <protocol>https</protocol>\n\n        \x3c!-- title of the document --\x3e\n        <documentTitle>Basic Test</documentTitle>\n\n        \x3c!-- report name - displayed at top-nav --\x3e\n        <reportName>Report Name</reportName>\n\n        \x3c!-- view report without internet --\x3e\n        <offlineMode>false</offlineMode>\n\n        <thumbnailForBase64>true</thumbnailForBase64>\n\n        \x3c!-- custom javascript --\x3e\n        <js></js>\n\n        \x3c!-- custom styles --\x3e\n        <css></css>\n    </configuration>\n</extentreports>\n')),(0,a.kt)("h3",{id:"take-screenshots-on-failure"},"Take ScreenShots on failure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    @AfterStep\n    public void takeScreenShots(Scenario scenario) throws IOException {\n        if(scenario.isFailed()) {\n            //Take Screenshot\n            byte[] screenshotFile = ((TakesScreenshot)contextManager.driverManager.getDriver()).getScreenshotAs(OutputType.BYTES);\n            //Attach to Extent report\n            scenario.attach(screenshotFile, "image/png", "image");\n        }\n    }\n')),(0,a.kt)("h3",{id:"dependency-injection"},"Dependency Injection"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Add Cucumber picocontainer for the POM file from mvn repository."),(0,a.kt)("li",{parentName:"ol"},"Create a BrowserContext class for injection.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},"public class BrowserContext {\n\n    public WebDriver driver;\n\n    public BrowserContext() {\n        driver = new ChromeDriver();\n    }\n\n}\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Call the BrowserContext in stepdefinition file")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},"public class login {\n     WebDriver driver;\n     \n     public login(BrowserContext browserContext){\n         this.driver = browserContext.driver;\n     }\n}\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"You don't need to create an object of of the Browser Context class to when using picocontainer for dependency injection"),(0,a.kt)("li",{parentName:"ol"},"Always write step definition with SRP(Single Responsibility principal)"),(0,a.kt)("li",{parentName:"ol"},"Class's needs to be loosely coupled when righting step-definition.")),(0,a.kt)("h3",{id:"factory-desgin-pattern"},"Factory Desgin Pattern"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a class files with getters of all the pages in page Object class.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},"package pagesObject;\n\npublic class PageObjectManager {\n    \n    public LoginPage getLoginPage() {\n        return new LoginPage();\n    }\n\n}\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Add getter for PageObjectManger in BrowserContext class")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},"    public PageObjectManager getPageObjectManager() {\n        return new PageObjectManager();\n    }\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Call the PageObjectManager from stepdefinition")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},"    LoginPage loginPage = browserContext.getPageObjectManager().getLoginPage(); \n")),(0,a.kt)("h3",{id:"dependency-injection-1"},"Dependency Injection"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Add Cucumber picocontainer for the POM file from mvn repository."),(0,a.kt)("li",{parentName:"ol"},"Create a BrowserContext class for injection.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},"public class BrowserContext {\n\n    public WebDriver driver;\n\n    public BrowserContext() {\n        driver = new ChromeDriver();\n    }\n\n}\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Call the BrowserContext in stepdefinition file")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},"public class login {\n     WebDriver driver;\n     \n     public login(BrowserContext browserContext){\n         this.driver = browserContext.driver;\n     }\n}\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"You don't need to create an object of of the Browser Context class to when using picocontainer for dependency injection"),(0,a.kt)("li",{parentName:"ol"},"Always write step definition with SRP(Single Responsibility principal)"),(0,a.kt)("li",{parentName:"ol"},"Class's needs to be loosely coupled when righting step-definition.")),(0,a.kt)("h3",{id:"factory-desgin-pattern-1"},"Factory Desgin Pattern"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a class files with getters of all the pages in page Object class.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},"package pagesObject;\n\npublic class PageObjectManager {\n    \n    public LoginPage getLoginPage() {\n        return new LoginPage();\n    }\n\n}\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Add getter for PageObjectManger in BrowserContext class")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},"    public PageObjectManager getPageObjectManager() {\n        return new PageObjectManager();\n    }\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Call the PageObjectManager from stepdefinition")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},"    LoginPage loginPage = browserContext.getPageObjectManager().getLoginPage(); \n")),(0,a.kt)("h3",{id:"parallel-test-using-surefire"},"Parallel Test using Surefire"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://cucumber.io/docs/guides/parallel-execution/?lang=java#testng"},"Parallel Tests"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"\x3c!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin --\x3e\n<dependency>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-surefire-plugin</artifactId>\n    <version>3.2.3</version>\n</dependency>\n\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},"public class Regression extends AbstractTestNGCucumberTests {\n\n@Override\n\n@DataProvider(parallel = true)\n\npublic Object[][] scenarios() {\n\nreturn super.scenarios();\n\n}\n\n}\n")),(0,a.kt)("p",null,"To add the Surefire plugin to your ",(0,a.kt)("inlineCode",{parentName:"p"},"pom.xml")," file, you can include the following configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"<build>\n    <plugins>\n        \x3c!-- Surefire Plugin for running tests --\x3e\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <version>3.0.0-M5</version> \x3c!-- Use the latest version available --\x3e\n\n            <configuration>\n                \x3c!-- Set the test classes directory --\x3e\n                <testClassesDirectory>${project.build.directory}</testClassesDirectory>\n                <includes>\n                    <include>**/*Test*.java</include>\n                    <include>**/*Test.java</include>\n                    <include>**/*Tests.java</include>\n                </includes>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n")),(0,a.kt)("p",null,"This configuration will include the Surefire Plugin with the specified version (3.0.0-M5 in this example). It also configures the plugin to include test classes based on the standard naming conventions (",(0,a.kt)("inlineCode",{parentName:"p"},"*Test*.java"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"*Test.java"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"*Tests.java"),")."),(0,a.kt)("p",null,"Make sure to replace the version with the latest version available at the time you're adding it. You can check the ",(0,a.kt)("a",{parentName:"p",href:"https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin"},"Maven Repository")," for the latest version."),(0,a.kt)("h3",{id:"parallel-tests-using-firesure"},"Parallel Tests using FireSure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Java"},"<plugin>\n\n<groupId>org.apache.maven.plugins</groupId>\n\n<artifactId>maven-failsafe-plugin</artifactId>\n\n<version>2.22.0</version>\n\n<executions>\n\n<execution>\n\n<goals>\n\n<goal>integration-test</goal>\n\n<goal>verify</goal>\n\n</goals>\n\n<configuration>\n\n<parallel>methods</parallel>\n\n<useUnlimitedThreads>true</useUnlimitedThreads>\n\n</configuration>\n\n</execution>\n\n</executions>\n\n</plugin>\n")))}g.isMDXComponent=!0},8980:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/Cucumber-e43c89c9d449319ea3ed33bd8db33005.png"}}]);