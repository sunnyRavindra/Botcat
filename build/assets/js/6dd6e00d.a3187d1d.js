"use strict";(self.webpackChunkdaku=self.webpackChunkdaku||[]).push([[483],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),f=a,g=p["".concat(l,".").concat(f)]||p[f]||m[f]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6531:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={title:"SQL Operators"},i=void 0,s={unversionedId:"SDET/Security-Testing/SQL-Operators",id:"SDET/Security-Testing/SQL-Operators",title:"SQL Operators",description:"Comparision",source:"@site/docs/SDET/Security-Testing/SQL-Operators.md",sourceDirName:"SDET/Security-Testing",slug:"/SDET/Security-Testing/SQL-Operators",permalink:"/SDET/Security-Testing/SQL-Operators",draft:!1,tags:[],version:"current",frontMatter:{title:"SQL Operators"},sidebar:"SDETSidebar",previous:{title:"SQL DataTypes",permalink:"/SDET/Security-Testing/SQL-DataTypes"},next:{title:"SQL Injection",permalink:"/SDET/Security-Testing/SQL-Injection"}},l={},u=[{value:"Comparision",id:"comparision",level:3},{value:"Logical",id:"logical",level:3}],c={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"comparision"},"Comparision"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},">   Greater than operator\n\n>=  Greater than or equal operator\n\n<   Less than operator\n\n<>, !=  Not equal operator\n\n<=  Less than or equal operator\n\n<=>     NULL-safe equal to operator\n\n=   Equal operator\n\nBETWEEN ... AND ...     Whether a value is within a range of values\n\nCOALESCE()  Return the first non-NULL argument\n\nGREATEST()  Return the largest argument\n\nIN()    Whether a value is within a set of values\n\nINTERVAL()  Return the index of the argument that is less than the first argument\n\nIS  Test a value against a boolean\n\nIS NOT  Test a value against a boolean\n\nIS NOT NULL     NOT NULL value test\n\nIS NULL     NULL value test\n\nISNULL()    Test whether the argument is NULL\n\nLEAST()     Return the smallest argument\n\nLIKE    Simple pattern matching\n\nNOT BETWEEN ... AND ...     Whether a value is not within a range of values\n\nNOT IN()    Whether a value is not within a set of values\n\nNOT LIKE    Negation of simple pattern matching\n\nSTRCMP()    Compare two strings \n")),(0,a.kt)("h3",{id:"logical"},"Logical"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\nAND, &&     Logical AND\n\nNOT, !  Negates value\n\nOR, ||  Logical OR\n\nXOR     Logical XOR \n")))}m.isMDXComponent=!0}}]);