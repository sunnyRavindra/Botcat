"use strict";(self.webpackChunkdaku=self.webpackChunkdaku||[]).push([[1148],{3905:(t,e,a)=>{a.d(e,{Zo:()=>c,kt:()=>u});var r=a(7294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function s(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},l=Object.keys(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)a=l[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var i=r.createContext({}),p=function(t){var e=r.useContext(i),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},c=function(t){var e=p(t.components);return r.createElement(i.Provider,{value:e},t.children)},d="mdxType",g={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,l=t.originalType,i=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),d=p(a),m=n,u=d["".concat(i,".").concat(m)]||d[m]||g[m]||l;return a?r.createElement(u,o(o({ref:e},c),{},{components:a})):r.createElement(u,o({ref:e},c))}));function u(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var l=a.length,o=new Array(l);o[0]=m;var s={};for(var i in e)hasOwnProperty.call(e,i)&&(s[i]=e[i]);s.originalType=t,s[d]="string"==typeof t?t:n,o[1]=s;for(var p=2;p<l;p++)o[p]=a[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7631:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>i,contentTitle:()=>o,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=a(7462),n=(a(7294),a(3905));const l={title:"Playwright"},o=void 0,s={unversionedId:"TestAutomation/PlayWright",id:"TestAutomation/PlayWright",title:"Playwright",description:"Resilient \u2022 No flaky tests",source:"@site/docs/TestAutomation/PlayWright.md",sourceDirName:"TestAutomation",slug:"/TestAutomation/PlayWright",permalink:"/TestAutomation/PlayWright",draft:!1,tags:[],version:"current",frontMatter:{title:"Playwright"},sidebar:"myAutogeneratedSidebar",previous:{title:"Robot Framework",permalink:"/TestAutomation/RobotFramework"},next:{title:"Appium",permalink:"/TestAutomation/Appium"}},i={},p=[{value:"Resilient \u2022 No flaky tests",id:"resilient--no-flaky-tests",level:3},{value:"Powerful Tooling",id:"powerful-tooling",level:3},{value:"Important Commands",id:"important-commands",level:3},{value:"Basic Test",id:"basic-test",level:3},{value:"Locator Actions",id:"locator-actions",level:3},{value:"Code",id:"code",level:3},{value:"Hooks",id:"hooks",level:3},{value:"Codegen",id:"codegen",level:3},{value:"Trace Viewer",id:"trace-viewer",level:3},{value:"Test Configuration",id:"test-configuration",level:3},{value:"Save Authentication state",id:"save-authentication-state",level:3},{value:"Annotation",id:"annotation",level:3},{value:"Groups",id:"groups",level:3},{value:"Tags",id:"tags",level:3},{value:"Conditional running tests",id:"conditional-running-tests",level:3}],c={toc:p},d="wrapper";function g(t){let{components:e,...a}=t;return(0,n.kt)(d,(0,r.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h3",{id:"resilient--no-flaky-tests"},"Resilient \u2022 No flaky tests"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Auto-wait.")," Playwright waits for elements to be actionable prior to performing actions. It also has a rich set of introspection events. The combination of the two eliminates the need for artificial timeouts - the primary cause of flaky tests."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Web-first assertions.")," Playwright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Multiple everything.")," Test scenarios that span multiple ",(0,n.kt)("strong",{parentName:"p"},"tabs"),", multiple ",(0,n.kt)("strong",{parentName:"p"},"origins")," and multiple ",(0,n.kt)("strong",{parentName:"p"},"users"),". Create scenarios with different contexts for different users and run them against your server, all in one test."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Test frames, pierce Shadow DOM.")," Playwright selectors pierce shadow DOM and allow entering frames seamlessly."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Log in once.")," Save the authentication state of the context and reuse it in all the tests. This bypasses repetitive log-in operations in each test, yet delivers full isolation of independent tests."),(0,n.kt)("h3",{id:"powerful-tooling"},"Powerful Tooling"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"https://playwright.dev/docs/codegen"},"Codegen."))," Generate tests by recording your actions. Save them into any language."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"https://playwright.dev/docs/debug#playwright-inspector"},"Playwright inspector."))," Inspect page, generate selectors, step through the test execution, see click points, explore execution logs."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"https://playwright.dev/docs/trace-viewer-intro"},"Trace Viewer."))," Capture all the information to investigate the test failure. Playwright trace contains test execution screencast, live DOM snapshots, action explorer, test source, and many more."),(0,n.kt)("h3",{id:"important-commands"},"Important Commands"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"yarn create playwright // Create Project\nyarn playwright test // Run Test\nyarn playwright show-report // Run Report Server\nyarn playwright test --ui // Debut test in UI mode\nyarn playwright test --project webkit --project firefox # Overrride Browser\nyarn playwright test tests/todo-page/ tests/landing-page/ # Run Specific tests\nyarn playwright test landing login # run test containing landing and login in its name\nnpx playwright test --debug\nnpx playwright test example.spec.ts:10 --debug # Debug from a specific line\n")),(0,n.kt)("h3",{id:"basic-test"},"Basic Test"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Typescript"},"import { test, expect } from '@playwright/test';\n\ntest('has title', async ({ page }) => {  \nawait page.goto('https://playwright.dev/');\nawait expect(page).toHaveTitle(/Playwright/);\n});\n\ntest('get started link', async ({ page }) => {  \nawait page.goto('https://playwright.dev/');\nawait page.getByRole('link', { name: 'Get started' }).click();\nawait expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();\n});\n")),(0,n.kt)("h3",{id:"locator-actions"},"Locator Actions"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Action"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locator#locator-check"},"locator.check()")),(0,n.kt)("td",{parentName:"tr",align:null},"Check the input checkbox")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locator#locator-click"},"locator.click()")),(0,n.kt)("td",{parentName:"tr",align:null},"Click the element")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locator#locator-uncheck"},"locator.uncheck()")),(0,n.kt)("td",{parentName:"tr",align:null},"Uncheck the input checkbox")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locator#locator-hover"},"locator.hover()")),(0,n.kt)("td",{parentName:"tr",align:null},"Hover mouse over the element")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locator#locator-fill"},"locator.fill()")),(0,n.kt)("td",{parentName:"tr",align:null},"Fill the form field, input text")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locator#locator-focus"},"locator.focus()")),(0,n.kt)("td",{parentName:"tr",align:null},"Focus the element")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locator#locator-press"},"locator.press()")),(0,n.kt)("td",{parentName:"tr",align:null},"Press single key")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locator#locator-set-input-files"},"locator.setInputFiles()")),(0,n.kt)("td",{parentName:"tr",align:null},"Pick files to upload")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locator#locator-select-option"},"locator.selectOption()")),(0,n.kt)("td",{parentName:"tr",align:null},"Select option in the drop down")))),(0,n.kt)("h3",{id:"code"},"Code"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"expect(success).toBeTruthy(); # `toEqual`, `toContain`, `toBeTruthy`\nawait expect(page).toHaveTitle(/Playwright/);\n")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Assertion"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-be-checked"},"expect(locator).toBeChecked()")),(0,n.kt)("td",{parentName:"tr",align:null},"Checkbox is checked")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-be-enabled"},"expect(locator).toBeEnabled()")),(0,n.kt)("td",{parentName:"tr",align:null},"Control is enabled")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-be-visible"},"expect(locator).toBeVisible()")),(0,n.kt)("td",{parentName:"tr",align:null},"Element is visible")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-contain-text"},"expect(locator).toContainText()")),(0,n.kt)("td",{parentName:"tr",align:null},"Element contains text")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-have-attribute"},"expect(locator).toHaveAttribute()")),(0,n.kt)("td",{parentName:"tr",align:null},"Element has attribute")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-have-count"},"expect(locator).toHaveCount()")),(0,n.kt)("td",{parentName:"tr",align:null},"List of elements has given length")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-have-text"},"expect(locator).toHaveText()")),(0,n.kt)("td",{parentName:"tr",align:null},"Element matches text")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-locatorassertions#locator-assertions-to-have-value"},"expect(locator).toHaveValue()")),(0,n.kt)("td",{parentName:"tr",align:null},"Input element has value")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-pageassertions#page-assertions-to-have-title"},"expect(page).toHaveTitle()")),(0,n.kt)("td",{parentName:"tr",align:null},"Page has title")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-pageassertions#page-assertions-to-have-url"},"expect(page).toHaveURL()")),(0,n.kt)("td",{parentName:"tr",align:null},"Page has URL")))),(0,n.kt)("h3",{id:"hooks"},"Hooks"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"test.beforeEach")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"test.afterEach")," which are executed before/after each test. Other hooks include the ",(0,n.kt)("inlineCode",{parentName:"p"},"test.beforeAll")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"test.afterAll")),(0,n.kt)("h3",{id:"codegen"},"Codegen"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"npx playwright codegen demo.playwright.dev/todomvc\n")),(0,n.kt)("h3",{id:"trace-viewer"},"Trace Viewer"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"npx playwright test --trace on\n")),(0,n.kt)("h3",{id:"test-configuration"},"Test Configuration"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-Typescript"},"import { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  // Look for test files in the \"tests\" directory, relative to this configuration file.\n  testDir: 'tests',\n\n  // Run all tests in parallel.\n  fullyParallel: true,\n\n  // Fail the build on CI if you accidentally left test.only in the source code.\n  forbidOnly: !!process.env.CI,\n\n  // Retry on CI only.\n  retries: process.env.CI ? 2 : 0,\n\n  // Opt out of parallel tests on CI.\n  workers: process.env.CI ? 1 : undefined,\n\n  // Reporter to use\n  reporter: 'html',\n\n  use: {\n    // Base URL to use in actions like `await page.goto('/')`.\n    baseURL: 'http://127.0.0.1:3000',\n\n    // Collect trace when retrying the failed test.\n    trace: 'on-first-retry',\n  },\n  // Configure projects for major browsers.\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n  ],\n  // Run your local dev server before starting the tests.\n  webServer: {\n    command: 'npm run start',\n    url: 'http://127.0.0.1:3000',\n    reuseExistingServer: !process.env.CI,\n  },\n});\n")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Option"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-testconfig#test-config-forbid-only"},"testConfig.forbidOnly")),(0,n.kt)("td",{parentName:"tr",align:null},"Whether to exit with an error if any tests are marked as ",(0,n.kt)("inlineCode",{parentName:"td"},"test.only"),". Useful on CI.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-testconfig#test-config-fully-parallel"},"testConfig.fullyParallel")),(0,n.kt)("td",{parentName:"tr",align:null},"have all tests in all files to run in parallel. See ",(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/test-parallel"},"/Parallelism and sharding")," for more details.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-testconfig#test-config-projects"},"testConfig.projects")),(0,n.kt)("td",{parentName:"tr",align:null},"Run tests in multiple configurations or on multiple browsers")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-testconfig#test-config-reporter"},"testConfig.reporter")),(0,n.kt)("td",{parentName:"tr",align:null},"Reporter to use. See ",(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/test-reporters"},"Test Reporters")," to learn more about which reporters are available.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-testconfig#test-config-retries"},"testConfig.retries")),(0,n.kt)("td",{parentName:"tr",align:null},"The maximum number of retry attempts per test. See ",(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/test-retries"},"Test Retries")," to learn more about retries.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-testconfig#test-config-test-dir"},"testConfig.testDir")),(0,n.kt)("td",{parentName:"tr",align:null},"Directory with the test files.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-testconfig#test-config-use"},"testConfig.use")),(0,n.kt)("td",{parentName:"tr",align:null},"Options with ",(0,n.kt)("inlineCode",{parentName:"td"},"use{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-testconfig#test-config-web-server"},"testConfig.webServer")),(0,n.kt)("td",{parentName:"tr",align:null},"To launch a server during the tests, use the ",(0,n.kt)("inlineCode",{parentName:"td"},"webServer")," option")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/api/class-testconfig#test-config-workers"},"testConfig.workers")),(0,n.kt)("td",{parentName:"tr",align:null},"The maximum number of concurrent worker processes to use for parallelizing tests. Can also be set as percentage of logical CPU cores, e.g. ",(0,n.kt)("inlineCode",{parentName:"td"},"'50%'."),". See ",(0,n.kt)("a",{parentName:"td",href:"https://playwright.dev/docs/test-parallel"},"/Parallelism and sharding")," for more details.")))),(0,n.kt)("h3",{id:"save-authentication-state"},"Save Authentication state"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://playwright.dev/docs/auth"},"https://playwright.dev/docs/auth")),(0,n.kt)("h3",{id:"annotation"},"Annotation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"test.only('focus this test', async ({ page }) => {  // Run only focused tests in the entire project.});\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"test.skip('skip this test', async ({ page }) => {  // This test is not run});\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"test('skip this test', async ({ page, browserName }) => {  test.skip(browserName === 'firefox', 'Still working on it');});\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"test('skip this test', async ({ page, browserName }) => {  test.skip(browserName === 'firefox', 'Still working on it');});\n")),(0,n.kt)("h3",{id:"groups"},"Groups"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"import { test, expect } from '@playwright/test';test.describe('two tests', () => {  test('one', async ({ page }) => {    // ...  });  test('two', async ({ page }) => {    // ...  });});\n")),(0,n.kt)("h3",{id:"tags"},"Tags"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"import { test, expect } from '@playwright/test';test('Test login page @fast', async ({ page }) => {  // ...});test('Test full report @slow', async ({ page }) => {  // ...});\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'npx playwright test --grep @fast\nnpx playwright test --grep-invert @slow\nnpx playwright test --grep "@fast|@slow"\n')),(0,n.kt)("h3",{id:"conditional-running-tests"},"Conditional running tests"))}g.isMDXComponent=!0}}]);