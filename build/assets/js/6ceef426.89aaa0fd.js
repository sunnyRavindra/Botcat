"use strict";(self.webpackChunkdaku=self.webpackChunkdaku||[]).push([[6263],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,k=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(k,i(i({ref:t},s),{},{components:n})):a.createElement(k,i({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8795:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={title:"Docker"},i=void 0,l={unversionedId:"Devops/Docker",id:"Devops/Docker",title:"Docker",description:"Architecture",source:"@site/docs/Devops/Docker.md",sourceDirName:"Devops",slug:"/Devops/Docker",permalink:"/Devops/Docker",draft:!1,tags:[],version:"current",frontMatter:{title:"Docker"},sidebar:"myAutogeneratedSidebar",previous:{title:"DSA",permalink:"/ProgramingLanguage/DSA"},next:{title:"Jira",permalink:"/TestManagement/Jira"}},c={},p=[{value:"Architecture",id:"architecture",level:3},{value:"Docker run",id:"docker-run",level:3},{value:"Docker pull",id:"docker-pull",level:3},{value:"Docker file",id:"docker-file",level:3},{value:"Build Image",id:"build-image",level:3},{value:"List containers",id:"list-containers",level:3},{value:"Stop containers",id:"stop-containers",level:3},{value:"Remove stoped containers",id:"remove-stoped-containers",level:3},{value:"Push image to dockerhub",id:"push-image-to-dockerhub",level:3},{value:"Create Volume.",id:"create-volume",level:3},{value:"Mount the created volume.",id:"mount-the-created-volume",level:3},{value:"Bind Mount",id:"bind-mount",level:3},{value:"Create network",id:"create-network",level:3},{value:"References",id:"references",level:3},{value:"Docker File Reference",id:"docker-file-reference",level:3},{value:"Docker Commands",id:"docker-commands",level:3},{value:"Interacting with container",id:"interacting-with-container",level:3},{value:"Docker Compose",id:"docker-compose",level:3},{value:"Reference",id:"reference",level:3},{value:"Step-by-step guide to creating a <code>.dockerignore</code> file:",id:"step-by-step-guide-to-creating-a-dockerignore-file",level:3},{value:"DockerFile",id:"dockerfile",level:3}],s={toc:p},m="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(m,(0,a.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"architecture"},"Architecture"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Architecture.png",src:n(5934).Z,width:"912",height:"707"})),(0,r.kt)("h3",{id:"docker-run"},"Docker run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker run -i -t ubuntu /bin/bash\n")),(0,r.kt)("h3",{id:"docker-pull"},"Docker pull"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker pull ubuntu/latest\n")),(0,r.kt)("h3",{id:"docker-file"},"Docker file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM node:18-alpine\nWORKDIR /app\nCOPY . .\nRUN yarn install --production\nCMD ["node", "src/index.js"]\nEXPOSE 3000\n')),(0,r.kt)("h3",{id:"build-image"},"Build Image"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ cd /path/to/getting-started-app\n$ docker build -t getting-started \n")),(0,r.kt)("h3",{id:"list-containers"},"List containers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"docker ps\ndocker ps -a //list container with all those were stopped\n")),(0,r.kt)("h3",{id:"stop-containers"},"Stop containers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker stop <the-container-id>\n")),(0,r.kt)("h3",{id:"remove-stoped-containers"},"Remove stoped containers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ docker rm <the-container-id>\n")),(0,r.kt)("h3",{id:"push-image-to-dockerhub"},"Push image to dockerhub"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"docker tag getting-started YOUR-USER-NAME/getting-started\ndocker push YOUR-USER-NAME/getting-started\n")),(0,r.kt)("p",null,"Continue from here\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-started/05_persisting_data/"},"https://docs.docker.com/get-started/05_persisting_data/")),(0,r.kt)("h3",{id:"create-volume"},"Create Volume."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker volume create mynewvolume\n")),(0,r.kt)("h3",{id:"mount-the-created-volume"},"Mount the created volume."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker run -dp 3000:3000 --mount type=volume,src=mynewvolume,target=/etc/todos ubuntu \n")),(0,r.kt)("h3",{id:"bind-mount"},"Bind Mount"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker run -it --rm -v ~/code/app:/app image:latest\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},' docker run -it --mount type=bind,src="$(pwd)",target=/src ubuntu bash\n')),(0,r.kt)("h3",{id:"create-network"},"Create network"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker network create todo-app\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-d"},'services:\n  app:\n    image: node:18-alpine\n    command: sh -c "yarn install && yarn run dev"\n    ports:\n      - 127.0.0.1:3000:3000\n    working_dir: /app\n    volumes:\n      - ./:/app\n    environment:\n      MYSQL_HOST: mysql\n      MYSQL_USER: root\n      MYSQL_PASSWORD: secret\n      MYSQL_DB: todos\n\n  mysql:\n    image: mysql:8.0\n    volumes:\n      - todo-mysql-data:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: secret\n      MYSQL_DATABASE: todos\n\nvolumes:\n  todo-mysql-data:\n')),(0,r.kt)("h3",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-started/overview/"},"Docker Overview"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-started/overview/"},"Docker Quick Start Guide"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://medium.com/@saschagrunert/demystifying-containers-part-i-kernel-space-2c53d6979504"},"kernel namespaces and cgroups")))),(0,r.kt)("h3",{id:"docker-file-reference"},(0,r.kt)("a",{parentName:"h3",href:"https://docs.docker.com/engine/reference/builder/"},"Docker File Reference")),(0,r.kt)("h3",{id:"docker-commands"},"Docker Commands"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Login ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker login\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Build Image")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker build -t username/imagename:tag .\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"List Image")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker image ls\ndocker image ls -a\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"List of running containers.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker ps\nor \ndocker container ls\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"List of running as well as stopped containers.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker ps -a\nor\ndocker container ls -a\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Container .")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker stop <the-container-id>\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Remove Stopped Container.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker rm <the-container-id>\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Stop and remove container with one command.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker rm -f <the-container-id>\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To push locally built image to dockerhub you first need to tag the image appropriately ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker image -t imagename dockeruserID/imagename:version\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Push image to dockerHub")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker push dockeruserID/imagename:version\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Run commands in a running container ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker exec <container-id> cat /data.txt\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can watch the logs using")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker logs <container-id>\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use the docker image history command to see the layers in the getting-started image you created earlier in the tutorial.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker image history --no-trunc getting-started \n\n")),(0,r.kt)("h3",{id:"interacting-with-container"},"Interacting with container"),(0,r.kt)("p",null,"To execute commands inside a Docker container, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker exec")," command. Here's how you can do it:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Start the Docker container: Ensure that your Docker container is running. You can start a container using the ",(0,r.kt)("inlineCode",{parentName:"li"},"docker run")," command. For example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -it container-name\n")),(0,r.kt)("p",null,"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"container-name")," with the name or ID of your Docker container."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Execute a command inside the container: Open a new terminal or command prompt window and use the following command to execute a command inside the running container:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker exec -it container-name command\n")),(0,r.kt)("p",null,"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"container-name")," with the name or ID of your Docker container, and replace ",(0,r.kt)("inlineCode",{parentName:"p"},"command")," with the command you want to execute inside the container. The ",(0,r.kt)("inlineCode",{parentName:"p"},"-it")," option allows you to interact with the container's terminal."),(0,r.kt)("p",null,"For example, if you want to execute a bash shell inside the container, you can run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker exec -it container-name bash\n")),(0,r.kt)("p",null,"This will start a new shell session inside the running container."),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Run a command and exit: If you want to run a command inside the container and exit immediately without entering an interactive shell, you can use the following command:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker exec container-name command\n")),(0,r.kt)("p",null,"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"container-name")," with the name or ID of your Docker container, and replace ",(0,r.kt)("inlineCode",{parentName:"p"},"command")," with the command you want to execute inside the container."),(0,r.kt)("p",null,"For example, to list the files in the container's ",(0,r.kt)("inlineCode",{parentName:"p"},"/app")," directory, you can run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker exec container-name ls /app\n")),(0,r.kt)("p",null,"That's it! You can now execute commands inside your Docker container using the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker exec")," command."),(0,r.kt)("h3",{id:"docker-compose"},"Docker Compose"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Install Docker Compose")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo pacman -S docker-compose\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Check Docker Compose Version")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker compose version\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Start from compose file")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"compose up\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Start from compose file")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"compose down \n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"By default, named volumes in your compose file are NOT removed when running docker compose down. If you want to remove the volumes, you will need to add the --volumes flag.")),(0,r.kt)("h3",{id:"reference"},"Reference"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-started/08_using_compose/"},"Github Project"))),(0,r.kt)("h3",{id:"step-by-step-guide-to-creating-a-dockerignore-file"},"Step-by-step guide to creating a ",(0,r.kt)("inlineCode",{parentName:"h3"},".dockerignore")," file:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a New File:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Open a text editor or terminal and navigate to the root directory of your Docker project."),(0,r.kt)("li",{parentName:"ul"},"Create a new file named ",(0,r.kt)("inlineCode",{parentName:"li"},".dockerignore"),". Note the leading dot (",(0,r.kt)("inlineCode",{parentName:"li"},"."),") in the filename, as it signifies that it is a hidden file."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Specify Ignored Files and Directories:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"In the ",(0,r.kt)("inlineCode",{parentName:"li"},".dockerignore")," file, list the files and directories you want Docker to ignore when building the image."),(0,r.kt)("li",{parentName:"ul"},"Each entry should be on a separate line."),(0,r.kt)("li",{parentName:"ul"},"You can use wildcards and patterns to match multiple files or directories. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"*.log")," matches all files with the ",(0,r.kt)("inlineCode",{parentName:"li"},".log")," extension, and ",(0,r.kt)("inlineCode",{parentName:"li"},"logs/")," matches the ",(0,r.kt)("inlineCode",{parentName:"li"},"logs")," directory and its contents."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Save the File:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Save the ",(0,r.kt)("inlineCode",{parentName:"li"},".dockerignore")," file in the root directory of your Docker project."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Build or Run Docker Image:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"With the ",(0,r.kt)("inlineCode",{parentName:"li"},".dockerignore")," file in place, when you build or run a Docker image, Docker will exclude the specified files and directories from the context used during the build process."),(0,r.kt)("li",{parentName:"ul"},"This can help speed up the build process and reduce the size of the resulting image.")))),(0,r.kt)("p",null,"Here's an example ",(0,r.kt)("inlineCode",{parentName:"p"},".dockerignore")," file to get you started:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# Ignore specific file\nfile.txt\n\n# Ignore all files with .log extension\n*.log\n\n# Ignore the logs directory\nlogs/\n\n# Ignore the temp directory and its contents\ntemp/\n")),(0,r.kt)("p",null,"Customize the ",(0,r.kt)("inlineCode",{parentName:"p"},".dockerignore")," file based on your project's needs, including any files or directories you want to exclude from the Docker image."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[","[Nextjs Docker File]","]")),(0,r.kt)("p",null,"A Dockerfile is a text file used to define the configuration and instructions for building a Docker container image. It consists of a set of commands and parameters that specify how to assemble an image. When the Dockerfile is used to build the image, each instruction is executed step-by-step, creating layers that form the final image."),(0,r.kt)("p",null,"Here is a breakdown of the structure of a Dockerfile and how it is written:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Base Image Selection:"),"\nThe first line of a Dockerfile usually specifies the base image upon which the new image will be built. It defines the starting point for your container. You can use an existing base image from the Docker Hub or a private repository."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"FROM ubuntu:latest\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Environment Setup:"),"\nYou can set environment variables to configure the container's behavior or to provide configuration details."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"ENV MY_VAR=my_value\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Working Directory:"),"\nYou can set the working directory inside the container where commands will be executed."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"WORKDIR /app\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Copying Files:"),"\nYou can copy files from the host machine into the container's filesystem."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"COPY ./src /app/src\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Installing Dependencies:"),"\nYou can use package managers (like ",(0,r.kt)("inlineCode",{parentName:"p"},"apt-get"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"yum"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"pip"),") to install required software and dependencies inside the container."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"RUN apt-get update && apt-get install -y python3\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Exposing Ports:"),"\nIf your application listens on specific ports, you can expose them to the host machine."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"EXPOSE 80\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Running Commands:"),"\nYou can execute commands within the container during image build time."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"RUN python3 -m pip install flask\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Entrypoint or CMD:"),"\nSpecifies the command that will be executed when the container is run. It's either the ",(0,r.kt)("inlineCode",{parentName:"p"},"CMD")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ENTRYPOINT")," instruction."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'CMD ["python3", "app.py"]\n')),(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CMD")," instruction allows you to specify a default command and arguments that can be overridden when starting the container. The ",(0,r.kt)("inlineCode",{parentName:"p"},"ENTRYPOINT")," instruction is similar but makes it harder to override the specified command.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Additional Configuration and Cleanup:"),"\nYou can add any additional configurations or cleanup operations in the Dockerfile as needed.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Building the Image:"),"\nOnce you've written the Dockerfile, you can build the Docker image using the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker build")," command. The Docker CLI will read the Dockerfile and execute each instruction to create the final image."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t my_image_name:tag .\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Running the Container:"),"\nAfter building the image, you can run a container based on that image using the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker run")," command."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 8080:80 my_image_name:tag\n")))),(0,r.kt)("p",null,"This is a basic overview of a Dockerfile and how it is written. Dockerfiles can be more complex depending on the application requirements, and you can use various instructions and techniques to optimize the image size and build process."),(0,r.kt)("h3",{id:"dockerfile"},"DockerFile"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'# Use an official Node.js image as the base\nFROM node:14-alpine\n\n# Set the working directory inside the container\nWORKDIR /app\n\n# Copy package.json and package-lock.json to the working directory\nCOPY package*.json ./\n\n# Install project dependencies\nRUN npm install\n\n# Copy the entire project to the working directory\nCOPY . .\n\n# Build the Next.js application\nRUN npm run build\n\n# Expose the desired port (change it to match your Next.js application\'s port)\nEXPOSE 3000\n\n# Set the command to start the Next.js application\nCMD ["npm", "start"]\n')),(0,r.kt)("p",null,"Make sure to replace ",(0,r.kt)("inlineCode",{parentName:"p"},"3000")," with the actual port number your Next.js application listens on. This Dockerfile assumes that your project structure includes ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"package-lock.json"),", and a build script defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"scripts")," section of ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,r.kt)("p",null,"To build a Docker image using this Dockerfile, navigate to the directory containing the Dockerfile and run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker build -t your-image-name .\n")),(0,r.kt)("p",null,"Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"your-image-name")," with the desired name for your Docker image."),(0,r.kt)("p",null,"Once the image is built, you can run a container based on this image using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -p 3000:3000 your-image-name\n")),(0,r.kt)("p",null,"This will map port 3000 of the container to port 3000 of your host machine. You can then access your Next.js application by visiting ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:3000")," in your browser."),(0,r.kt)("p",null,"Remember to customize the Dockerfile as per your project's specific requirements, such as additional dependencies or environment variables."))}u.isMDXComponent=!0},5934:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/DockerArchitecture-0b12ae52eebeda86042767128bfbd674.png"}}]);