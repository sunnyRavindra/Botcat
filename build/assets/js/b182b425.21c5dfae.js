"use strict";(self.webpackChunkdaku=self.webpackChunkdaku||[]).push([[9248],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=u(n),c=i,g=p["".concat(l,".").concat(c)]||p[c]||m[c]||s;return n?r.createElement(g,o(o({ref:t},d),{},{components:n})):r.createElement(g,o({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=c;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[p]="string"==typeof e?e:i,o[1]=a;for(var u=2;u<s;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},45:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const s={title:"TestNg"},o=void 0,a={unversionedId:"AutomationFramework/TestNg",id:"AutomationFramework/TestNg",title:"TestNg",description:"TestNG Basics",source:"@site/docs/AutomationFramework/TestNg.md",sourceDirName:"AutomationFramework",slug:"/AutomationFramework/TestNg",permalink:"/AutomationFramework/TestNg",draft:!1,tags:[],version:"current",frontMatter:{title:"TestNg"},sidebar:"myAutogeneratedSidebar",previous:{title:"AutomationFramework",permalink:"/AutomationFramework/"},next:{title:"Cucumber",permalink:"/AutomationFramework/Cucumber"}},l={},u=[{value:"TestNG Basics",id:"testng-basics",level:3},{value:"Execute TestNG file",id:"execute-testng-file",level:3},{value:"Create TestNG Project",id:"create-testng-project",level:3},{value:"TestNG.xml example",id:"testngxml-example",level:3},{value:"Parellel Execution",id:"parellel-execution",level:3},{value:"TestNG Reporter Class",id:"testng-reporter-class",level:3},{value:"WebDriverListener",id:"webdriverlistener",level:3},{value:"WebDriver Listener code example",id:"webdriver-listener-code-example",level:3},{value:"TestNG Listeners",id:"testng-listeners",level:3},{value:"ItestListener Listener",id:"itestlistener-listener",level:3},{value:"IReporter Listener",id:"ireporter-listener",level:3},{value:"IAnnotationTransformer",id:"iannotationtransformer",level:3},{value:"IExecutionListener Listener",id:"iexecutionlistener-listener",level:3},{value:"IHookable Listener",id:"ihookable-listener",level:3},{value:"IInvokedMethodListener Listener",id:"iinvokedmethodlistener-listener",level:3},{value:"IMethodInterceptor Listeners",id:"imethodinterceptor-listeners",level:3},{value:"ISuiteListener Listeners",id:"isuitelistener-listeners",level:3},{value:"Connecting the Listeners",id:"connecting-the-listeners",level:3},{value:"PDF Report Generation",id:"pdf-report-generation",level:3},{value:"Retry Failed Steps",id:"retry-failed-steps",level:3}],d={toc:u},p="wrapper";function m(e){let{components:t,...s}=e;return(0,i.kt)(p,(0,r.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"testng-basics"},"TestNG Basics"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://www.guru99.com/introduction-to-selenium.html"},"Guru99"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"https://testng.org/doc/documentation-main.html"},"TestNG Docs"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Separate Thread for all methods")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Support for data providers")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Support for Parameters"))),(0,i.kt)("h3",{id:"execute-testng-file"},"Execute TestNG file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Bash"},"java org.testng.TestNG testng1.xml [testng2.xml testng3.xml ...]\n")),(0,i.kt)("h3",{id:"create-testng-project"},"Create TestNG Project"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mvn archetype:create -DgroupId=org.martingilday -DartifactId=test1 -DarchetypeGroupId=org.martingilday -DarchetypeArtifactId=testng-archetype\n  -DarchetypeVersion=1.0-SNAPSHOT -DremoteRepositories=https://www.martingilday.org/repository/\n")),(0,i.kt)("h3",{id:"testngxml-example"},"TestNG.xml example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-TestNG"},'        <classes>\n            <class name="testNG.Utils" />\n            <class name="testNG.TestNG">\n                <methods>\n                    <include name="test2" />\n                </methods>\n            </class>\n        </classes>\n')),(0,i.kt)("h3",{id:"parellel-execution"},"Parellel Execution"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Parelell.png",src:n(8103).Z,width:"1862",height:"1088"})),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://www.guru99.com/images/jsp/030116_0948_TestNGExecu2.png",alt:"Parellel Execution"})),(0,i.kt)("h3",{id:"testng-reporter-class"},"TestNG Reporter Class"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},'Reporter.log("Logs that you want to be visible in TestNG report")\n')),(0,i.kt)("h3",{id:"webdriverlistener"},"WebDriverListener"),(0,i.kt)("iframe",{src:"https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/support/events/EventFiringDecorator.html",width:"100%",height:"4920px",scrolling:"no"}),(0,i.kt)("h3",{id:"webdriver-listener-code-example"},"WebDriver Listener code example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},"\nimport org.openqa.selenium.*;\n\nimport java.util.Arrays;\n\npublic class MyListener implements WebDriverEventListener {\n\n    @Override\n    public void beforeNavigateTo(String url, WebDriver driver) {\n        System.out.println(\u201cBefore navigating to: \u2018\u201d + url + \u201c\u2018\u201d);\n    }\n\n    @Override\n    public void afterNavigateTo(String url, WebDriver driver) {\n        System.out.println(\u201cNavigated to:'\u201d + url + \u201c\u2018\u201d);\n    }\n\n    @Override\n    public void beforeClickOn(WebElement element, WebDriver driver) {\n        System.out.println(\u201cTrying to click on: \u201d + element.toString());\n    }\n\n    @Override\n    public void afterClickOn(WebElement element, WebDriver driver) {\n        System.out.println(\u201cClicked on: \u201d + element.toString());\n    }\n\n    @Override\n    public void beforeNavigateBack(WebDriver driver) {\n        System.out.println(\u201cNavigating back to previous page\u201d);\n    }\n\n    @Override\n    public void afterNavigateBack(WebDriver driver) {\n        System.out.println(\u201cNavigated back to previous page\u201d);\n    }\n\n    @Override\n    public void beforeNavigateForward(WebDriver driver) {\n        System.out.println(\u201cNavigating forward to next page\u201d);\n    }\n\n    @Override\n    public void afterNavigateForward(WebDriver driver) {\n        System.out.println(\u201cNavigated forward to next page\u201d);\n    }\n\n    @Override\n    public void onException(Throwable error, WebDriver driver) {\n        System.out.println(\u201cException occured: \u201d + error);\n    }\n\n    @Override\n    public <X> void beforeGetScreenshotAs(OutputType<X> outputType) {\n\n    }\n\n    @Override\n    public <X> void afterGetScreenshotAs(OutputType<X> outputType, X x) {\n\n    }\n\n    @Override\n    public void beforeFindBy(By by, WebElement element, WebDriver driver) {\n        System.out.println(\u201cTrying to find Element By : \u201d + by.toString());\n    }\n\n    @Override\n    public void afterFindBy(By by, WebElement element, WebDriver driver) {\n        System.out.println(\u201cFound Element By : \u201d + by.toString());\n    }\n\n    /*\n     * non overridden methods of WebListener class\n     */\n\n    @Override\n    public void beforeScript(String script, WebDriver driver) {\n    }\n\n    @Override\n    public void afterScript(String script, WebDriver driver) {\n    }\n\n    @Override\n    public void beforeAlertAccept(WebDriver driver) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void afterAlertAccept(WebDriver driver) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void afterAlertDismiss(WebDriver driver) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void beforeAlertDismiss(WebDriver driver) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void beforeNavigateRefresh(WebDriver driver) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void afterNavigateRefresh(WebDriver driver) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void beforeChangeValueOf(WebElement element, WebDriver driver, CharSequence[] keysToSend) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void afterChangeValueOf(WebElement element, WebDriver driver, CharSequence[] keysToSend) {\n        System.out.println(\u201cElement value changed to: \u201d + element.toString() + \u201d using keys: \u201d + Arrays.toString(keysToSend));\n    }\n\n    @Override\n    public void beforeSwitchToWindow(String windowName, WebDriver driver) {\n        System.out.println(\u201cBefore switching to window: \u201d + windowName);\n    }\n\n    @Override\n    public void afterSwitchToWindow(String windowName, WebDriver driver) {\n        System.out.println(\u201cSwitched to window: \u201d + windowName);\n    }\n\n    @Override\n    public void beforeGetText(WebElement element, WebDriver driver) {\n        System.out.println(\u201cBefore getting text of element: \u201d + element.toString());\n    }\n\n    @Override\n    public void afterGetText(WebElement element, WebDriver driver, String text) {\n        System.out.println(\u201cText of element: \u201d + element.toString() + \u201d is: \u201d + text);\n    }\n}\n\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},"\nWebDriver driver = new ChromeDriver();\nEventFiringWebDriver eDriver = new EventFiringWebDriver(driver);\n\nMyListener eventListener = new MyListener();\neDriver.register(eventListener);\nUse the EventFiringWebDriver instance to drive the browser instead of the original WebDriver instance.\n\neDriver.get(\u201chttps://www.google.com\u201d);\n\nDriver.unregister(eventListener);\n\n")),(0,i.kt)("h3",{id:"testng-listeners"},"TestNG Listeners"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.browserstack.com/guide/testng-listeners"},"Basics"))),(0,i.kt)("p",null,"Below are the few TestNG listeners:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"IAnnotationTransformer "),(0,i.kt)("li",{parentName:"ul"},"IAnnotationTransformer2 "),(0,i.kt)("li",{parentName:"ul"},"IConfigurable "),(0,i.kt)("li",{parentName:"ul"},"IConfigurationListener "),(0,i.kt)("li",{parentName:"ul"},"IExecutionListener"),(0,i.kt)("li",{parentName:"ul"},"IHookable "),(0,i.kt)("li",{parentName:"ul"},"IInvokedMethodListener "),(0,i.kt)("li",{parentName:"ul"},"IInvokedMethodListener2 "),(0,i.kt)("li",{parentName:"ul"},"IMethodInterceptor "),(0,i.kt)("li",{parentName:"ul"},"IReporter"),(0,i.kt)("li",{parentName:"ul"},"ISuiteListener"),(0,i.kt)("li",{parentName:"ul"},"ITestListener ")),(0,i.kt)("h3",{id:"itestlistener-listener"},"ItestListener Listener"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},'public class Listeners implements ITestListener {\n\n@Override\npublic void onStart(ITestContext context) {\n\nSystem.out.println("Test Started : ###########Started###########" + context.getName());\n\n}\n\n@Override\n\npublic void onFinish(ITestContext context) {\nSystem.out.println("Test Ends : ##########Ended######### :--\x3e" + context.getName());\n}\n\n@Override\n\npublic void onTestFailure(ITestResult results) {\n\nSystem.out.println("Test Results Status : " + results.getStatus());\n}\n\n@Override\n\npublic void onTestSuccess(ITestResult result) {\nSystem.out.println("Test sucessfuly completed " + result.getName() );\n    }\n\n@Override\n\npublic void onTestSkipped(ITestResult result) {\n\nSystem.out.println("Test sucessfuly completed " + result.getName() );\n    }\n}\n')),(0,i.kt)("h3",{id:"ireporter-listener"},"IReporter Listener"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},'@Override\n\npublic void generateReport(List<XmlSuite> xmlSuite, List<ISuite> iSuite, String outputDirectory) {\n\nfor (ISuite isuite : iSuite) {\nMap<String, ISuiteResult> results = isuite.getResults();\nSet<String> keys = results.keySet();\n\nfor (String key : keys) {\nITestContext context = results.get(key).getTestContext();\n\nSystem.out.println("Suite Name->" + context.getName()\n+ "::Report output Ditectory->" + context.getOutputDirectory()\n+ "::Suite Name->" + context.getSuite().getName()\n+ "::Start Date Time for execution->" + context.getStartDate()\n+ "::End Date Time for execution->" + context.getEndDate());\n\nIResultMap resultMap = context.getFailedTests();\n\nCollection<ITestNGMethod> failedMethods = resultMap.getAllMethods();\n\nSystem.out.println("--------FAILED TEST CASE---------");\nfor (ITestNGMethod iTestNGMethod : failedMethods) {\n// Print failed test cases detail\nSystem.out.println("TESTCASE NAME->" + iTestNGMethod.getMethodName()\n+ "\\nDescription->" + iTestNGMethod.getDescription()\n+ "\\nPriority->" + iTestNGMethod.getPriority()\n+ "\\n:Date->" + new Date(iTestNGMethod.getDate()));\n\n            }\n        }\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},'import java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport org.testng.IReporter;\nimport org.testng.IResultMap;\nimport org.testng.ISuite;\nimport org.testng.ISuiteListener;\nimport org.testng.ISuiteResult;\nimport org.testng.ITestContext;\nimport org.testng.ITestListener;\nimport org.testng.ITestNGMethod;\nimport org.testng.ITestResult;\nimport org.testng.xml.XmlSuite;\n\npublic class MyListener implements IReporter {\n\n@Override\npublic void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites, String outputDirectory) {\n// TODO Auto-generated method stub\nISuite suite = suites.get(0);\nMap<String, Collection<ITestNGMethod>> methodsByGroup = suite.getMethodsByGroups();\nMap<String, ISuiteResult> tests = suite.getResults();\nfor (String key : tests.keySet()) {\nSystem.out.println("Key: " + key + ", Value: " + tests.get(key));\n}\nCollection<ISuiteResult> suiteResults = tests.values();\nISuiteResult suiteResult = suiteResults.iterator().next();\nITestContext testContext = suiteResult.getTestContext();\nCollection<ITestNGMethod> perfMethods = methodsByGroup.get("smoke");\nIResultMap failedTests = testContext.getFailedTests();\nfor (ITestNGMethod perfMethod : perfMethods) {\nSet<ITestResult> testResultSet = failedTests.getResults(perfMethod);\nfor (ITestResult testResult : testResultSet) {\nSystem.out.println("Test " + testResult.getName() + " failed, error " + testResult.getThrowable());\n}\n}\nIResultMap passedTests = testContext.getPassedTests();\nfor (ITestNGMethod perfMethod : perfMethods) {\nSet<ITestResult> testResultSet = passedTests.getResults(perfMethod);\nfor (ITestResult testResult : testResultSet) {\nSystem.out.println("Test " + testResult.getName() + " passed, time took " +\n(testResult.getEndMillis() - testResult.getStartMillis()));\n}\n}\n\n}\n\n}\n')),(0,i.kt)("h3",{id:"iannotationtransformer"},"IAnnotationTransformer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},'import org.testng.annotations.Test;\npublic class IAnnotationTransformerWithExample {\n\nMyListener obj=new MyListener();\n@Test(invocationCount=5)\npublic void changeInvocationCountOfMethod()\n{\nSystem.out.println("This method have invocation count set to 5 but at run time it shall become "+ obj.counter);\n}\n\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},'import java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\n\nimport org.testng.IAnnotationTransformer;\nimport org.testng.annotations.ITestAnnotation;\n\npublic class MyListener implements IAnnotationTransformer {\n\nint counter=3;\n\n@Override\npublic void transform(ITestAnnotation testAnnotation, Class testClass, Constructor testConstrutor, Method testMethod)\n{\nif (testMethod.getName().equals("ChangeInvocationCountOfMethod")) {\nSystem.out.println("Changing invocation for the following method: " + testMethod.getName());\ntestAnnotation.setInvocationCount(counter);\n\n}\n\n}\n}\n')),(0,i.kt)("h3",{id:"iexecutionlistener-listener"},"IExecutionListener Listener"),(0,i.kt)("p",null,"As the name suggests, it monitors the beginning and end of TestNG execution. This listener is mainly used to start/stop the server while starting or ending code execution. It may also inform respective stakeholders via email that execution shall start or when it ends. It has two methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"onExecutionStart()")," \u2013 invoked before TestNG starts executing the suites"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"onExecutionFinish()")," \u2013 invoked after all TestNG suites have finished execution")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},'import java.sql.Time;\n\nimport org.testng.IExecutionListener;\n\npublic class MyListener implements IExecutionListener {\n\n@Override\npublic void onExecutionFinish() {\nlong endTime= System.currentTimeMillis();\nSystem.out.println("Inform all the suite have finished execution at"+ endTime);\n\n}\n\n@Override\npublic void onExecutionStart() {\nlong startTime= System.currentTimeMillis();\nSystem.out.println("Inform all the suite have started execution at"+ startTime);\n\n}\n\n}\n')),(0,i.kt)("h3",{id:"ihookable-listener"},"IHookable Listener"),(0,i.kt)("p",null,"If a class implements this interface, its run method will be invoked instead of each test method. Using the IHookCallBack parameter\u2019s callback method, the test method\u2019s invocation can be performed. It has a single method name run, which accepts two parameters.run(IHookCallBack callBack, ITestResult testResult)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},'import org.testng.annotations.DataProvider;\nimport org.testng.annotations.Test;\n\npublic class IHookableListenerWithExample {\n\n@Test(dataProvider="parametersToBeSent")\npublic void t(String parameter) {\nSystem.out.println("test method to be called with the following parameter is " + parameter);\n}\n\n@DataProvider\npublic Object[][] parametersToBeSent() {\nreturn new Object[][]{{"parameter 1"}, {"parameter 2"}, {"parameter 3"}};\n}\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},'import org.testng.IHookCallBack;\nimport org.testng.IHookable;\nimport org.testng.ITestResult;\n\npublic class MyListener implements IHookable {\n\n@Override\npublic void run(IHookCallBack callBack, ITestResult testResult) {\n\nObject[] parameterValues = callBack.getParameters();\nif (parameterValues[0].equals("parameter 3")) {\nSystem.out.println("Skip the required parameter");\n} else {\ncallBack.runTestMethod(testResult);\n}\n\n}\n\n}\n')),(0,i.kt)("h3",{id:"iinvokedmethodlistener-listener"},"IInvokedMethodListener Listener"),(0,i.kt)("p",null,"This listener gets invoked before and after a method in TestNG. These methods constitute both test and other configuration methods. These listeners help set up configuration or other cleanup activities. It contains two methods:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"beforeInvocation()"),": this method gets invoked before every method"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"afterInvocation():")," this method gets invoked after every method")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},'import org.testng.IInvokedMethod;\nimport org.testng.IInvokedMethodListener;\nimport org.testng.ITestResult;\npublic class MyListener implements IInvokedMethodListener {\n\n@Override\npublic void afterInvocation(IInvokedMethod method, ITestResult result) {\nSystem.out.println("This method is invoked after every config method - " + method.getTestMethod().getMethodName());\n\n}\n\n@Override\npublic void beforeInvocation(IInvokedMethod method, ITestResult result) {\nSystem.out.println("This method is invoked before every config method - " + method.getTestMethod().getMethodName());\n\n}\n\n}\n')),(0,i.kt)("h3",{id:"imethodinterceptor-listeners"},"IMethodInterceptor Listeners"),(0,i.kt)("p",null,"This listener helps to alter the methods that TestNG is supposed to run. It gets invoked just before TestNG invokes the methods. It just has one method, ",(0,i.kt)("strong",{parentName:"p"},"intercept,")," that returns an altered list of methods. Let\u2019s look at an example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},"import java.util.ArrayList;\nimport java.util.List;\n\nimport org.testng.IMethodInstance;\nimport org.testng.IMethodInterceptor;\nimport org.testng.ITestContext;\nimport org.testng.annotations.Test;\n\npublic class MyListener implements IMethodInterceptor {\n\n@Override\npublic List<IMethodInstance> intercept(List<IMethodInstance> methodsInstance, ITestContext testContext) {\nList<IMethodInstance> result = new ArrayList<IMethodInstance>();\nfor (IMethodInstance method : methodsInstance) {\nTest testMethod = method.getMethod().getConstructorOrMethod().getMethod().getAnnotation(Test.class);\nif (testMethod.priority() == 1) {\nresult.add(method);\n}\n}\nreturn result;\n}\n\n}\n")),(0,i.kt)("h3",{id:"isuitelistener-listeners"},"ISuiteListener Listeners"),(0,i.kt)("p",null,"As the name suggests, this listener works at the suite level. It listens and runs before the start and end of suite execution. It contains two methods:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"onStart"),": invoked before test suite execution starts"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"onFinish:")," invoked after test suite execution finishes.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},'import org.testng.ISuite;\nimport org.testng.ISuiteListener;\nimport org.testng.ITestContext;\nimport org.testng.ITestListener;\nimport org.testng.ITestResult;\n\npublic class MyListener implements ISuiteListener {\n\n@Override\npublic void onFinish(ISuite suite1) {\nSystem.out.println("onFinish function started of ISuiteListener " );\n\n}\n\n@Override\npublic void onStart(ISuite suite2) {\nSystem.out.println("onStart function started of ISuiteListener " );\n\n}\n\n}\n')),(0,i.kt)("h3",{id:"connecting-the-listeners"},"Connecting the Listeners"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Call the Listener in your class")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},"@Listeners(utils.Listeners.class)\n\npublic class LoginTest {\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Instead add the tag in TestNG.xml")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},'<listeners>\n\n<listener class-name="afw.listeners.TestListener"></listener>\n\n<listener class-name="afw.listeners.ReporterListener"></listener>\n\n<listener class-name="afw.listeners.ExecutionListener"></listener>\n\n<listener class-name="afw.listeners.InvokedMethodListener"></listener>\n\n<listener class-name="afw.listeners.SuiteListener"></listener>\n\n</listeners>\n')),(0,i.kt)("h3",{id:"pdf-report-generation"},"PDF Report Generation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://mvnrepository.com/artifact/com.itextpdf/itextpdf/5.5.13.3"},"IText Core")," Java API")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Maven"},"\x3c!-- https://mvnrepository.com/artifact/com.itextpdf/itextpdf --\x3e\n<dependency>\n    <groupId>com.itextpdf</groupId>\n    <artifactId>itextpdf</artifactId>\n    <version>5.5.13.3</version>\n</dependency>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},'public class CreatePDFReport {\n\n  \n\nDocument docu;\n\n  \n\npublic void openPdfPath() throws FileNotFoundException, DocumentException {\n\nString fileName = new File("").getAbsoluteFile().toString() + "/test-output/pdfReport" + System.currentTimeMillis()\n\n+ ".pdf";\n\nFileOutputStream fos = new FileOutputStream(fileName);\n\ndocu = new Document();\n\nPdfWriter.getInstance(docu, fos);\n\ndocu.open();\n\n}\n\n  \n\npublic void addData(String authorName, String title, String description) {\n\ndocu.addAuthor(authorName);\n\ndocu.addTitle(title);\n\ndocu.addSubject(description);\n\n}\n\n  \n\npublic void addParagraph(String text) throws DocumentException {\n\ndocu.add(new Paragraph(text));\n\n}\n\n  \n\npublic void closePdf() {\n\ndocu.close();\n\n}\n\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Call the above in the IReporter Listener")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Java"},'public class ReporterListener extends CreatePDFReport implements IReporter {\n\n  \n\n@Override\n\npublic void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites, String outputDirectory) {\n\nfor (ISuite ist : suites) {\n\ntry {\n\n  \n\nopenPdfPath();\n\n// *************//\n\nMap<String, ISuiteResult> resultSuiteMap = ist.getResults();\n\nSet<String> key = resultSuiteMap.keySet();\n\nfor (String k : key) {\n\nITestContext context = resultSuiteMap.get(k).getTestContext();\n\nSystem.out.println("Suite Name- " + context.getName() + "\\n Report output Directory- "\n\n+ context.getOutputDirectory() + "\\n Suite Name- " + context.getSuite().getName()\n\n+ "\\n Start Date Time for Execution- " + context.getStartDate()\n\n+ "\\n End Date Time for Execution- " + context.getEndDate());\n\n  \n\naddParagraph("Suite Name- " + context.getName() + "\\n Report output Directory- "\n\n+ context.getOutputDirectory() + "\\n Suite Name- " + context.getSuite().getName()\n\n+ "\\n Start Date Time for Execution- " + context.getStartDate()\n\n+ "\\n End Date Time for Execution- " + context.getEndDate());\n\nIResultMap resultMap = context.getFailedTests();\n\n  \n\nCollection<ITestNGMethod> failedMethods = resultMap.getAllMethods();\n\nSystem.out.println("------Failed Test Case-----");\n\n  \n\nfor (ITestNGMethod imd : failedMethods) {\n\nSystem.out.println(\n\n"Test Case Name- " + imd.getMethodName() + "\\n Description- " + imd.getDescription()\n\n+ "\\n Priority- " + imd.getPriority() + "\\n Date- " + new Date(imd.getDate()));\n\n  \n\naddParagraph(\n\n"Test Case Name- " + imd.getMethodName() + "\\n Description- " + imd.getDescription()\n\n+ "\\n Priority- " + imd.getPriority() + "\\n Date- " + new Date(imd.getDate()));\n\n}\n\n  \n\nIResultMap passedTest = context.getPassedTests();\n\nCollection<ITestNGMethod> passedMethods = passedTest.getAllMethods();\n\nSystem.out.println("------Passed Test Case-----");\n\nfor (ITestNGMethod imd1 : passedMethods) {\n\nSystem.out.println("Test Case Name- " + imd1.getMethodName() + "\\n Description- "\n\n+ imd1.getDescription() + "\\n Priority- " + imd1.getPriority() + "\\n Date- "\n\n+ new Date(imd1.getDate()));\n\n  \n\naddParagraph("Test Case Name- " + imd1.getMethodName() + "\\n Description- "\n\n+ imd1.getDescription() + "\\n Priority- " + imd1.getPriority() + "\\n Date- "\n\n+ new Date(imd1.getDate()));\n\n}\n\n}\n\n// Closing PDF file\n\nclosePdf();\n\n} catch (Exception e) {\n\ne.printStackTrace();\n\n}\n\n}\n\n}\n')),(0,i.kt)("h3",{id:"retry-failed-steps"},"Retry Failed Steps"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public class RetryAnalyzer implements IRetryAnalyzer {\n\n    int counter = 0;\n    int retryLimit = 4;\n    /*\n     * (non-Javadoc)\n     * @see org.testng.IRetryAnalyzer#retry(org.testng.ITestResult)\n     * \n     * This method decides how many times a test needs to be rerun.\n     * TestNg will call this method every time a test fails. So we \n     * can put some code in here to decide when to rerun the test.\n     * \n     * Note: This method will return true if a tests needs to be retried\n     * and false it not.\n     *\n     */\n\n    @Override\n    public boolean retry(ITestResult result) {\n\n        if(counter < retryLimit)\n        {\n            counter++;\n            return true;\n        }\n        return false;\n    }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public class Test001 {\n\n    @Test(retryAnalyzer = Tests.RetryAnalyzer.class)\n    public void Test1()\n    {\n        Assert.assertEquals(false, true);\n    }\n\n    @Test\n    public void Test2()\n    {\n        Assert.assertEquals(false, true);\n    }\n}\n")))}m.isMDXComponent=!0},8103:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/Parelell-788b5b747720c72883e61622e19174a9.png"}}]);